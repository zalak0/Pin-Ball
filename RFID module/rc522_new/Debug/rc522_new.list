
rc522_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dfc  08002dfc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002dfc  08002dfc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dfc  08002dfc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000098  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006b11  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014db  00000000  00000000  00026b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000678  00000000  00000000  00028078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004d0  00000000  00000000  000286f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c815  00000000  00000000  00028bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008371  00000000  00000000  000453d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000aa072  00000000  00000000  0004d746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000190c  00000000  00000000  000f77b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  000f90c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002db4 	.word	0x08002db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002db4 	.word	0x08002db4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc44 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f864 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8e0 	bl	8000398 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d8:	f000 f8a6 	bl	8000328 <MX_SPI1_Init>
  MFRC522_Init();  // Initialize the MFRC522 module
 80001dc:	f000 fa16 	bl	800060c <MFRC522_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Check for a card presence
    status = MFRC522_Request(PICC_REQIDL, current_uid);
 80001e0:	4927      	ldr	r1, [pc, #156]	; (8000280 <main+0xb8>)
 80001e2:	2026      	movs	r0, #38	; 0x26
 80001e4:	f000 fb09 	bl	80007fa <MFRC522_Request>
 80001e8:	4603      	mov	r3, r0
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b25      	ldr	r3, [pc, #148]	; (8000284 <main+0xbc>)
 80001ee:	701a      	strb	r2, [r3, #0]
    if (status == MI_OK) {
 80001f0:	4b24      	ldr	r3, [pc, #144]	; (8000284 <main+0xbc>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d12d      	bne.n	8000254 <main+0x8c>
      // If a card is detected, proceed to read the UID
      status = MFRC522_Anticoll(current_uid);
 80001f8:	4821      	ldr	r0, [pc, #132]	; (8000280 <main+0xb8>)
 80001fa:	f000 fb23 	bl	8000844 <MFRC522_Anticoll>
 80001fe:	4603      	mov	r3, r0
 8000200:	461a      	mov	r2, r3
 8000202:	4b20      	ldr	r3, [pc, #128]	; (8000284 <main+0xbc>)
 8000204:	701a      	strb	r2, [r3, #0]
      if (status == MI_OK) {
 8000206:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <main+0xbc>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d122      	bne.n	8000254 <main+0x8c>
        // Copy the UID to sNum for live expression observation
        memcpy(sNum, current_uid, 5);
 800020e:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <main+0xc0>)
 8000210:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <main+0xb8>)
 8000212:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000216:	6018      	str	r0, [r3, #0]
 8000218:	3304      	adds	r3, #4
 800021a:	7019      	strb	r1, [r3, #0]

        // Check if the UID matches the pre-stored UID
        if (memcmp(sNum, stored_uid, 5) == 0) {
 800021c:	2205      	movs	r2, #5
 800021e:	491b      	ldr	r1, [pc, #108]	; (800028c <main+0xc4>)
 8000220:	4819      	ldr	r0, [pc, #100]	; (8000288 <main+0xc0>)
 8000222:	f002 fd8b 	bl	8002d3c <memcmp>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d103      	bne.n	8000234 <main+0x6c>
          uid_match = 'Y';
 800022c:	4b18      	ldr	r3, [pc, #96]	; (8000290 <main+0xc8>)
 800022e:	2259      	movs	r2, #89	; 0x59
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	e002      	b.n	800023a <main+0x72>
        } else {
          uid_match = 'N';
 8000234:	4b16      	ldr	r3, [pc, #88]	; (8000290 <main+0xc8>)
 8000236:	224e      	movs	r2, #78	; 0x4e
 8000238:	701a      	strb	r2, [r3, #0]
        }

        // Update the last detected time
        last_detected_time = HAL_GetTick();
 800023a:	f000 fc67 	bl	8000b0c <HAL_GetTick>
 800023e:	4603      	mov	r3, r0
 8000240:	4a14      	ldr	r2, [pc, #80]	; (8000294 <main+0xcc>)
 8000242:	6013      	str	r3, [r2, #0]

        HAL_Delay(100);
 8000244:	2064      	movs	r0, #100	; 0x64
 8000246:	f000 fc6d 	bl	8000b24 <HAL_Delay>
        // Optionally, toggle an LED for visual confirmation
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	4812      	ldr	r0, [pc, #72]	; (8000298 <main+0xd0>)
 8000250:	f000 ff04 	bl	800105c <HAL_GPIO_TogglePin>
      }
    }

    // Check if the timeout period has passed
    if (HAL_GetTick() - last_detected_time > TIMEOUT_MS) {
 8000254:	f000 fc5a 	bl	8000b0c <HAL_GetTick>
 8000258:	4602      	mov	r2, r0
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <main+0xcc>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000264:	d907      	bls.n	8000276 <main+0xae>
      // Clear the sNum and set uid_match to '\0' if no card is detected
      memset(sNum, 0, sizeof(sNum));
 8000266:	2205      	movs	r2, #5
 8000268:	2100      	movs	r1, #0
 800026a:	4807      	ldr	r0, [pc, #28]	; (8000288 <main+0xc0>)
 800026c:	f002 fd76 	bl	8002d5c <memset>
      uid_match = '\0';
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <main+0xc8>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(100);  // Add a small delay to prevent continuous reading
 8000276:	2064      	movs	r0, #100	; 0x64
 8000278:	f000 fc54 	bl	8000b24 <HAL_Delay>
    status = MFRC522_Request(PICC_REQIDL, current_uid);
 800027c:	e7b0      	b.n	80001e0 <main+0x18>
 800027e:	bf00      	nop
 8000280:	20000094 	.word	0x20000094
 8000284:	200000a1 	.word	0x200000a1
 8000288:	2000009c 	.word	0x2000009c
 800028c:	20000000 	.word	0x20000000
 8000290:	200000a2 	.word	0x200000a2
 8000294:	200000a4 	.word	0x200000a4
 8000298:	48000800 	.word	0x48000800

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b090      	sub	sp, #64	; 0x40
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fd56 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002be:	2301      	movs	r3, #1
 80002c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fed3 	bl	8001090 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002f0:	f000 f8d4 	bl	800049c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2302      	movs	r3, #2
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2102      	movs	r1, #2
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fefc 	bl	800210c <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800031a:	f000 f8bf 	bl	800049c <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3740      	adds	r7, #64	; 0x40
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_SPI1_Init+0x68>)
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_SPI1_Init+0x6c>)
 8000330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_SPI1_Init+0x68>)
 8000334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_SPI1_Init+0x68>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;  // Corrected data size
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <MX_SPI1_Init+0x68>)
 8000342:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000346:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_SPI1_Init+0x68>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_SPI1_Init+0x68>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <MX_SPI1_Init+0x68>)
 8000356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800035a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <MX_SPI1_Init+0x68>)
 800035e:	2210      	movs	r2, #16
 8000360:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <MX_SPI1_Init+0x68>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_SPI1_Init+0x68>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <MX_SPI1_Init+0x68>)
 8000370:	2200      	movs	r2, #0
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <MX_SPI1_Init+0x68>)
 8000376:	2207      	movs	r2, #7
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_SPI1_Init+0x68>)
 800037c:	f002 f8ac 	bl	80024d8 <HAL_SPI_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000386:	f000 f889 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000030 	.word	0x20000030
 8000394:	40013000 	.word	0x40013000

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08a      	sub	sp, #40	; 0x28
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0314 	add.w	r3, r7, #20
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ae:	4b38      	ldr	r3, [pc, #224]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a37      	ldr	r2, [pc, #220]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b35      	ldr	r3, [pc, #212]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c6:	4b32      	ldr	r3, [pc, #200]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a31      	ldr	r2, [pc, #196]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b2c      	ldr	r3, [pc, #176]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a2b      	ldr	r2, [pc, #172]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b29      	ldr	r3, [pc, #164]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a25      	ldr	r2, [pc, #148]	; (8000490 <MX_GPIO_Init+0xf8>)
 80003fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b23      	ldr	r3, [pc, #140]	; (8000490 <MX_GPIO_Init+0xf8>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	481f      	ldr	r0, [pc, #124]	; (8000494 <MX_GPIO_Init+0xfc>)
 8000416:	f000 fe09 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2110      	movs	r1, #16
 800041e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000422:	f000 fe03 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2101      	movs	r1, #1
 800042a:	481b      	ldr	r0, [pc, #108]	; (8000498 <MX_GPIO_Init+0x100>)
 800042c:	f000 fdfe 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	4619      	mov	r1, r3
 8000448:	4812      	ldr	r0, [pc, #72]	; (8000494 <MX_GPIO_Init+0xfc>)
 800044a:	f000 fc75 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800044e:	2310      	movs	r3, #16
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2300      	movs	r3, #0
 800045c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	4619      	mov	r1, r3
 8000464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000468:	f000 fc66 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000470:	2301      	movs	r3, #1
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	2300      	movs	r3, #0
 800047a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	4619      	mov	r1, r3
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_GPIO_Init+0x100>)
 8000484:	f000 fc58 	bl	8000d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000488:	bf00      	nop
 800048a:	3728      	adds	r7, #40	; 0x28
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	48000800 	.word	0x48000800
 8000498:	48000400 	.word	0x48000400

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80004b2:	f107 020f 	add.w	r2, r7, #15
 80004b6:	1df9      	adds	r1, r7, #7
 80004b8:	2364      	movs	r3, #100	; 0x64
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2301      	movs	r3, #1
 80004be:	4804      	ldr	r0, [pc, #16]	; (80004d0 <RC522_SPI_Transfer+0x28>)
 80004c0:	f002 f8b5 	bl	800262e <HAL_SPI_TransmitReceive>

	return rx_data;
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000030 	.word	0x20000030

080004d4 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	4613      	mov	r3, r2
 80004e2:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2110      	movs	r1, #16
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ec:	f000 fd9e 	bl	800102c <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ffd3 	bl	80004a8 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ffcf 	bl	80004a8 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2110      	movs	r1, #16
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f000 fd8b 	bl	800102c <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b084      	sub	sp, #16
 8000522:	af00      	add	r7, sp, #0
 8000524:	4603      	mov	r3, r0
 8000526:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2110      	movs	r1, #16
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f000 fd7c 	bl	800102c <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	b25b      	sxtb	r3, r3
 800053a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800053e:	b25b      	sxtb	r3, r3
 8000540:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000544:	b25b      	sxtb	r3, r3
 8000546:	b2db      	uxtb	r3, r3
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffad 	bl	80004a8 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff ffaa 	bl	80004a8 <RC522_SPI_Transfer>
 8000554:	4603      	mov	r3, r0
 8000556:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2110      	movs	r1, #16
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f000 fd64 	bl	800102c <HAL_GPIO_WritePin>

	return val;
 8000564:	7bfb      	ldrb	r3, [r7, #15]

}
 8000566:	4618      	mov	r0, r3
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	460a      	mov	r2, r1
 8000578:	71fb      	strb	r3, [r7, #7]
 800057a:	4613      	mov	r3, r2
 800057c:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ffcc 	bl	800051e <Read_MFRC522>
 8000586:	4603      	mov	r3, r0
 8000588:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	4313      	orrs	r3, r2
 8000590:	b2da      	uxtb	r2, r3
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff9c 	bl	80004d4 <Write_MFRC522>
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ffb1 	bl	800051e <Read_MFRC522>
 80005bc:	4603      	mov	r3, r0
 80005be:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80005c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005c4:	43db      	mvns	r3, r3
 80005c6:	b25a      	sxtb	r2, r3
 80005c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005cc:	4013      	ands	r3, r2
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4611      	mov	r1, r2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff7c 	bl	80004d4 <Write_MFRC522>
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80005e8:	2014      	movs	r0, #20
 80005ea:	f7ff ff98 	bl	800051e <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80005ee:	2103      	movs	r1, #3
 80005f0:	2014      	movs	r0, #20
 80005f2:	f7ff ffbc 	bl	800056e <SetBitMask>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}

080005fa <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80005fe:	210f      	movs	r1, #15
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ff67 	bl	80004d4 <Write_MFRC522>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2110      	movs	r1, #16
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f000 fd08 	bl	800102c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2101      	movs	r1, #1
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <MFRC522_Init+0x58>)
 8000622:	f000 fd03 	bl	800102c <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000626:	f7ff ffe8 	bl	80005fa <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800062a:	218d      	movs	r1, #141	; 0x8d
 800062c:	202a      	movs	r0, #42	; 0x2a
 800062e:	f7ff ff51 	bl	80004d4 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000632:	213e      	movs	r1, #62	; 0x3e
 8000634:	202b      	movs	r0, #43	; 0x2b
 8000636:	f7ff ff4d 	bl	80004d4 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 800063a:	211e      	movs	r1, #30
 800063c:	202d      	movs	r0, #45	; 0x2d
 800063e:	f7ff ff49 	bl	80004d4 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000642:	2100      	movs	r1, #0
 8000644:	202c      	movs	r0, #44	; 0x2c
 8000646:	f7ff ff45 	bl	80004d4 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	2015      	movs	r0, #21
 800064e:	f7ff ff41 	bl	80004d4 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000652:	213d      	movs	r1, #61	; 0x3d
 8000654:	2011      	movs	r0, #17
 8000656:	f7ff ff3d 	bl	80004d4 <Write_MFRC522>

	AntennaOn();
 800065a:	f7ff ffc3 	bl	80005e4 <AntennaOn>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	48000400 	.word	0x48000400

08000668 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4603      	mov	r3, r0
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	4613      	mov	r3, r2
 8000678:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800067a:	2302      	movs	r3, #2
 800067c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800067e:	2300      	movs	r3, #0
 8000680:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000682:	2300      	movs	r3, #0
 8000684:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	2b0c      	cmp	r3, #12
 800068a:	d006      	beq.n	800069a <MFRC522_ToCard+0x32>
 800068c:	2b0e      	cmp	r3, #14
 800068e:	d109      	bne.n	80006a4 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000690:	2312      	movs	r3, #18
 8000692:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000694:	2310      	movs	r3, #16
 8000696:	777b      	strb	r3, [r7, #29]
			break;
 8000698:	e005      	b.n	80006a6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800069a:	2377      	movs	r3, #119	; 0x77
 800069c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800069e:	2330      	movs	r3, #48	; 0x30
 80006a0:	777b      	strb	r3, [r7, #29]
			break;
 80006a2:	e000      	b.n	80006a6 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80006a4:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80006a6:	7fbb      	ldrb	r3, [r7, #30]
 80006a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	2002      	movs	r0, #2
 80006b2:	f7ff ff0f 	bl	80004d4 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	2004      	movs	r0, #4
 80006ba:	f7ff ff73 	bl	80005a4 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	200a      	movs	r0, #10
 80006c2:	f7ff ff54 	bl	800056e <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80006c6:	2100      	movs	r1, #0
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff ff03 	bl	80004d4 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
 80006d2:	e00a      	b.n	80006ea <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	2009      	movs	r0, #9
 80006e0:	f7ff fef8 	bl	80004d4 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	3301      	adds	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	7bbb      	ldrb	r3, [r7, #14]
 80006ec:	69ba      	ldr	r2, [r7, #24]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d3f0      	bcc.n	80006d4 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	4619      	mov	r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff feec 	bl	80004d4 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	2b0c      	cmp	r3, #12
 8000700:	d103      	bne.n	800070a <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	200d      	movs	r0, #13
 8000706:	f7ff ff32 	bl	800056e <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800070a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800070e:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000710:	2004      	movs	r0, #4
 8000712:	f7ff ff04 	bl	800051e <Read_MFRC522>
 8000716:	4603      	mov	r3, r0
 8000718:	773b      	strb	r3, [r7, #28]
        i--;
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	3b01      	subs	r3, #1
 800071e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00a      	beq.n	800073c <MFRC522_ToCard+0xd4>
 8000726:	7f3b      	ldrb	r3, [r7, #28]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b00      	cmp	r3, #0
 800072e:	d105      	bne.n	800073c <MFRC522_ToCard+0xd4>
 8000730:	7f3a      	ldrb	r2, [r7, #28]
 8000732:	7f7b      	ldrb	r3, [r7, #29]
 8000734:	4013      	ands	r3, r2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0e9      	beq.n	8000710 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	200d      	movs	r0, #13
 8000740:	f7ff ff30 	bl	80005a4 <ClearBitMask>

    if (i != 0)
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d052      	beq.n	80007f0 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800074a:	2006      	movs	r0, #6
 800074c:	f7ff fee7 	bl	800051e <Read_MFRC522>
 8000750:	4603      	mov	r3, r0
 8000752:	f003 031b 	and.w	r3, r3, #27
 8000756:	2b00      	cmp	r3, #0
 8000758:	d148      	bne.n	80007ec <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800075e:	7f3a      	ldrb	r2, [r7, #28]
 8000760:	7fbb      	ldrb	r3, [r7, #30]
 8000762:	4013      	ands	r3, r2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 800076e:	2301      	movs	r3, #1
 8000770:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b0c      	cmp	r3, #12
 8000776:	d13b      	bne.n	80007f0 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff fed0 	bl	800051e <Read_MFRC522>
 800077e:	4603      	mov	r3, r0
 8000780:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000782:	200c      	movs	r0, #12
 8000784:	f7ff fecb 	bl	800051e <Read_MFRC522>
 8000788:	4603      	mov	r3, r0
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d008      	beq.n	80007a8 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8000796:	7f3b      	ldrb	r3, [r7, #28]
 8000798:	3b01      	subs	r3, #1
 800079a:	00da      	lsls	r2, r3, #3
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	4413      	add	r3, r2
 80007a0:	461a      	mov	r2, r3
 80007a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	e004      	b.n	80007b2 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80007a8:	7f3b      	ldrb	r3, [r7, #28]
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	461a      	mov	r2, r3
 80007ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b0:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80007b2:	7f3b      	ldrb	r3, [r7, #28]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d101      	bne.n	80007bc <MFRC522_ToCard+0x154>
                {
					n = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80007bc:	7f3b      	ldrb	r3, [r7, #28]
 80007be:	2b10      	cmp	r3, #16
 80007c0:	d901      	bls.n	80007c6 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80007c2:	2310      	movs	r3, #16
 80007c4:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	e00a      	b.n	80007e2 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	18d4      	adds	r4, r2, r3
 80007d2:	2009      	movs	r0, #9
 80007d4:	f7ff fea3 	bl	800051e <Read_MFRC522>
 80007d8:	4603      	mov	r3, r0
 80007da:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	3301      	adds	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	7f3b      	ldrb	r3, [r7, #28]
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d3f0      	bcc.n	80007cc <MFRC522_ToCard+0x164>
 80007ea:	e001      	b.n	80007f0 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80007ec:	2302      	movs	r3, #2
 80007ee:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80007f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3724      	adds	r7, #36	; 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd90      	pop	{r4, r7, pc}

080007fa <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af02      	add	r7, sp, #8
 8000800:	4603      	mov	r3, r0
 8000802:	6039      	str	r1, [r7, #0]
 8000804:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000806:	2107      	movs	r1, #7
 8000808:	200d      	movs	r0, #13
 800080a:	f7ff fe63 	bl	80004d4 <Write_MFRC522>

	TagType[0] = reqMode;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2201      	movs	r2, #1
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	200c      	movs	r0, #12
 8000822:	f7ff ff21 	bl	8000668 <MFRC522_ToCard>
 8000826:	4603      	mov	r3, r0
 8000828:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <MFRC522_Request+0x3c>
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b10      	cmp	r3, #16
 8000834:	d001      	beq.n	800083a <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000836:	2302      	movs	r3, #2
 8000838:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af02      	add	r7, sp, #8
 800084a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800084c:	2300      	movs	r3, #0
 800084e:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000850:	2100      	movs	r1, #0
 8000852:	200d      	movs	r0, #13
 8000854:	f7ff fe3e 	bl	80004d4 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2293      	movs	r2, #147	; 0x93
 800085c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3301      	adds	r3, #1
 8000862:	2220      	movs	r2, #32
 8000864:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2202      	movs	r2, #2
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	200c      	movs	r0, #12
 8000874:	f7ff fef8 	bl	8000668 <MFRC522_ToCard>
 8000878:	4603      	mov	r3, r0
 800087a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d118      	bne.n	80008b4 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000882:	2300      	movs	r3, #0
 8000884:	73bb      	strb	r3, [r7, #14]
 8000886:	e009      	b.n	800089c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000888:	7bbb      	ldrb	r3, [r7, #14]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	7b7b      	ldrb	r3, [r7, #13]
 8000892:	4053      	eors	r3, r2
 8000894:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000896:	7bbb      	ldrb	r3, [r7, #14]
 8000898:	3301      	adds	r3, #1
 800089a:	73bb      	strb	r3, [r7, #14]
 800089c:	7bbb      	ldrb	r3, [r7, #14]
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d9f2      	bls.n	8000888 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80008a2:	7bbb      	ldrb	r3, [r7, #14]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	7b7a      	ldrb	r2, [r7, #13]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d001      	beq.n	80008b4 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80008b0:	2302      	movs	r3, #2
 80008b2:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x44>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_MspInit+0x44>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_MspInit+0x44>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x44>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x44>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x44>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_SPI_MspInit+0x7c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d128      	bne.n	800097c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_SPI_MspInit+0x80>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a16      	ldr	r2, [pc, #88]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6153      	str	r3, [r2, #20]
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800095a:	23e0      	movs	r3, #224	; 0xe0
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800096a:	2305      	movs	r3, #5
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f000 f9de 	bl	8000d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40013000 	.word	0x40013000
 8000988:	40021000 	.word	0x40021000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d8:	f000 f884 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a08:	f7ff ffea 	bl	80009e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 f99b 	bl	8002d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a36:	f7ff fbc7 	bl	80001c8 <main>

08000a3a <LoopForever>:

LoopForever:
    b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a3c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a48:	08002e04 	.word	0x08002e04
  ldr r2, =_sbss
 8000a4c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a50:	200000ac 	.word	0x200000ac

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_Init+0x28>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_Init+0x28>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f931 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f000 f808 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a74:	f7ff ff24 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x54>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x58>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f93b 	bl	8000d1e <HAL_SYSTICK_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00e      	b.n	8000ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d80a      	bhi.n	8000ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f000 f911 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <HAL_InitTick+0x5c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000010 	.word	0x20000010
 8000ae0:	2000000c 	.word	0x2000000c

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x20>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x24>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_IncTick+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000010 	.word	0x20000010
 8000b08:	200000a8 	.word	0x200000a8

08000b0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200000a8 	.word	0x200000a8

08000b24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffde 	bl	8000b0c <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000010 	.word	0x20000010

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff47 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff5c 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffb0 	bl	8000c8c <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	e154      	b.n	8000ff2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 8146 	beq.w	8000fec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d005      	beq.n	8000d78 <HAL_GPIO_Init+0x40>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d017      	beq.n	8000e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d123      	bne.n	8000e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	6939      	ldr	r1, [r7, #16]
 8000e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0203 	and.w	r2, r3, #3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80a0 	beq.w	8000fec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b58      	ldr	r3, [pc, #352]	; (8001010 <HAL_GPIO_Init+0x2d8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a57      	ldr	r2, [pc, #348]	; (8001010 <HAL_GPIO_Init+0x2d8>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b55      	ldr	r3, [pc, #340]	; (8001010 <HAL_GPIO_Init+0x2d8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec4:	4a53      	ldr	r2, [pc, #332]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eee:	d019      	beq.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a49      	ldr	r2, [pc, #292]	; (8001018 <HAL_GPIO_Init+0x2e0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d013      	beq.n	8000f20 <HAL_GPIO_Init+0x1e8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a48      	ldr	r2, [pc, #288]	; (800101c <HAL_GPIO_Init+0x2e4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00d      	beq.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a47      	ldr	r2, [pc, #284]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x1e0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a46      	ldr	r2, [pc, #280]	; (8001024 <HAL_GPIO_Init+0x2ec>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d101      	bne.n	8000f14 <HAL_GPIO_Init+0x1dc>
 8000f10:	2304      	movs	r3, #4
 8000f12:	e008      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f14:	2305      	movs	r3, #5
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e004      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f24:	2300      	movs	r3, #0
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f36:	4937      	ldr	r1, [pc, #220]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f92:	4a25      	ldr	r2, [pc, #148]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fbc:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_GPIO_Init+0x2f0>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f47f aea3 	bne.w	8000d48 <HAL_GPIO_Init+0x10>
  }
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000
 8001014:	40010000 	.word	0x40010000
 8001018:	48000400 	.word	0x48000400
 800101c:	48000800 	.word	0x48000800
 8001020:	48000c00 	.word	0x48000c00
 8001024:	48001000 	.word	0x48001000
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001048:	e002      	b.n	8001050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4013      	ands	r3, r2
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43d9      	mvns	r1, r3
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	400b      	ands	r3, r1
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001096:	af00      	add	r7, sp, #0
 8001098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f001 b823 	b.w	80020fc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 817d 	beq.w	80013c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010cc:	4bbc      	ldr	r3, [pc, #752]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d00c      	beq.n	80010f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d8:	4bb9      	ldr	r3, [pc, #740]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d15c      	bne.n	800119e <HAL_RCC_OscConfig+0x10e>
 80010e4:	4bb6      	ldr	r3, [pc, #728]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f0:	d155      	bne.n	800119e <HAL_RCC_OscConfig+0x10e>
 80010f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001106:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110a:	fab3 f383 	clz	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	095b      	lsrs	r3, r3, #5
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d102      	bne.n	8001124 <HAL_RCC_OscConfig+0x94>
 800111e:	4ba8      	ldr	r3, [pc, #672]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	e015      	b.n	8001150 <HAL_RCC_OscConfig+0xc0>
 8001124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001128:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001140:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800114c:	4b9c      	ldr	r3, [pc, #624]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001154:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001158:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800115c:	fa92 f2a2 	rbit	r2, r2
 8001160:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001164:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001168:	fab2 f282 	clz	r2, r2
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	f042 0220 	orr.w	r2, r2, #32
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	f002 021f 	and.w	r2, r2, #31
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 811f 	beq.w	80013c4 <HAL_RCC_OscConfig+0x334>
 8001186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f040 8116 	bne.w	80013c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	f000 bfaf 	b.w	80020fc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x12e>
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a82      	ldr	r2, [pc, #520]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80011b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e036      	b.n	800122c <HAL_RCC_OscConfig+0x19c>
 80011be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x158>
 80011ce:	4b7c      	ldr	r3, [pc, #496]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a7b      	ldr	r2, [pc, #492]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80011d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a78      	ldr	r2, [pc, #480]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80011e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e021      	b.n	800122c <HAL_RCC_OscConfig+0x19c>
 80011e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x184>
 80011fa:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a70      	ldr	r2, [pc, #448]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a6d      	ldr	r2, [pc, #436]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e00b      	b.n	800122c <HAL_RCC_OscConfig+0x19c>
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a69      	ldr	r2, [pc, #420]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a66      	ldr	r2, [pc, #408]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800122c:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	f023 020f 	bic.w	r2, r3, #15
 8001234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	495f      	ldr	r1, [pc, #380]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 8001242:	4313      	orrs	r3, r2
 8001244:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d059      	beq.n	800130a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff fc59 	bl	8000b0c <HAL_GetTick>
 800125a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e00a      	b.n	8001276 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fc54 	bl	8000b0c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d902      	bls.n	8001276 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	f000 bf43 	b.w	80020fc <HAL_RCC_OscConfig+0x106c>
 8001276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800128a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	fab3 f383 	clz	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	095b      	lsrs	r3, r3, #5
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d102      	bne.n	80012a8 <HAL_RCC_OscConfig+0x218>
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	e015      	b.n	80012d4 <HAL_RCC_OscConfig+0x244>
 80012a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012d8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012e0:	fa92 f2a2 	rbit	r2, r2
 80012e4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80012e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80012ec:	fab2 f282 	clz	r2, r2
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	f042 0220 	orr.w	r2, r2, #32
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	f002 021f 	and.w	r2, r2, #31
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0ab      	beq.n	8001260 <HAL_RCC_OscConfig+0x1d0>
 8001308:	e05d      	b.n	80013c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fbff 	bl	8000b0c <HAL_GetTick>
 800130e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	e00a      	b.n	800132a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fbfa 	bl	8000b0c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b64      	cmp	r3, #100	; 0x64
 8001322:	d902      	bls.n	800132a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	f000 bee9 	b.w	80020fc <HAL_RCC_OscConfig+0x106c>
 800132a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800133e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	095b      	lsrs	r3, r3, #5
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d102      	bne.n	800135c <HAL_RCC_OscConfig+0x2cc>
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	e015      	b.n	8001388 <HAL_RCC_OscConfig+0x2f8>
 800135c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001360:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001374:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001378:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_RCC_OscConfig+0x330>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800138c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001390:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001394:	fa92 f2a2 	rbit	r2, r2
 8001398:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800139c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013a0:	fab2 f282 	clz	r2, r2
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	f042 0220 	orr.w	r2, r2, #32
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	f002 021f 	and.w	r2, r2, #31
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1ab      	bne.n	8001314 <HAL_RCC_OscConfig+0x284>
 80013bc:	e003      	b.n	80013c6 <HAL_RCC_OscConfig+0x336>
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 817d 	beq.w	80016d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013dc:	4ba6      	ldr	r3, [pc, #664]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013e8:	4ba3      	ldr	r3, [pc, #652]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d172      	bne.n	80014da <HAL_RCC_OscConfig+0x44a>
 80013f4:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d16c      	bne.n	80014da <HAL_RCC_OscConfig+0x44a>
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001412:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	095b      	lsrs	r3, r3, #5
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0x3a0>
 800142a:	4b93      	ldr	r3, [pc, #588]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	e013      	b.n	8001458 <HAL_RCC_OscConfig+0x3c8>
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001442:	2302      	movs	r3, #2
 8001444:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001448:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001454:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	2202      	movs	r2, #2
 800145a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800145e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001462:	fa92 f2a2 	rbit	r2, r2
 8001466:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800146a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800146e:	fab2 f282 	clz	r2, r2
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	f042 0220 	orr.w	r2, r2, #32
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f002 021f 	and.w	r2, r2, #31
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00a      	beq.n	80014a0 <HAL_RCC_OscConfig+0x410>
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d002      	beq.n	80014a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f000 be2e 	b.w	80020fc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b75      	ldr	r3, [pc, #468]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	21f8      	movs	r1, #248	; 0xf8
 80014b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014be:	fa91 f1a1 	rbit	r1, r1
 80014c2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014ca:	fab1 f181 	clz	r1, r1
 80014ce:	b2c9      	uxtb	r1, r1
 80014d0:	408b      	lsls	r3, r1
 80014d2:	4969      	ldr	r1, [pc, #420]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d8:	e0fd      	b.n	80016d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8088 	beq.w	80015fc <HAL_RCC_OscConfig+0x56c>
 80014ec:	2301      	movs	r3, #1
 80014ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80014fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800150c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	2301      	movs	r3, #1
 8001516:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff faf8 	bl	8000b0c <HAL_GetTick>
 800151c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff faf3 	bl	8000b0c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d902      	bls.n	8001538 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	f000 bde2 	b.w	80020fc <HAL_RCC_OscConfig+0x106c>
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800154a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	095b      	lsrs	r3, r3, #5
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d102      	bne.n	8001568 <HAL_RCC_OscConfig+0x4d8>
 8001562:	4b45      	ldr	r3, [pc, #276]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	e013      	b.n	8001590 <HAL_RCC_OscConfig+0x500>
 8001568:	2302      	movs	r3, #2
 800156a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001580:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800158c:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	2202      	movs	r2, #2
 8001592:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001596:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800159a:	fa92 f2a2 	rbit	r2, r2
 800159e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015a6:	fab2 f282 	clz	r2, r2
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	f042 0220 	orr.w	r2, r2, #32
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	f002 021f 	and.w	r2, r2, #31
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0af      	beq.n	8001522 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	21f8      	movs	r1, #248	; 0xf8
 80015d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015e0:	fa91 f1a1 	rbit	r1, r1
 80015e4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80015e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80015ec:	fab1 f181 	clz	r1, r1
 80015f0:	b2c9      	uxtb	r1, r1
 80015f2:	408b      	lsls	r3, r1
 80015f4:	4920      	ldr	r1, [pc, #128]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
 80015fa:	e06c      	b.n	80016d6 <HAL_RCC_OscConfig+0x646>
 80015fc:	2301      	movs	r3, #1
 80015fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800160e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	fab3 f383 	clz	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800161c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	461a      	mov	r2, r3
 8001624:	2300      	movs	r3, #0
 8001626:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fa70 	bl	8000b0c <HAL_GetTick>
 800162c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fa6b 	bl	8000b0c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d902      	bls.n	8001648 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	f000 bd5a 	b.w	80020fc <HAL_RCC_OscConfig+0x106c>
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800165a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d104      	bne.n	800167c <HAL_RCC_OscConfig+0x5ec>
 8001672:	4b01      	ldr	r3, [pc, #4]	; (8001678 <HAL_RCC_OscConfig+0x5e8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	e015      	b.n	80016a4 <HAL_RCC_OscConfig+0x614>
 8001678:	40021000 	.word	0x40021000
 800167c:	2302      	movs	r3, #2
 800167e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001686:	fa93 f3a3 	rbit	r3, r3
 800168a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001694:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016a0:	4bc8      	ldr	r3, [pc, #800]	; (80019c4 <HAL_RCC_OscConfig+0x934>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	2202      	movs	r2, #2
 80016a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016ae:	fa92 f2a2 	rbit	r2, r2
 80016b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016ba:	fab2 f282 	clz	r2, r2
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	f042 0220 	orr.w	r2, r2, #32
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	f002 021f 	and.w	r2, r2, #31
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ad      	bne.n	8001632 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8110 	beq.w	800190c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d079      	beq.n	80017f0 <HAL_RCC_OscConfig+0x760>
 80016fc:	2301      	movs	r3, #1
 80016fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800170e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	4bab      	ldr	r3, [pc, #684]	; (80019c8 <HAL_RCC_OscConfig+0x938>)
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	461a      	mov	r2, r3
 8001722:	2301      	movs	r3, #1
 8001724:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff f9f1 	bl	8000b0c <HAL_GetTick>
 800172a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff f9ec 	bl	8000b0c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d902      	bls.n	8001746 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	f000 bcdb 	b.w	80020fc <HAL_RCC_OscConfig+0x106c>
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001760:	2202      	movs	r2, #2
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001784:	2202      	movs	r2, #2
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f2a3 	rbit	r2, r3
 8001796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800179e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a0:	4b88      	ldr	r3, [pc, #544]	; (80019c4 <HAL_RCC_OscConfig+0x934>)
 80017a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017ac:	2102      	movs	r1, #2
 80017ae:	6019      	str	r1, [r3, #0]
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f1a3 	rbit	r1, r3
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017c6:	6019      	str	r1, [r3, #0]
  return result;
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	2101      	movs	r1, #1
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0a0      	beq.n	8001730 <HAL_RCC_OscConfig+0x6a0>
 80017ee:	e08d      	b.n	800190c <HAL_RCC_OscConfig+0x87c>
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001800:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001812:	601a      	str	r2, [r3, #0]
  return result;
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800181c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <HAL_RCC_OscConfig+0x938>)
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	461a      	mov	r2, r3
 800182e:	2300      	movs	r3, #0
 8001830:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff f96b 	bl	8000b0c <HAL_GetTick>
 8001836:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff f966 	bl	8000b0c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d902      	bls.n	8001852 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	f000 bc55 	b.w	80020fc <HAL_RCC_OscConfig+0x106c>
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800185a:	2202      	movs	r2, #2
 800185c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCC_OscConfig+0x934>)
 80018c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018ca:	2102      	movs	r1, #2
 80018cc:	6019      	str	r1, [r3, #0]
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f1a3 	rbit	r1, r3
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018e4:	6019      	str	r1, [r3, #0]
  return result;
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d197      	bne.n	800183c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 81a1 	beq.w	8001c64 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001928:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_RCC_OscConfig+0x934>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d116      	bne.n	8001962 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_RCC_OscConfig+0x934>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <HAL_RCC_OscConfig+0x934>)
 800193a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193e:	61d3      	str	r3, [r2, #28]
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_OscConfig+0x934>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800195a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800195c:	2301      	movs	r3, #1
 800195e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <HAL_RCC_OscConfig+0x93c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d11a      	bne.n	80019a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_RCC_OscConfig+0x93c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a16      	ldr	r2, [pc, #88]	; (80019cc <HAL_RCC_OscConfig+0x93c>)
 8001974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001978:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197a:	f7ff f8c7 	bl	8000b0c <HAL_GetTick>
 800197e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	e009      	b.n	8001998 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001984:	f7ff f8c2 	bl	8000b0c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b64      	cmp	r3, #100	; 0x64
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e3b1      	b.n	80020fc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_RCC_OscConfig+0x93c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d10d      	bne.n	80019d0 <HAL_RCC_OscConfig+0x940>
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_OscConfig+0x934>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a02      	ldr	r2, [pc, #8]	; (80019c4 <HAL_RCC_OscConfig+0x934>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e03c      	b.n	8001a3c <HAL_RCC_OscConfig+0x9ac>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	10908120 	.word	0x10908120
 80019cc:	40007000 	.word	0x40007000
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10c      	bne.n	80019fa <HAL_RCC_OscConfig+0x96a>
 80019e0:	4bc1      	ldr	r3, [pc, #772]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4ac0      	ldr	r2, [pc, #768]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	4bbe      	ldr	r3, [pc, #760]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4abd      	ldr	r2, [pc, #756]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 80019f2:	f023 0304 	bic.w	r3, r3, #4
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	e020      	b.n	8001a3c <HAL_RCC_OscConfig+0x9ac>
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x994>
 8001a0a:	4bb7      	ldr	r3, [pc, #732]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4ab6      	ldr	r2, [pc, #728]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	4bb4      	ldr	r3, [pc, #720]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4ab3      	ldr	r2, [pc, #716]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0x9ac>
 8001a24:	4bb0      	ldr	r3, [pc, #704]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4aaf      	ldr	r2, [pc, #700]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	4bad      	ldr	r3, [pc, #692]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4aac      	ldr	r2, [pc, #688]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001a36:	f023 0304 	bic.w	r3, r3, #4
 8001a3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8081 	beq.w	8001b50 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff f85d 	bl	8000b0c <HAL_GetTick>
 8001a52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff f858 	bl	8000b0c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e345      	b.n	80020fc <HAL_RCC_OscConfig+0x106c>
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a78:	2202      	movs	r2, #2
 8001a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ab6:	601a      	str	r2, [r3, #0]
  return result;
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ac0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_OscConfig+0xa4c>
 8001ad6:	4b84      	ldr	r3, [pc, #528]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	e013      	b.n	8001b04 <HAL_RCC_OscConfig+0xa74>
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f2a3 	rbit	r2, r3
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b08:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	6011      	str	r1, [r2, #0]
 8001b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b14:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	fa92 f1a2 	rbit	r1, r2
 8001b1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b26:	6011      	str	r1, [r2, #0]
  return result;
 8001b28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b2c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	fab2 f282 	clz	r2, r2
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f002 021f 	and.w	r2, r2, #31
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f202 	lsl.w	r2, r1, r2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d084      	beq.n	8001a58 <HAL_RCC_OscConfig+0x9c8>
 8001b4e:	e07f      	b.n	8001c50 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7fe ffdc 	bl	8000b0c <HAL_GetTick>
 8001b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b58:	e00b      	b.n	8001b72 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7fe ffd7 	bl	8000b0c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e2c4      	b.n	80020fc <HAL_RCC_OscConfig+0x106c>
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fa93 f2a3 	rbit	r2, r3
 8001bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bb8:	601a      	str	r2, [r3, #0]
  return result;
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bc2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d102      	bne.n	8001bde <HAL_RCC_OscConfig+0xb4e>
 8001bd8:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	e013      	b.n	8001c06 <HAL_RCC_OscConfig+0xb76>
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001be6:	2202      	movs	r2, #2
 8001be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	fa93 f2a3 	rbit	r2, r3
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	4b39      	ldr	r3, [pc, #228]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c0e:	2102      	movs	r1, #2
 8001c10:	6011      	str	r1, [r2, #0]
 8001c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c16:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	fa92 f1a2 	rbit	r1, r2
 8001c20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c24:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c28:	6011      	str	r1, [r2, #0]
  return result;
 8001c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c2e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	fab2 f282 	clz	r2, r2
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f002 021f 	and.w	r2, r2, #31
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d184      	bne.n	8001b5a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c50:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	4a22      	ldr	r2, [pc, #136]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8242 	beq.w	80020fa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_RCC_OscConfig+0xc58>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	f000 8213 	beq.w	80020aa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	f040 8162 	bne.w	8001f5a <HAL_RCC_OscConfig+0xeca>
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cba:	601a      	str	r2, [r3, #0]
  return result;
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cc4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ff16 	bl	8000b0c <HAL_GetTick>
 8001ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce4:	e00c      	b.n	8001d00 <HAL_RCC_OscConfig+0xc70>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe ff0e 	bl	8000b0c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1fd      	b.n	80020fc <HAL_RCC_OscConfig+0x106c>
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d24:	601a      	str	r2, [r3, #0]
  return result;
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d102      	bne.n	8001d4a <HAL_RCC_OscConfig+0xcba>
 8001d44:	4bb0      	ldr	r3, [pc, #704]	; (8002008 <HAL_RCC_OscConfig+0xf78>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	e027      	b.n	8001d9a <HAL_RCC_OscConfig+0xd0a>
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d74:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	4b9c      	ldr	r3, [pc, #624]	; (8002008 <HAL_RCC_OscConfig+0xf78>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d9e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001da2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001da6:	6011      	str	r1, [r2, #0]
 8001da8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	fa92 f1a2 	rbit	r1, r2
 8001db6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001dbe:	6011      	str	r1, [r2, #0]
  return result;
 8001dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	fab2 f282 	clz	r2, r2
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f042 0220 	orr.w	r2, r2, #32
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f002 021f 	and.w	r2, r2, #31
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d182      	bne.n	8001cec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de6:	4b88      	ldr	r3, [pc, #544]	; (8002008 <HAL_RCC_OscConfig+0xf78>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	430b      	orrs	r3, r1
 8001e08:	497f      	ldr	r1, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0xf78>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e32:	601a      	str	r2, [r3, #0]
  return result;
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e3c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2301      	movs	r3, #1
 8001e52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7fe fe5a 	bl	8000b0c <HAL_GetTick>
 8001e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5c:	e009      	b.n	8001e72 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7fe fe55 	bl	8000b0c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e144      	b.n	80020fc <HAL_RCC_OscConfig+0x106c>
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fa93 f2a3 	rbit	r2, r3
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e96:	601a      	str	r2, [r3, #0]
  return result;
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ea0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0xe2c>
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_RCC_OscConfig+0xf78>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e027      	b.n	8001f0c <HAL_RCC_OscConfig+0xe7c>
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	fa93 f2a3 	rbit	r2, r3
 8001efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_OscConfig+0xf78>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f10:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f18:	6011      	str	r1, [r2, #0]
 8001f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f1e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	fa92 f1a2 	rbit	r1, r2
 8001f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f2c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f30:	6011      	str	r1, [r2, #0]
  return result;
 8001f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f36:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f042 0220 	orr.w	r2, r2, #32
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	f002 021f 	and.w	r2, r2, #31
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d082      	beq.n	8001e5e <HAL_RCC_OscConfig+0xdce>
 8001f58:	e0cf      	b.n	80020fa <HAL_RCC_OscConfig+0x106a>
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fa93 f2a3 	rbit	r2, r3
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f7e:	601a      	str	r2, [r3, #0]
  return result;
 8001f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f84:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fdb4 	bl	8000b0c <HAL_GetTick>
 8001fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	e009      	b.n	8001fbe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe fdaf 	bl	8000b0c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e09e      	b.n	80020fc <HAL_RCC_OscConfig+0x106c>
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fa93 f2a3 	rbit	r2, r3
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fe2:	601a      	str	r2, [r3, #0]
  return result;
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d104      	bne.n	800200c <HAL_RCC_OscConfig+0xf7c>
 8002002:	4b01      	ldr	r3, [pc, #4]	; (8002008 <HAL_RCC_OscConfig+0xf78>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e029      	b.n	800205c <HAL_RCC_OscConfig+0xfcc>
 8002008:	40021000 	.word	0x40021000
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	fa93 f2a3 	rbit	r2, r3
 8002028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800203a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	fa93 f2a3 	rbit	r2, r3
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCC_OscConfig+0x1078>)
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002060:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002064:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002068:	6011      	str	r1, [r2, #0]
 800206a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800206e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	fa92 f1a2 	rbit	r1, r2
 8002078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800207c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002080:	6011      	str	r1, [r2, #0]
  return result;
 8002082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002086:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d180      	bne.n	8001faa <HAL_RCC_OscConfig+0xf1a>
 80020a8:	e027      	b.n	80020fa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e01e      	b.n	80020fc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_OscConfig+0x1078>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b09e      	sub	sp, #120	; 0x78
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e162      	b.n	80023ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b90      	ldr	r3, [pc, #576]	; (8002368 <HAL_RCC_ClockConfig+0x25c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d910      	bls.n	8002154 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b8d      	ldr	r3, [pc, #564]	; (8002368 <HAL_RCC_ClockConfig+0x25c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	498b      	ldr	r1, [pc, #556]	; (8002368 <HAL_RCC_ClockConfig+0x25c>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b89      	ldr	r3, [pc, #548]	; (8002368 <HAL_RCC_ClockConfig+0x25c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e14a      	b.n	80023ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002160:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	497f      	ldr	r1, [pc, #508]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80dc 	beq.w	8002338 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d13c      	bne.n	8002202 <HAL_RCC_ClockConfig+0xf6>
 8002188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xa6>
 80021ac:	4b6f      	ldr	r3, [pc, #444]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	e00f      	b.n	80021d2 <HAL_RCC_ClockConfig+0xc6>
 80021b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	667b      	str	r3, [r7, #100]	; 0x64
 80021c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c4:	663b      	str	r3, [r7, #96]	; 0x60
 80021c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021ce:	4b67      	ldr	r3, [pc, #412]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80021d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021da:	fa92 f2a2 	rbit	r2, r2
 80021de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021e2:	fab2 f282 	clz	r2, r2
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	f042 0220 	orr.w	r2, r2, #32
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f002 021f 	and.w	r2, r2, #31
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d17b      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0f3      	b.n	80023ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d13c      	bne.n	8002284 <HAL_RCC_ClockConfig+0x178>
 800220a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_RCC_ClockConfig+0x128>
 800222e:	4b4f      	ldr	r3, [pc, #316]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	e00f      	b.n	8002254 <HAL_RCC_ClockConfig+0x148>
 8002234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002238:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
 8002242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002246:	643b      	str	r3, [r7, #64]	; 0x40
 8002248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002258:	63ba      	str	r2, [r7, #56]	; 0x38
 800225a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f042 0220 	orr.w	r2, r2, #32
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	f002 021f 	and.w	r2, r2, #31
 8002274:	2101      	movs	r1, #1
 8002276:	fa01 f202 	lsl.w	r2, r1, r2
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d13a      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b2      	b.n	80023ea <HAL_RCC_ClockConfig+0x2de>
 8002284:	2302      	movs	r3, #2
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <HAL_RCC_ClockConfig+0x1a0>
 80022a6:	4b31      	ldr	r3, [pc, #196]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	e00d      	b.n	80022c8 <HAL_RCC_ClockConfig+0x1bc>
 80022ac:	2302      	movs	r3, #2
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	2302      	movs	r3, #2
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	4b29      	ldr	r3, [pc, #164]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2202      	movs	r2, #2
 80022ca:	61ba      	str	r2, [r7, #24]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	fa92 f2a2 	rbit	r2, r2
 80022d2:	617a      	str	r2, [r7, #20]
  return result;
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	fab2 f282 	clz	r2, r2
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f042 0220 	orr.w	r2, r2, #32
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f002 021f 	and.w	r2, r2, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e079      	b.n	80023ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	491a      	ldr	r1, [pc, #104]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7fe fc00 	bl	8000b0c <HAL_GetTick>
 800230c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7fe fbfc 	bl	8000b0c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e061      	b.n	80023ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_ClockConfig+0x260>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x25c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d214      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCC_ClockConfig+0x25c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0207 	bic.w	r2, r3, #7
 800234e:	4906      	ldr	r1, [pc, #24]	; (8002368 <HAL_RCC_ClockConfig+0x25c>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_RCC_ClockConfig+0x25c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e040      	b.n	80023ea <HAL_RCC_ClockConfig+0x2de>
 8002368:	40022000 	.word	0x40022000
 800236c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_RCC_ClockConfig+0x2e8>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	491a      	ldr	r1, [pc, #104]	; (80023f4 <HAL_RCC_ClockConfig+0x2e8>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_RCC_ClockConfig+0x2e8>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4912      	ldr	r1, [pc, #72]	; (80023f4 <HAL_RCC_ClockConfig+0x2e8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023ae:	f000 f829 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 80023b2:	4601      	mov	r1, r0
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_RCC_ClockConfig+0x2e8>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023bc:	22f0      	movs	r2, #240	; 0xf0
 80023be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	fa92 f2a2 	rbit	r2, r2
 80023c6:	60fa      	str	r2, [r7, #12]
  return result;
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	fab2 f282 	clz	r2, r2
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	40d3      	lsrs	r3, r2
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x2ec>)
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	fa21 f303 	lsr.w	r3, r1, r3
 80023da:	4a08      	ldr	r2, [pc, #32]	; (80023fc <HAL_RCC_ClockConfig+0x2f0>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_RCC_ClockConfig+0x2f4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fb4e 	bl	8000a84 <HAL_InitTick>
  
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3778      	adds	r7, #120	; 0x78
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08002dcc 	.word	0x08002dcc
 80023fc:	20000008 	.word	0x20000008
 8002400:	2000000c 	.word	0x2000000c

08002404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b08b      	sub	sp, #44	; 0x2c
 8002408:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b04      	cmp	r3, #4
 800242c:	d002      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x30>
 800242e:	2b08      	cmp	r3, #8
 8002430:	d003      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x36>
 8002432:	e03c      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002436:	623b      	str	r3, [r7, #32]
      break;
 8002438:	e03c      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002440:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002444:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	607a      	str	r2, [r7, #4]
  return result;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	40d3      	lsrs	r3, r2
 8002458:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	220f      	movs	r2, #15
 8002468:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	fa92 f2a2 	rbit	r2, r2
 8002470:	60fa      	str	r2, [r7, #12]
  return result;
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	40d3      	lsrs	r3, r2
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800248c:	4a0e      	ldr	r2, [pc, #56]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	fbb2 f2f3 	udiv	r2, r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
 800249c:	e004      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	623b      	str	r3, [r7, #32]
      break;
 80024ac:	e002      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024b0:	623b      	str	r3, [r7, #32]
      break;
 80024b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b4:	6a3b      	ldr	r3, [r7, #32]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	372c      	adds	r7, #44	; 0x2c
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	007a1200 	.word	0x007a1200
 80024cc:	08002ddc 	.word	0x08002ddc
 80024d0:	08002dec 	.word	0x08002dec
 80024d4:	003d0900 	.word	0x003d0900

080024d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e09d      	b.n	8002626 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024fa:	d009      	beq.n	8002510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
 8002502:	e005      	b.n	8002510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe f9ec 	bl	8000908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002546:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002550:	d902      	bls.n	8002558 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e002      	b.n	800255e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002566:	d007      	beq.n	8002578 <HAL_SPI_Init+0xa0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002570:	d002      	beq.n	8002578 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	ea42 0103 	orr.w	r1, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	f003 0204 	and.w	r2, r3, #4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80025f4:	ea42 0103 	orr.w	r1, r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b08a      	sub	sp, #40	; 0x28
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800263c:	2301      	movs	r3, #1
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x26>
 8002650:	2302      	movs	r3, #2
 8002652:	e20a      	b.n	8002a6a <HAL_SPI_TransmitReceive+0x43c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800265c:	f7fe fa56 	bl	8000b0c <HAL_GetTick>
 8002660:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002668:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002678:	7efb      	ldrb	r3, [r7, #27]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d00e      	beq.n	800269c <HAL_SPI_TransmitReceive+0x6e>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002684:	d106      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x66>
 800268e:	7efb      	ldrb	r3, [r7, #27]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d003      	beq.n	800269c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002694:	2302      	movs	r3, #2
 8002696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800269a:	e1e0      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x80>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x80>
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80026b4:	e1d3      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2205      	movs	r2, #5
 80026c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	887a      	ldrh	r2, [r7, #2]
 80026e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	887a      	ldrh	r2, [r7, #2]
 80026f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800270c:	d802      	bhi.n	8002714 <HAL_SPI_TransmitReceive+0xe6>
 800270e:	8a3b      	ldrh	r3, [r7, #16]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d908      	bls.n	8002726 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	e007      	b.n	8002736 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002734:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d007      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800275c:	f240 8081 	bls.w	8002862 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_SPI_TransmitReceive+0x140>
 8002768:	8a7b      	ldrh	r3, [r7, #18]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d16d      	bne.n	800284a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	1c9a      	adds	r2, r3, #2
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002792:	e05a      	b.n	800284a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d11b      	bne.n	80027da <HAL_SPI_TransmitReceive+0x1ac>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d016      	beq.n	80027da <HAL_SPI_TransmitReceive+0x1ac>
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d113      	bne.n	80027da <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	1c9a      	adds	r2, r3, #2
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d11c      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x1f4>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d016      	beq.n	8002822 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	b292      	uxth	r2, r2
 8002800:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	1c9a      	adds	r2, r3, #2
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800281e:	2301      	movs	r3, #1
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002822:	f7fe f973 	bl	8000b0c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800282e:	429a      	cmp	r2, r3
 8002830:	d80b      	bhi.n	800284a <HAL_SPI_TransmitReceive+0x21c>
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d007      	beq.n	800284a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002848:	e109      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d19f      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x166>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d199      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x166>
 8002860:	e0e3      	b.n	8002a2a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x244>
 800286a:	8a7b      	ldrh	r3, [r7, #18]
 800286c:	2b01      	cmp	r3, #1
 800286e:	f040 80cf 	bne.w	8002a10 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d912      	bls.n	80028a2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	881a      	ldrh	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b02      	subs	r3, #2
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028a0:	e0b6      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	330c      	adds	r3, #12
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c8:	e0a2      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d134      	bne.n	8002942 <HAL_SPI_TransmitReceive+0x314>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d02f      	beq.n	8002942 <HAL_SPI_TransmitReceive+0x314>
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d12c      	bne.n	8002942 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d912      	bls.n	8002918 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	1c9a      	adds	r2, r3, #2
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b02      	subs	r3, #2
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002916:	e012      	b.n	800293e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	330c      	adds	r3, #12
 8002922:	7812      	ldrb	r2, [r2, #0]
 8002924:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d148      	bne.n	80029e2 <HAL_SPI_TransmitReceive+0x3b4>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d042      	beq.n	80029e2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d923      	bls.n	80029b0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	b292      	uxth	r2, r2
 8002974:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	1c9a      	adds	r2, r3, #2
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b02      	subs	r3, #2
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d81f      	bhi.n	80029de <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	e016      	b.n	80029de <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f103 020c 	add.w	r2, r3, #12
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029de:	2301      	movs	r3, #1
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029e2:	f7fe f893 	bl	8000b0c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d803      	bhi.n	80029fa <HAL_SPI_TransmitReceive+0x3cc>
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d102      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x3d2>
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d107      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002a0e:	e026      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f47f af57 	bne.w	80028ca <HAL_SPI_TransmitReceive+0x29c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f47f af50 	bne.w	80028ca <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f93e 	bl	8002cb0 <SPI_EndRxTxTransaction>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a54:	e003      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3728      	adds	r7, #40	; 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a84:	f7fe f842 	bl	8000b0c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a94:	f7fe f83a 	bl	8000b0c <HAL_GetTick>
 8002a98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a9a:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	015b      	lsls	r3, r3, #5
 8002aa0:	0d1b      	lsrs	r3, r3, #20
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aaa:	e054      	b.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab2:	d050      	beq.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ab4:	f7fe f82a 	bl	8000b0c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d902      	bls.n	8002aca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d13d      	bne.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ad8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae2:	d111      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aec:	d004      	beq.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af6:	d107      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b10:	d10f      	bne.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e017      	b.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d19b      	bne.n	8002aac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000008 	.word	0x20000008

08002b84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b96:	f7fd ffb9 	bl	8000b0c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002ba6:	f7fd ffb1 	bl	8000b0c <HAL_GetTick>
 8002baa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	330c      	adds	r3, #12
 8002bb2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002bb4:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00da      	lsls	r2, r3, #3
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	0d1b      	lsrs	r3, r3, #20
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002bcc:	e060      	b.n	8002c90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bd4:	d107      	bne.n	8002be6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d050      	beq.n	8002c90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bee:	f7fd ff8d 	bl	8000b0c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d902      	bls.n	8002c04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d13d      	bne.n	8002c80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c1c:	d111      	bne.n	8002c42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c26:	d004      	beq.n	8002c32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c30:	d107      	bne.n	8002c42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4a:	d10f      	bne.n	8002c6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e010      	b.n	8002ca2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d196      	bne.n	8002bce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3728      	adds	r7, #40	; 0x28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000008 	.word	0x20000008

08002cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff ff5b 	bl	8002b84 <SPI_WaitFifoStateUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e027      	b.n	8002d34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2200      	movs	r2, #0
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7ff fec0 	bl	8002a74 <SPI_WaitFlagStateUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfe:	f043 0220 	orr.w	r2, r3, #32
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e014      	b.n	8002d34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff ff34 	bl	8002b84 <SPI_WaitFifoStateUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e000      	b.n	8002d34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <memcmp>:
 8002d3c:	b510      	push	{r4, lr}
 8002d3e:	3901      	subs	r1, #1
 8002d40:	4402      	add	r2, r0
 8002d42:	4290      	cmp	r0, r2
 8002d44:	d101      	bne.n	8002d4a <memcmp+0xe>
 8002d46:	2000      	movs	r0, #0
 8002d48:	e005      	b.n	8002d56 <memcmp+0x1a>
 8002d4a:	7803      	ldrb	r3, [r0, #0]
 8002d4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002d50:	42a3      	cmp	r3, r4
 8002d52:	d001      	beq.n	8002d58 <memcmp+0x1c>
 8002d54:	1b18      	subs	r0, r3, r4
 8002d56:	bd10      	pop	{r4, pc}
 8002d58:	3001      	adds	r0, #1
 8002d5a:	e7f2      	b.n	8002d42 <memcmp+0x6>

08002d5c <memset>:
 8002d5c:	4402      	add	r2, r0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	4d0d      	ldr	r5, [pc, #52]	; (8002da4 <__libc_init_array+0x38>)
 8002d70:	4c0d      	ldr	r4, [pc, #52]	; (8002da8 <__libc_init_array+0x3c>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	2600      	movs	r6, #0
 8002d78:	42a6      	cmp	r6, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	4d0b      	ldr	r5, [pc, #44]	; (8002dac <__libc_init_array+0x40>)
 8002d7e:	4c0c      	ldr	r4, [pc, #48]	; (8002db0 <__libc_init_array+0x44>)
 8002d80:	f000 f818 	bl	8002db4 <_init>
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	2600      	movs	r6, #0
 8002d8a:	42a6      	cmp	r6, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d94:	4798      	blx	r3
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9e:	4798      	blx	r3
 8002da0:	3601      	adds	r6, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	08002dfc 	.word	0x08002dfc
 8002da8:	08002dfc 	.word	0x08002dfc
 8002dac:	08002dfc 	.word	0x08002dfc
 8002db0:	08002e00 	.word	0x08002e00

08002db4 <_init>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr

08002dc0 <_fini>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr
