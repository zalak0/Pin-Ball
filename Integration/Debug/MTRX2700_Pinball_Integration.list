
MTRX2700_Pinball_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000246c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002624  08002624  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002624  08002624  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002624  08002624  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800262c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000038  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004c5a  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000012a6  00000000  00000000  00024ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004c8  00000000  00000000  00025f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000036d  00000000  00000000  00026458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c618  00000000  00000000  000267c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006517  00000000  00000000  00042ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a8179  00000000  00000000  000492f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000010ac  00000000  00000000  000f1470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000f251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080025dc 	.word	0x080025dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080025dc 	.word	0x080025dc

080001c8 <chase_led>:
uint8_t sensor4_flag = 0;
uint8_t sensor8_flag = 0;
uint8_t sensor9_flag = 0;
uint8_t sensor10_flag = 0;

void chase_led(){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80001ce:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <chase_led+0x30>)
 80001d0:	607b      	str	r3, [r7, #4]

	*led_register <<= 1;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	701a      	strb	r2, [r3, #0]
	if (*led_register == 0) {
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d102      	bne.n	80001ec <chase_led+0x24>
		*led_register = 1;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2201      	movs	r2, #1
 80001ea:	701a      	strb	r2, [r3, #0]
	}
}
 80001ec:	bf00      	nop
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr
 80001f8:	48001015 	.word	0x48001015

080001fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == sensor1_Pin){
 8000206:	88fb      	ldrh	r3, [r7, #6]
 8000208:	2b02      	cmp	r3, #2
 800020a:	d103      	bne.n	8000214 <HAL_GPIO_EXTI_Callback+0x18>
		sensor1_flag = 1;
 800020c:	4b1a      	ldr	r3, [pc, #104]	; (8000278 <HAL_GPIO_EXTI_Callback+0x7c>)
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
	} else if(GPIO_Pin == sensor9_Pin){
		sensor9_flag = 1;
	} else if(GPIO_Pin == sensor10_Pin){
		sensor10_flag = 1;
	}
}
 8000212:	e02b      	b.n	800026c <HAL_GPIO_EXTI_Callback+0x70>
	} else if (GPIO_Pin == sensor2_Pin){
 8000214:	88fb      	ldrh	r3, [r7, #6]
 8000216:	2b04      	cmp	r3, #4
 8000218:	d103      	bne.n	8000222 <HAL_GPIO_EXTI_Callback+0x26>
		sensor2_flag = 1;
 800021a:	4b18      	ldr	r3, [pc, #96]	; (800027c <HAL_GPIO_EXTI_Callback+0x80>)
 800021c:	2201      	movs	r2, #1
 800021e:	701a      	strb	r2, [r3, #0]
}
 8000220:	e024      	b.n	800026c <HAL_GPIO_EXTI_Callback+0x70>
	} else if(GPIO_Pin == sensor3_Pin){
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	2b08      	cmp	r3, #8
 8000226:	d103      	bne.n	8000230 <HAL_GPIO_EXTI_Callback+0x34>
		sensor3_flag = 1;
 8000228:	4b15      	ldr	r3, [pc, #84]	; (8000280 <HAL_GPIO_EXTI_Callback+0x84>)
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
}
 800022e:	e01d      	b.n	800026c <HAL_GPIO_EXTI_Callback+0x70>
	} else if(GPIO_Pin == sensor4_Pin){
 8000230:	88fb      	ldrh	r3, [r7, #6]
 8000232:	2b10      	cmp	r3, #16
 8000234:	d103      	bne.n	800023e <HAL_GPIO_EXTI_Callback+0x42>
		sensor4_flag = 1;
 8000236:	4b13      	ldr	r3, [pc, #76]	; (8000284 <HAL_GPIO_EXTI_Callback+0x88>)
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
}
 800023c:	e016      	b.n	800026c <HAL_GPIO_EXTI_Callback+0x70>
	} else if(GPIO_Pin == sensor8_Pin){
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000244:	d103      	bne.n	800024e <HAL_GPIO_EXTI_Callback+0x52>
		sensor8_flag = 1;
 8000246:	4b10      	ldr	r3, [pc, #64]	; (8000288 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000248:	2201      	movs	r2, #1
 800024a:	701a      	strb	r2, [r3, #0]
}
 800024c:	e00e      	b.n	800026c <HAL_GPIO_EXTI_Callback+0x70>
	} else if(GPIO_Pin == sensor9_Pin){
 800024e:	88fb      	ldrh	r3, [r7, #6]
 8000250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000254:	d103      	bne.n	800025e <HAL_GPIO_EXTI_Callback+0x62>
		sensor9_flag = 1;
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <HAL_GPIO_EXTI_Callback+0x90>)
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
}
 800025c:	e006      	b.n	800026c <HAL_GPIO_EXTI_Callback+0x70>
	} else if(GPIO_Pin == sensor10_Pin){
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000264:	d102      	bne.n	800026c <HAL_GPIO_EXTI_Callback+0x70>
		sensor10_flag = 1;
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <HAL_GPIO_EXTI_Callback+0x94>)
 8000268:	2201      	movs	r2, #1
 800026a:	701a      	strb	r2, [r3, #0]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	2000003c 	.word	0x2000003c
 800027c:	2000003d 	.word	0x2000003d
 8000280:	2000003e 	.word	0x2000003e
 8000284:	2000003f 	.word	0x2000003f
 8000288:	20000040 	.word	0x20000040
 800028c:	20000041 	.word	0x20000041
 8000290:	20000042 	.word	0x20000042

08000294 <multiplier_reset>:

void multiplier_reset(void){
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	multiplier = 1;
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <multiplier_reset+0x14>)
 800029a:	2201      	movs	r2, #1
 800029c:	801a      	strh	r2, [r3, #0]
}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	20000008 	.word	0x20000008

080002ac <game_over>:

void game_over(void){
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	end_game = 1;
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <game_over+0x14>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	701a      	strb	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	20000034 	.word	0x20000034

080002c4 <main>:


int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	//Run required setup functions.
	HAL_setup();
 80002c8:	f000 f9d7 	bl	800067a <HAL_setup>
	enable_clocks();
 80002cc:	f000 fad6 	bl	800087c <enable_clocks>
	enable_interrupts();
 80002d0:	f000 fb02 	bl	80008d8 <enable_interrupts>
	initialise_board();
 80002d4:	f000 faee 	bl	80008b4 <initialise_board>

	//Pre-game Loop.
	while (game_state == 0){
 80002d8:	e00e      	b.n	80002f8 <main+0x34>
		if (sensor2_flag == 1){
 80002da:	4b3b      	ldr	r3, [pc, #236]	; (80003c8 <main+0x104>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d10a      	bne.n	80002f8 <main+0x34>
			game_state = 1;
 80002e2:	4b3a      	ldr	r3, [pc, #232]	; (80003cc <main+0x108>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	801a      	strh	r2, [r3, #0]
			//chase_led();
			//multi_timer(&chase_led, 10000);


			game_timer(&game_over, 10000); //Set in seconds.
 80002e8:	f242 7110 	movw	r1, #10000	; 0x2710
 80002ec:	4838      	ldr	r0, [pc, #224]	; (80003d0 <main+0x10c>)
 80002ee:	f000 fb89 	bl	8000a04 <game_timer>
			sensor2_flag = 0;
 80002f2:	4b35      	ldr	r3, [pc, #212]	; (80003c8 <main+0x104>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
	while (game_state == 0){
 80002f8:	4b34      	ldr	r3, [pc, #208]	; (80003cc <main+0x108>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0ec      	beq.n	80002da <main+0x16>

			Unused pins but activated pins:
			-PA3
			-PA4
	*/
	while (game_state == 1){
 8000300:	e05a      	b.n	80003b8 <main+0xf4>

		//Multipliers
		if (sensor1_flag == 1){
 8000302:	4b34      	ldr	r3, [pc, #208]	; (80003d4 <main+0x110>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d10b      	bne.n	8000322 <main+0x5e>
			multiplier = 2;
 800030a:	4b33      	ldr	r3, [pc, #204]	; (80003d8 <main+0x114>)
 800030c:	2202      	movs	r2, #2
 800030e:	801a      	strh	r2, [r3, #0]
			multi_timer(&multiplier_reset, mult_2_duration);
 8000310:	4b32      	ldr	r3, [pc, #200]	; (80003dc <main+0x118>)
 8000312:	881b      	ldrh	r3, [r3, #0]
 8000314:	4619      	mov	r1, r3
 8000316:	4832      	ldr	r0, [pc, #200]	; (80003e0 <main+0x11c>)
 8000318:	f000 fb9a 	bl	8000a50 <multi_timer>
			sensor1_flag = 0;
 800031c:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <main+0x110>)
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
		}


		//Score Handling
		//Sensor8 (PA8) handles sensors that score 100 points.
		if (sensor8_flag == 1){
 8000322:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <main+0x120>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d10f      	bne.n	800034a <main+0x86>
			score += point_val_1 * multiplier;
 800032a:	4b2f      	ldr	r3, [pc, #188]	; (80003e8 <main+0x124>)
 800032c:	881a      	ldrh	r2, [r3, #0]
 800032e:	4b2a      	ldr	r3, [pc, #168]	; (80003d8 <main+0x114>)
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	fb12 f303 	smulbb	r3, r2, r3
 8000336:	b29a      	uxth	r2, r3
 8000338:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <main+0x128>)
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	4413      	add	r3, r2
 800033e:	b29a      	uxth	r2, r3
 8000340:	4b2a      	ldr	r3, [pc, #168]	; (80003ec <main+0x128>)
 8000342:	801a      	strh	r2, [r3, #0]
			sensor8_flag = 0;
 8000344:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <main+0x120>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
		}
		//Sensor9 (PA9) handles sensors that score 200 points.
		if (sensor9_flag == 1){
 800034a:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <main+0x12c>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d10f      	bne.n	8000372 <main+0xae>
			score += point_val_2 * multiplier;
 8000352:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <main+0x130>)
 8000354:	881a      	ldrh	r2, [r3, #0]
 8000356:	4b20      	ldr	r3, [pc, #128]	; (80003d8 <main+0x114>)
 8000358:	881b      	ldrh	r3, [r3, #0]
 800035a:	fb12 f303 	smulbb	r3, r2, r3
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b22      	ldr	r3, [pc, #136]	; (80003ec <main+0x128>)
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	4413      	add	r3, r2
 8000366:	b29a      	uxth	r2, r3
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <main+0x128>)
 800036a:	801a      	strh	r2, [r3, #0]
			sensor9_flag = 0;
 800036c:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <main+0x12c>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
		}
		//Sensor10 (PA10) handles sensors that score 500 points.
		if (sensor10_flag == 1){
 8000372:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <main+0x134>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d10f      	bne.n	800039a <main+0xd6>
			score += point_val_3 * multiplier;
 800037a:	4b20      	ldr	r3, [pc, #128]	; (80003fc <main+0x138>)
 800037c:	881a      	ldrh	r2, [r3, #0]
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <main+0x114>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	fb12 f303 	smulbb	r3, r2, r3
 8000386:	b29a      	uxth	r2, r3
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <main+0x128>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	4413      	add	r3, r2
 800038e:	b29a      	uxth	r2, r3
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <main+0x128>)
 8000392:	801a      	strh	r2, [r3, #0]
			sensor10_flag = 0;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <main+0x134>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
		}


		//Transmit Score (& Game time? & Current multiplier?)
		game_time = get_game_time();
 800039a:	f000 fb27 	bl	80009ec <get_game_time>
 800039e:	4603      	mov	r3, r0
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <main+0x13c>)
 80003a4:	801a      	strh	r2, [r3, #0]
		- current game time:    (uint16_t) game_time
		*/


		//Game ends via time out
		if (end_game == 1){
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <main+0x140>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d104      	bne.n	80003b8 <main+0xf4>
			chase_led();
 80003ae:	f7ff ff0b 	bl	80001c8 <chase_led>
			game_state = 0;
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <main+0x108>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	801a      	strh	r2, [r3, #0]
	while (game_state == 1){
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <main+0x108>)
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d0a0      	beq.n	8000302 <main+0x3e>
 80003c0:	2300      	movs	r3, #0

	}



}
 80003c2:	4618      	mov	r0, r3
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000003d 	.word	0x2000003d
 80003cc:	2000003a 	.word	0x2000003a
 80003d0:	080002ad 	.word	0x080002ad
 80003d4:	2000003c 	.word	0x2000003c
 80003d8:	20000008 	.word	0x20000008
 80003dc:	20000000 	.word	0x20000000
 80003e0:	08000295 	.word	0x08000295
 80003e4:	20000040 	.word	0x20000040
 80003e8:	20000002 	.word	0x20000002
 80003ec:	20000036 	.word	0x20000036
 80003f0:	20000041 	.word	0x20000041
 80003f4:	20000004 	.word	0x20000004
 80003f8:	20000042 	.word	0x20000042
 80003fc:	20000006 	.word	0x20000006
 8000400:	20000038 	.word	0x20000038
 8000404:	20000034 	.word	0x20000034

08000408 <SystemClock_Config>:
#include "stm32f303xc.h"
#include "main.h"


void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b090      	sub	sp, #64	; 0x40
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	2228      	movs	r2, #40	; 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f002 f8b4 	bl	8002584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042a:	2302      	movs	r3, #2
 800042c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042e:	2301      	movs	r3, #1
 8000430:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000432:	2310      	movs	r3, #16
 8000434:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043a:	2300      	movs	r3, #0
 800043c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800043e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000442:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000444:	f107 0318 	add.w	r3, r7, #24
 8000448:	4618      	mov	r0, r3
 800044a:	f000 fe77 	bl	800113c <HAL_RCC_OscConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000454:	f000 f90c 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	230f      	movs	r3, #15
 800045a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045c:	2302      	movs	r3, #2
 800045e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2101      	movs	r1, #1
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fea0 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800047e:	f000 f8f7 	bl	8000670 <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3740      	adds	r7, #64	; 0x40
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004a2:	4b70      	ldr	r3, [pc, #448]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a6f      	ldr	r2, [pc, #444]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b6d      	ldr	r3, [pc, #436]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004b6:	613b      	str	r3, [r7, #16]
 80004b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ba:	4b6a      	ldr	r3, [pc, #424]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a69      	ldr	r2, [pc, #420]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b67      	ldr	r3, [pc, #412]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d2:	4b64      	ldr	r3, [pc, #400]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a63      	ldr	r2, [pc, #396]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b61      	ldr	r3, [pc, #388]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b5e      	ldr	r3, [pc, #376]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a5d      	ldr	r2, [pc, #372]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b5b      	ldr	r3, [pc, #364]	; (8000664 <MX_GPIO_Init+0x1d8>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b58      	ldr	r3, [pc, #352]	; (8000664 <MX_GPIO_Init+0x1d8>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a57      	ldr	r2, [pc, #348]	; (8000664 <MX_GPIO_Init+0x1d8>)
 8000508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b55      	ldr	r3, [pc, #340]	; (8000664 <MX_GPIO_Init+0x1d8>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800051a:	2200      	movs	r2, #0
 800051c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000520:	4851      	ldr	r0, [pc, #324]	; (8000668 <MX_GPIO_Init+0x1dc>)
 8000522:	f000 fddb 	bl	80010dc <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000526:	f64f 7308 	movw	r3, #65288	; 0xff08
 800052a:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4619      	mov	r1, r3
 800053e:	484a      	ldr	r0, [pc, #296]	; (8000668 <MX_GPIO_Init+0x1dc>)
 8000540:	f000 fc52 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin|MEMS_INT1_Pin;
 8000544:	2321      	movs	r3, #33	; 0x21
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000548:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4843      	ldr	r0, [pc, #268]	; (8000668 <MX_GPIO_Init+0x1dc>)
 800055a:	f000 fc45 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055e:	2301      	movs	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f000 fc38 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor1_Pin sensor2_Pin sensor3_Pin sensor4_Pin
                           sensor8_Pin sensor9_Pin sensor10_Pin */
  GPIO_InitStruct.Pin = sensor1_Pin|sensor2_Pin|sensor3_Pin|sensor4_Pin|sensor8_Pin|sensor9_Pin|sensor10_Pin;
 8000578:	f240 731e 	movw	r3, #1822	; 0x71e
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000584:	2301      	movs	r3, #1
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fc29 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000596:	23e0      	movs	r3, #224	; 0xe0
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	2302      	movs	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005a6:	2305      	movs	r3, #5
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b4:	f000 fc18 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80005b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80005ca:	230e      	movs	r3, #14
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fc06 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80005dc:	23c0      	movs	r3, #192	; 0xc0
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e0:	2312      	movs	r3, #18
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ec:	2304      	movs	r3, #4
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <MX_GPIO_Init+0x1e0>)
 80005f8:	f000 fbf6 	bl	8000de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2007      	movs	r0, #7
 8000602:	f000 fbba 	bl	8000d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000606:	2007      	movs	r0, #7
 8000608:	f000 fbd3 	bl	8000db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	2008      	movs	r0, #8
 8000612:	f000 fbb2 	bl	8000d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000616:	2008      	movs	r0, #8
 8000618:	f000 fbcb 	bl	8000db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2009      	movs	r0, #9
 8000622:	f000 fbaa 	bl	8000d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000626:	2009      	movs	r0, #9
 8000628:	f000 fbc3 	bl	8000db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	200a      	movs	r0, #10
 8000632:	f000 fba2 	bl	8000d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000636:	200a      	movs	r0, #10
 8000638:	f000 fbbb 	bl	8000db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	2017      	movs	r0, #23
 8000642:	f000 fb9a 	bl	8000d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000646:	2017      	movs	r0, #23
 8000648:	f000 fbb3 	bl	8000db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2028      	movs	r0, #40	; 0x28
 8000652:	f000 fb92 	bl	8000d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000656:	2028      	movs	r0, #40	; 0x28
 8000658:	f000 fbab 	bl	8000db2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	48001000 	.word	0x48001000
 800066c:	48000400 	.word	0x48000400

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>

0800067a <HAL_setup>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void HAL_setup(void){
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0

	//Initialise HAL
	HAL_Init();
 800067e:	f000 fa3b 	bl	8000af8 <HAL_Init>

	//Configure system clock
	SystemClock_Config();
 8000682:	f7ff fec1 	bl	8000408 <SystemClock_Config>

	//Initialise GPIO
	MX_GPIO_Init();
 8000686:	f7ff ff01 	bl	800048c <MX_GPIO_Init>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_MspInit+0x44>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_MspInit+0x44>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x44>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_MspInit+0x44>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_MspInit+0x44>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006c6:	2007      	movs	r0, #7
 80006c8:	f000 fb4c 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 fa2e 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor1_Pin);
 8000730:	2002      	movs	r0, #2
 8000732:	f000 fceb 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}

0800073a <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor2_Pin);
 800073e:	2004      	movs	r0, #4
 8000740:	f000 fce4 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor3_Pin);
 800074c:	2008      	movs	r0, #8
 800074e:	f000 fcdd 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}

08000756 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor4_Pin);
 800075a:	2010      	movs	r0, #16
 800075c:	f000 fcd6 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor8_Pin);
 8000768:	f44f 7080 	mov.w	r0, #256	; 0x100
 800076c:	f000 fcce 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor9_Pin);
 8000770:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000774:	f000 fcca 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor10_Pin);
 8000780:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000784:	f000 fcc2 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <SystemInit+0x20>)
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <SystemInit+0x20>)
 8000798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800079c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db0b      	blt.n	80007da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 021f 	and.w	r2, r3, #31
 80007c8:	4907      	ldr	r1, [pc, #28]	; (80007e8 <__NVIC_EnableIRQ+0x38>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	2001      	movs	r0, #1
 80007d2:	fa00 f202 	lsl.w	r2, r0, r2
 80007d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e100 	.word	0xe000e100

080007ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	db0c      	blt.n	8000818 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f003 021f 	and.w	r2, r3, #31
 8000804:	4907      	ldr	r1, [pc, #28]	; (8000824 <__NVIC_ClearPendingIRQ+0x38>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	095b      	lsrs	r3, r3, #5
 800080c:	2001      	movs	r0, #1
 800080e:	fa00 f202 	lsl.w	r2, r0, r2
 8000812:	3360      	adds	r3, #96	; 0x60
 8000814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <enable_clocks>:
#include "stm32f303xc.h"
#include "timers.h"

//Flags

void enable_clocks(){
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <enable_clocks+0x34>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <enable_clocks+0x34>)
 8000886:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800088a:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <enable_clocks+0x34>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <enable_clocks+0x34>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <enable_clocks+0x34>)
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <enable_clocks+0x34>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	61d3      	str	r3, [r2, #28]

}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <initialise_board>:

void initialise_board(){
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <initialise_board+0x20>)
 80008bc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f245 5255 	movw	r2, #21845	; 0x5555
 80008c4:	801a      	strh	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	48001002 	.word	0x48001002

080008d8 <enable_interrupts>:

void enable_interrupts(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
	//disable interrupts while setting interrupts
	__disable_irq();

	TIM2->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
 80008e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80008ee:	6013      	str	r3, [r2, #0]
	TIM2->EGR = TIM_EGR_UG;
 80008f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008f4:	2201      	movs	r2, #1
 80008f6:	615a      	str	r2, [r3, #20]
	TIM2->SR &= ~TIM_SR_UIF;
 80008f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000902:	f023 0301 	bic.w	r3, r3, #1
 8000906:	6113      	str	r3, [r2, #16]
	TIM2->DIER |= TIM_DIER_UIE;
 8000908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM2_IRQn, 2);
 8000918:	2102      	movs	r1, #2
 800091a:	201c      	movs	r0, #28
 800091c:	f7ff ff84 	bl	8000828 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(TIM2_IRQn);
 8000920:	201c      	movs	r0, #28
 8000922:	f7ff ff63 	bl	80007ec <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000926:	201c      	movs	r0, #28
 8000928:	f7ff ff42 	bl	80007b0 <__NVIC_EnableIRQ>

	TIM3->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <enable_interrupts+0x9c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a10      	ldr	r2, [pc, #64]	; (8000974 <enable_interrupts+0x9c>)
 8000932:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8000936:	6013      	str	r3, [r2, #0]
	TIM3->EGR = TIM_EGR_UG;
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <enable_interrupts+0x9c>)
 800093a:	2201      	movs	r2, #1
 800093c:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~TIM_SR_UIF;
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <enable_interrupts+0x9c>)
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <enable_interrupts+0x9c>)
 8000944:	f023 0301 	bic.w	r3, r3, #1
 8000948:	6113      	str	r3, [r2, #16]
	TIM3->DIER |= TIM_DIER_UIE;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <enable_interrupts+0x9c>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <enable_interrupts+0x9c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM3_IRQn, 1);
 8000956:	2101      	movs	r1, #1
 8000958:	201d      	movs	r0, #29
 800095a:	f7ff ff65 	bl	8000828 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(TIM3_IRQn);
 800095e:	201d      	movs	r0, #29
 8000960:	f7ff ff44 	bl	80007ec <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM3_IRQn);
 8000964:	201d      	movs	r0, #29
 8000966:	f7ff ff23 	bl	80007b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800096a:	b662      	cpsie	i
}
 800096c:	bf00      	nop


	//re-enable interrupts.
	__enable_irq();

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40000400 	.word	0x40000400

08000978 <TIM2_IRQHandler>:

void (*on_TIM2_reset)() = 0x00;

void (*on_TIM3_reset)() = 0x00;

void TIM2_IRQHandler(void){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 800097c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000986:	f023 0301 	bic.w	r3, r3, #1
 800098a:	6113      	str	r3, [r2, #16]

	if (on_TIM2_reset != 0x00){
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <TIM2_IRQHandler+0x38>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00a      	beq.n	80009aa <TIM2_IRQHandler+0x32>
		on_TIM2_reset();
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <TIM2_IRQHandler+0x38>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4798      	blx	r3
		TIM2->CNT = 0x00;
 800099a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 0;
 80009a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
	}
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000044 	.word	0x20000044

080009b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <TIM3_IRQHandler+0x30>)
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <TIM3_IRQHandler+0x30>)
 80009be:	f023 0301 	bic.w	r3, r3, #1
 80009c2:	6113      	str	r3, [r2, #16]

	if (on_TIM3_reset != 0x00){
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <TIM3_IRQHandler+0x34>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <TIM3_IRQHandler+0x2a>
		on_TIM3_reset();
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <TIM3_IRQHandler+0x34>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4798      	blx	r3
		TIM3->CNT = 0x00;
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <TIM3_IRQHandler+0x30>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CR1 = 0;
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <TIM3_IRQHandler+0x30>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
	}
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40000400 	.word	0x40000400
 80009e8:	20000048 	.word	0x20000048

080009ec <get_game_time>:

int get_game_time(){
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	return TIM3->CNT;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <get_game_time+0x14>)
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40000400 	.word	0x40000400

08000a04 <game_timer>:

void game_timer(void (*func_ptr)(), int duration){
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	TIM3->ARR = duration;
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <game_timer+0x44>)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->CR1 |= TIM_CR1_CEN;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <game_timer+0x44>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <game_timer+0x44>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

	TIM2->PSC = 0x1F40 - 1;
 8000a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a24:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
	//TIM3->PSC = 8000000;
	TIM3->EGR = TIM_EGR_UG;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <game_timer+0x44>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	615a      	str	r2, [r3, #20]

	on_TIM3_reset = func_ptr;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <game_timer+0x48>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
	//TIM3->EGR = TIM_EGR_UG;
	//TIM3->SR &= ~TIM_SR_UIF;
	TIM3->CNT = 0x00;
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <game_timer+0x44>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40000400 	.word	0x40000400
 8000a4c:	20000048 	.word	0x20000048

08000a50 <multi_timer>:

void multi_timer(void (*func_ptr)(), int duration){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	TIM2->ARR = duration;
 8000a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;
 8000a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6013      	str	r3, [r2, #0]

	TIM2->PSC = 0x1F40 - 1;
 8000a72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a76:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->EGR = TIM_EGR_UG;
 8000a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a80:	2201      	movs	r2, #1
 8000a82:	615a      	str	r2, [r3, #20]

	on_TIM2_reset = func_ptr;
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <multi_timer+0x50>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0x00;
 8000a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000044 	.word	0x20000044

08000aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff fe70 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f001 fd5f 	bl	8002594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad6:	f7ff fbf5 	bl	80002c4 <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000adc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ae8:	0800262c 	.word	0x0800262c
  ldr r2, =_sbss
 8000aec:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000af0:	20000050 	.word	0x20000050

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x28>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f92b 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fdbc 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f943 	bl	8000dce <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f90b 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000000c 	.word	0x2000000c
 8000b7c:	20000014 	.word	0x20000014
 8000b80:	20000010 	.word	0x20000010

08000b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	2000004c 	.word	0x2000004c

08000bac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000004c 	.word	0x2000004c

08000bc4 <__NVIC_SetPriorityGrouping>:
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff8e 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff29 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff3e 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff8e 	bl	8000cb8 <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff31 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa2 	bl	8000d20 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df6:	e154      	b.n	80010a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 8146 	beq.w	800109c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d005      	beq.n	8000e28 <HAL_GPIO_Init+0x40>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d130      	bne.n	8000e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	f003 0201 	and.w	r2, r3, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d017      	beq.n	8000ec6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d123      	bne.n	8000f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	6939      	ldr	r1, [r7, #16]
 8000f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0203 	and.w	r2, r3, #3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80a0 	beq.w	800109c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5c:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <HAL_GPIO_Init+0x2d8>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a57      	ldr	r2, [pc, #348]	; (80010c0 <HAL_GPIO_Init+0x2d8>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <HAL_GPIO_Init+0x2d8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f74:	4a53      	ldr	r2, [pc, #332]	; (80010c4 <HAL_GPIO_Init+0x2dc>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f9e:	d019      	beq.n	8000fd4 <HAL_GPIO_Init+0x1ec>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <HAL_GPIO_Init+0x2e0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d013      	beq.n	8000fd0 <HAL_GPIO_Init+0x1e8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a48      	ldr	r2, [pc, #288]	; (80010cc <HAL_GPIO_Init+0x2e4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d00d      	beq.n	8000fcc <HAL_GPIO_Init+0x1e4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a47      	ldr	r2, [pc, #284]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d007      	beq.n	8000fc8 <HAL_GPIO_Init+0x1e0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <HAL_GPIO_Init+0x2ec>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_GPIO_Init+0x1dc>
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e008      	b.n	8000fd6 <HAL_GPIO_Init+0x1ee>
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	e006      	b.n	8000fd6 <HAL_GPIO_Init+0x1ee>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e004      	b.n	8000fd6 <HAL_GPIO_Init+0x1ee>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e002      	b.n	8000fd6 <HAL_GPIO_Init+0x1ee>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <HAL_GPIO_Init+0x1ee>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	f002 0203 	and.w	r2, r2, #3
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe6:	4937      	ldr	r1, [pc, #220]	; (80010c4 <HAL_GPIO_Init+0x2dc>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001018:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001042:	4a25      	ldr	r2, [pc, #148]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f47f aea3 	bne.w	8000df8 <HAL_GPIO_Init+0x10>
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000
 80010c8:	48000400 	.word	0x48000400
 80010cc:	48000800 	.word	0x48000800
 80010d0:	48000c00 	.word	0x48000c00
 80010d4:	48001000 	.word	0x48001000
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f866 	bl	80001fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001142:	af00      	add	r7, sp, #0
 8001144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800114c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800114e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	f001 b823 	b.w	80021a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 817d 	beq.w	8001472 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001178:	4bbc      	ldr	r3, [pc, #752]	; (800146c <HAL_RCC_OscConfig+0x330>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b04      	cmp	r3, #4
 8001182:	d00c      	beq.n	800119e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001184:	4bb9      	ldr	r3, [pc, #740]	; (800146c <HAL_RCC_OscConfig+0x330>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b08      	cmp	r3, #8
 800118e:	d15c      	bne.n	800124a <HAL_RCC_OscConfig+0x10e>
 8001190:	4bb6      	ldr	r3, [pc, #728]	; (800146c <HAL_RCC_OscConfig+0x330>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d155      	bne.n	800124a <HAL_RCC_OscConfig+0x10e>
 800119e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	fab3 f383 	clz	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d102      	bne.n	80011d0 <HAL_RCC_OscConfig+0x94>
 80011ca:	4ba8      	ldr	r3, [pc, #672]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	e015      	b.n	80011fc <HAL_RCC_OscConfig+0xc0>
 80011d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80011f8:	4b9c      	ldr	r3, [pc, #624]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001200:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001204:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001208:	fa92 f2a2 	rbit	r2, r2
 800120c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001210:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001214:	fab2 f282 	clz	r2, r2
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	f042 0220 	orr.w	r2, r2, #32
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	f002 021f 	and.w	r2, r2, #31
 8001224:	2101      	movs	r1, #1
 8001226:	fa01 f202 	lsl.w	r2, r1, r2
 800122a:	4013      	ands	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 811f 	beq.w	8001470 <HAL_RCC_OscConfig+0x334>
 8001232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f040 8116 	bne.w	8001470 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	f000 bfaf 	b.w	80021a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125a:	d106      	bne.n	800126a <HAL_RCC_OscConfig+0x12e>
 800125c:	4b83      	ldr	r3, [pc, #524]	; (800146c <HAL_RCC_OscConfig+0x330>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a82      	ldr	r2, [pc, #520]	; (800146c <HAL_RCC_OscConfig+0x330>)
 8001262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e036      	b.n	80012d8 <HAL_RCC_OscConfig+0x19c>
 800126a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x158>
 800127a:	4b7c      	ldr	r3, [pc, #496]	; (800146c <HAL_RCC_OscConfig+0x330>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7b      	ldr	r2, [pc, #492]	; (800146c <HAL_RCC_OscConfig+0x330>)
 8001280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b79      	ldr	r3, [pc, #484]	; (800146c <HAL_RCC_OscConfig+0x330>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a78      	ldr	r2, [pc, #480]	; (800146c <HAL_RCC_OscConfig+0x330>)
 800128c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e021      	b.n	80012d8 <HAL_RCC_OscConfig+0x19c>
 8001294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x184>
 80012a6:	4b71      	ldr	r3, [pc, #452]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a70      	ldr	r2, [pc, #448]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b6e      	ldr	r3, [pc, #440]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6d      	ldr	r2, [pc, #436]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0x19c>
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a69      	ldr	r2, [pc, #420]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b67      	ldr	r3, [pc, #412]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a66      	ldr	r2, [pc, #408]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012d8:	4b64      	ldr	r3, [pc, #400]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	f023 020f 	bic.w	r2, r3, #15
 80012e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	495f      	ldr	r1, [pc, #380]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d059      	beq.n	80013b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fc53 	bl	8000bac <HAL_GetTick>
 8001306:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e00a      	b.n	8001322 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fc4e 	bl	8000bac <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b64      	cmp	r3, #100	; 0x64
 800131a:	d902      	bls.n	8001322 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	f000 bf43 	b.w	80021a8 <HAL_RCC_OscConfig+0x106c>
 8001322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001326:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001336:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x218>
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_RCC_OscConfig+0x330>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	e015      	b.n	8001380 <HAL_RCC_OscConfig+0x244>
 8001354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001358:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001360:	fa93 f3a3 	rbit	r3, r3
 8001364:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001370:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800137c:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_RCC_OscConfig+0x330>)
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001384:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001388:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800138c:	fa92 f2a2 	rbit	r2, r2
 8001390:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001394:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001398:	fab2 f282 	clz	r2, r2
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	f042 0220 	orr.w	r2, r2, #32
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	f002 021f 	and.w	r2, r2, #31
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0ab      	beq.n	800130c <HAL_RCC_OscConfig+0x1d0>
 80013b4:	e05d      	b.n	8001472 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fbf9 	bl	8000bac <HAL_GetTick>
 80013ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fbf4 	bl	8000bac <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b64      	cmp	r3, #100	; 0x64
 80013ce:	d902      	bls.n	80013d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f000 bee9 	b.w	80021a8 <HAL_RCC_OscConfig+0x106c>
 80013d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	095b      	lsrs	r3, r3, #5
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d102      	bne.n	8001408 <HAL_RCC_OscConfig+0x2cc>
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <HAL_RCC_OscConfig+0x330>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	e015      	b.n	8001434 <HAL_RCC_OscConfig+0x2f8>
 8001408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001414:	fa93 f3a3 	rbit	r3, r3
 8001418:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800141c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001420:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001424:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_RCC_OscConfig+0x330>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001438:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800143c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001440:	fa92 f2a2 	rbit	r2, r2
 8001444:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001448:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800144c:	fab2 f282 	clz	r2, r2
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	f042 0220 	orr.w	r2, r2, #32
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	f002 021f 	and.w	r2, r2, #31
 800145c:	2101      	movs	r1, #1
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ab      	bne.n	80013c0 <HAL_RCC_OscConfig+0x284>
 8001468:	e003      	b.n	8001472 <HAL_RCC_OscConfig+0x336>
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 817d 	beq.w	8001782 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001488:	4ba6      	ldr	r3, [pc, #664]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001494:	4ba3      	ldr	r3, [pc, #652]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d172      	bne.n	8001586 <HAL_RCC_OscConfig+0x44a>
 80014a0:	4ba0      	ldr	r3, [pc, #640]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d16c      	bne.n	8001586 <HAL_RCC_OscConfig+0x44a>
 80014ac:	2302      	movs	r3, #2
 80014ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80014be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	095b      	lsrs	r3, r3, #5
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d102      	bne.n	80014dc <HAL_RCC_OscConfig+0x3a0>
 80014d6:	4b93      	ldr	r3, [pc, #588]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	e013      	b.n	8001504 <HAL_RCC_OscConfig+0x3c8>
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001500:	4b88      	ldr	r3, [pc, #544]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	2202      	movs	r2, #2
 8001506:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800150a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800150e:	fa92 f2a2 	rbit	r2, r2
 8001512:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001516:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800151a:	fab2 f282 	clz	r2, r2
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	f042 0220 	orr.w	r2, r2, #32
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	f002 021f 	and.w	r2, r2, #31
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <HAL_RCC_OscConfig+0x410>
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d002      	beq.n	800154c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	f000 be2e 	b.w	80021a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b75      	ldr	r3, [pc, #468]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001558:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	21f8      	movs	r1, #248	; 0xf8
 8001562:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800156a:	fa91 f1a1 	rbit	r1, r1
 800156e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001572:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001576:	fab1 f181 	clz	r1, r1
 800157a:	b2c9      	uxtb	r1, r1
 800157c:	408b      	lsls	r3, r1
 800157e:	4969      	ldr	r1, [pc, #420]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001584:	e0fd      	b.n	8001782 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8088 	beq.w	80016a8 <HAL_RCC_OscConfig+0x56c>
 8001598:	2301      	movs	r3, #1
 800159a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80015aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	461a      	mov	r2, r3
 80015c0:	2301      	movs	r3, #1
 80015c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff faf2 	bl	8000bac <HAL_GetTick>
 80015c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff faed 	bl	8000bac <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d902      	bls.n	80015e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	f000 bde2 	b.w	80021a8 <HAL_RCC_OscConfig+0x106c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80015f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d102      	bne.n	8001614 <HAL_RCC_OscConfig+0x4d8>
 800160e:	4b45      	ldr	r3, [pc, #276]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	e013      	b.n	800163c <HAL_RCC_OscConfig+0x500>
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800161e:	fa93 f3a3 	rbit	r3, r3
 8001622:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800162c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001638:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	2202      	movs	r2, #2
 800163e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001642:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001646:	fa92 f2a2 	rbit	r2, r2
 800164a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800164e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001652:	fab2 f282 	clz	r2, r2
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	f042 0220 	orr.w	r2, r2, #32
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	f002 021f 	and.w	r2, r2, #31
 8001662:	2101      	movs	r1, #1
 8001664:	fa01 f202 	lsl.w	r2, r1, r2
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0af      	beq.n	80015ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	21f8      	movs	r1, #248	; 0xf8
 8001684:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800168c:	fa91 f1a1 	rbit	r1, r1
 8001690:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001694:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001698:	fab1 f181 	clz	r1, r1
 800169c:	b2c9      	uxtb	r1, r1
 800169e:	408b      	lsls	r3, r1
 80016a0:	4920      	ldr	r1, [pc, #128]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
 80016a6:	e06c      	b.n	8001782 <HAL_RCC_OscConfig+0x646>
 80016a8:	2301      	movs	r3, #1
 80016aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80016ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	461a      	mov	r2, r3
 80016d0:	2300      	movs	r3, #0
 80016d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa6a 	bl	8000bac <HAL_GetTick>
 80016d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fa65 	bl	8000bac <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d902      	bls.n	80016f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	f000 bd5a 	b.w	80021a8 <HAL_RCC_OscConfig+0x106c>
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	095b      	lsrs	r3, r3, #5
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d104      	bne.n	8001728 <HAL_RCC_OscConfig+0x5ec>
 800171e:	4b01      	ldr	r3, [pc, #4]	; (8001724 <HAL_RCC_OscConfig+0x5e8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	e015      	b.n	8001750 <HAL_RCC_OscConfig+0x614>
 8001724:	40021000 	.word	0x40021000
 8001728:	2302      	movs	r3, #2
 800172a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800173a:	2302      	movs	r3, #2
 800173c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001740:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800174c:	4bc8      	ldr	r3, [pc, #800]	; (8001a70 <HAL_RCC_OscConfig+0x934>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2202      	movs	r2, #2
 8001752:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001756:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800175a:	fa92 f2a2 	rbit	r2, r2
 800175e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001762:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001766:	fab2 f282 	clz	r2, r2
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	f042 0220 	orr.w	r2, r2, #32
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	f002 021f 	and.w	r2, r2, #31
 8001776:	2101      	movs	r1, #1
 8001778:	fa01 f202 	lsl.w	r2, r1, r2
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ad      	bne.n	80016de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8110 	beq.w	80019b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d079      	beq.n	800189c <HAL_RCC_OscConfig+0x760>
 80017a8:	2301      	movs	r3, #1
 80017aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80017ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	4bab      	ldr	r3, [pc, #684]	; (8001a74 <HAL_RCC_OscConfig+0x938>)
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	461a      	mov	r2, r3
 80017ce:	2301      	movs	r3, #1
 80017d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d2:	f7ff f9eb 	bl	8000bac <HAL_GetTick>
 80017d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff f9e6 	bl	8000bac <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d902      	bls.n	80017f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	f000 bcdb 	b.w	80021a8 <HAL_RCC_OscConfig+0x106c>
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800180c:	2202      	movs	r2, #2
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001830:	2202      	movs	r2, #2
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fa93 f2a3 	rbit	r2, r3
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800184a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184c:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x934>)
 800184e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001854:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001858:	2102      	movs	r1, #2
 800185a:	6019      	str	r1, [r3, #0]
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	fa93 f1a3 	rbit	r1, r3
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001872:	6019      	str	r1, [r3, #0]
  return result;
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0a0      	beq.n	80017dc <HAL_RCC_OscConfig+0x6a0>
 800189a:	e08d      	b.n	80019b8 <HAL_RCC_OscConfig+0x87c>
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	fa93 f2a3 	rbit	r2, r3
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018be:	601a      	str	r2, [r3, #0]
  return result;
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <HAL_RCC_OscConfig+0x938>)
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	461a      	mov	r2, r3
 80018da:	2300      	movs	r3, #0
 80018dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff f965 	bl	8000bac <HAL_GetTick>
 80018e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff f960 	bl	8000bac <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d902      	bls.n	80018fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	f000 bc55 	b.w	80021a8 <HAL_RCC_OscConfig+0x106c>
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001906:	2202      	movs	r2, #2
 8001908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f2a3 	rbit	r2, r3
 8001918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800192a:	2202      	movs	r2, #2
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001968:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_RCC_OscConfig+0x934>)
 800196c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001976:	2102      	movs	r1, #2
 8001978:	6019      	str	r1, [r3, #0]
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f1a3 	rbit	r1, r3
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001990:	6019      	str	r1, [r3, #0]
  return result;
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d197      	bne.n	80018e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 81a1 	beq.w	8001d10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_RCC_OscConfig+0x934>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d116      	bne.n	8001a0e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_RCC_OscConfig+0x934>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_RCC_OscConfig+0x934>)
 80019e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ea:	61d3      	str	r3, [r2, #28]
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_OscConfig+0x934>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001a06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x93c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11a      	bne.n	8001a50 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_RCC_OscConfig+0x93c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <HAL_RCC_OscConfig+0x93c>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a26:	f7ff f8c1 	bl	8000bac <HAL_GetTick>
 8001a2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2e:	e009      	b.n	8001a44 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a30:	f7ff f8bc 	bl	8000bac <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e3b1      	b.n	80021a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_RCC_OscConfig+0x93c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0ef      	beq.n	8001a30 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10d      	bne.n	8001a7c <HAL_RCC_OscConfig+0x940>
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_OscConfig+0x934>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a02      	ldr	r2, [pc, #8]	; (8001a70 <HAL_RCC_OscConfig+0x934>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6213      	str	r3, [r2, #32]
 8001a6c:	e03c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x9ac>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	10908120 	.word	0x10908120
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x96a>
 8001a8c:	4bc1      	ldr	r3, [pc, #772]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4ac0      	ldr	r2, [pc, #768]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	4bbe      	ldr	r3, [pc, #760]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4abd      	ldr	r2, [pc, #756]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001a9e:	f023 0304 	bic.w	r3, r3, #4
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	e020      	b.n	8001ae8 <HAL_RCC_OscConfig+0x9ac>
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x994>
 8001ab6:	4bb7      	ldr	r3, [pc, #732]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4ab6      	ldr	r2, [pc, #728]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	4bb4      	ldr	r3, [pc, #720]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4ab3      	ldr	r2, [pc, #716]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x9ac>
 8001ad0:	4bb0      	ldr	r3, [pc, #704]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4aaf      	ldr	r2, [pc, #700]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	4bad      	ldr	r3, [pc, #692]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4aac      	ldr	r2, [pc, #688]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001ae2:	f023 0304 	bic.w	r3, r3, #4
 8001ae6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8081 	beq.w	8001bfc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f857 	bl	8000bac <HAL_GetTick>
 8001afe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff f852 	bl	8000bac <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e345      	b.n	80021a8 <HAL_RCC_OscConfig+0x106c>
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b48:	2202      	movs	r2, #2
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b62:	601a      	str	r2, [r3, #0]
  return result;
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d102      	bne.n	8001b88 <HAL_RCC_OscConfig+0xa4c>
 8001b82:	4b84      	ldr	r3, [pc, #528]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	e013      	b.n	8001bb0 <HAL_RCC_OscConfig+0xa74>
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b90:	2202      	movs	r2, #2
 8001b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	4b79      	ldr	r3, [pc, #484]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001bb8:	2102      	movs	r1, #2
 8001bba:	6011      	str	r1, [r2, #0]
 8001bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	fa92 f1a2 	rbit	r1, r2
 8001bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bd2:	6011      	str	r1, [r2, #0]
  return result;
 8001bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f002 021f 	and.w	r2, r2, #31
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d084      	beq.n	8001b04 <HAL_RCC_OscConfig+0x9c8>
 8001bfa:	e07f      	b.n	8001cfc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7fe ffd6 	bl	8000bac <HAL_GetTick>
 8001c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c04:	e00b      	b.n	8001c1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7fe ffd1 	bl	8000bac <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e2c4      	b.n	80021a8 <HAL_RCC_OscConfig+0x106c>
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001c26:	2202      	movs	r2, #2
 8001c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c64:	601a      	str	r2, [r3, #0]
  return result;
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_OscConfig+0xb4e>
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	e013      	b.n	8001cb2 <HAL_RCC_OscConfig+0xb76>
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c92:	2202      	movs	r2, #2
 8001c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001cba:	2102      	movs	r1, #2
 8001cbc:	6011      	str	r1, [r2, #0]
 8001cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	fa92 f1a2 	rbit	r1, r2
 8001ccc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cd4:	6011      	str	r1, [r2, #0]
  return result;
 8001cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cda:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	fab2 f282 	clz	r2, r2
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f002 021f 	and.w	r2, r2, #31
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d184      	bne.n	8001c06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cfc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8242 	beq.w	80021a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <HAL_RCC_OscConfig+0xc58>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	f000 8213 	beq.w	8002156 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	f040 8162 	bne.w	8002006 <HAL_RCC_OscConfig+0xeca>
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001d4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	461a      	mov	r2, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe ff10 	bl	8000bac <HAL_GetTick>
 8001d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e00c      	b.n	8001dac <HAL_RCC_OscConfig+0xc70>
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe ff08 	bl	8000bac <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1fd      	b.n	80021a8 <HAL_RCC_OscConfig+0x106c>
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dd0:	601a      	str	r2, [r3, #0]
  return result;
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_OscConfig+0xcba>
 8001df0:	4bb0      	ldr	r3, [pc, #704]	; (80020b4 <HAL_RCC_OscConfig+0xf78>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	e027      	b.n	8001e46 <HAL_RCC_OscConfig+0xd0a>
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	fa93 f2a3 	rbit	r2, r3
 8001e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	4b9c      	ldr	r3, [pc, #624]	; (80020b4 <HAL_RCC_OscConfig+0xf78>)
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001e4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e52:	6011      	str	r1, [r2, #0]
 8001e54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	fa92 f1a2 	rbit	r1, r2
 8001e62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e6a:	6011      	str	r1, [r2, #0]
  return result;
 8001e6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	fab2 f282 	clz	r2, r2
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	f042 0220 	orr.w	r2, r2, #32
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	f002 021f 	and.w	r2, r2, #31
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d182      	bne.n	8001d98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e92:	4b88      	ldr	r3, [pc, #544]	; (80020b4 <HAL_RCC_OscConfig+0xf78>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	497f      	ldr	r1, [pc, #508]	; (80020b4 <HAL_RCC_OscConfig+0xf78>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ec2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	fa93 f2a3 	rbit	r2, r3
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ede:	601a      	str	r2, [r3, #0]
  return result;
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ee8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	461a      	mov	r2, r3
 8001efc:	2301      	movs	r3, #1
 8001efe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7fe fe54 	bl	8000bac <HAL_GetTick>
 8001f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f08:	e009      	b.n	8001f1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7fe fe4f 	bl	8000bac <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e144      	b.n	80021a8 <HAL_RCC_OscConfig+0x106c>
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f42:	601a      	str	r2, [r3, #0]
  return result;
 8001f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe2c>
 8001f62:	4b54      	ldr	r3, [pc, #336]	; (80020b4 <HAL_RCC_OscConfig+0xf78>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	e027      	b.n	8001fb8 <HAL_RCC_OscConfig+0xe7c>
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	fa93 f2a3 	rbit	r2, r3
 8001faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_OscConfig+0xf78>)
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fbc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001fc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fc4:	6011      	str	r1, [r2, #0]
 8001fc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	fa92 f1a2 	rbit	r1, r2
 8001fd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001fdc:	6011      	str	r1, [r2, #0]
  return result;
 8001fde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fe2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	fab2 f282 	clz	r2, r2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	f002 021f 	and.w	r2, r2, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d082      	beq.n	8001f0a <HAL_RCC_OscConfig+0xdce>
 8002004:	e0cf      	b.n	80021a6 <HAL_RCC_OscConfig+0x106a>
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800200e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	fa93 f2a3 	rbit	r2, r3
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800202a:	601a      	str	r2, [r3, #0]
  return result;
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002034:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002040:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	461a      	mov	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fdae 	bl	8000bac <HAL_GetTick>
 8002050:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002054:	e009      	b.n	800206a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002056:	f7fe fda9 	bl	8000bac <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e09e      	b.n	80021a8 <HAL_RCC_OscConfig+0x106c>
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	fa93 f2a3 	rbit	r2, r3
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800208e:	601a      	str	r2, [r3, #0]
  return result;
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002098:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d104      	bne.n	80020b8 <HAL_RCC_OscConfig+0xf7c>
 80020ae:	4b01      	ldr	r3, [pc, #4]	; (80020b4 <HAL_RCC_OscConfig+0xf78>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	e029      	b.n	8002108 <HAL_RCC_OscConfig+0xfcc>
 80020b4:	40021000 	.word	0x40021000
 80020b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	fa93 f2a3 	rbit	r2, r3
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80020e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	fa93 f2a3 	rbit	r2, r3
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_OscConfig+0x1078>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800210c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002110:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002114:	6011      	str	r1, [r2, #0]
 8002116:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800211a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	fa92 f1a2 	rbit	r1, r2
 8002124:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002128:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800212c:	6011      	str	r1, [r2, #0]
  return result;
 800212e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002132:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	fab2 f282 	clz	r2, r2
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f042 0220 	orr.w	r2, r2, #32
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f002 021f 	and.w	r2, r2, #31
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d180      	bne.n	8002056 <HAL_RCC_OscConfig+0xf1a>
 8002154:	e027      	b.n	80021a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e01e      	b.n	80021a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_OscConfig+0x1078>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002172:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002176:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	429a      	cmp	r2, r3
 8002188:	d10b      	bne.n	80021a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800218a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800218e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b09e      	sub	sp, #120	; 0x78
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e162      	b.n	8002496 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d0:	4b90      	ldr	r3, [pc, #576]	; (8002414 <HAL_RCC_ClockConfig+0x25c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d910      	bls.n	8002200 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b8d      	ldr	r3, [pc, #564]	; (8002414 <HAL_RCC_ClockConfig+0x25c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 0207 	bic.w	r2, r3, #7
 80021e6:	498b      	ldr	r1, [pc, #556]	; (8002414 <HAL_RCC_ClockConfig+0x25c>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b89      	ldr	r3, [pc, #548]	; (8002414 <HAL_RCC_ClockConfig+0x25c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e14a      	b.n	8002496 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b82      	ldr	r3, [pc, #520]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	497f      	ldr	r1, [pc, #508]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80dc 	beq.w	80023e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d13c      	bne.n	80022ae <HAL_RCC_ClockConfig+0xf6>
 8002234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002238:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d102      	bne.n	800225e <HAL_RCC_ClockConfig+0xa6>
 8002258:	4b6f      	ldr	r3, [pc, #444]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	e00f      	b.n	800227e <HAL_RCC_ClockConfig+0xc6>
 800225e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002262:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	667b      	str	r3, [r7, #100]	; 0x64
 800226c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002270:	663b      	str	r3, [r7, #96]	; 0x60
 8002272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800227a:	4b67      	ldr	r3, [pc, #412]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002282:	65ba      	str	r2, [r7, #88]	; 0x58
 8002284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002286:	fa92 f2a2 	rbit	r2, r2
 800228a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800228c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800228e:	fab2 f282 	clz	r2, r2
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f042 0220 	orr.w	r2, r2, #32
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f002 021f 	and.w	r2, r2, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f202 	lsl.w	r2, r1, r2
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d17b      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0f3      	b.n	8002496 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d13c      	bne.n	8002330 <HAL_RCC_ClockConfig+0x178>
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x128>
 80022da:	4b4f      	ldr	r3, [pc, #316]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	e00f      	b.n	8002300 <HAL_RCC_ClockConfig+0x148>
 80022e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	647b      	str	r3, [r7, #68]	; 0x44
 80022ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f2:	643b      	str	r3, [r7, #64]	; 0x40
 80022f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fc:	4b46      	ldr	r3, [pc, #280]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002304:	63ba      	str	r2, [r7, #56]	; 0x38
 8002306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002308:	fa92 f2a2 	rbit	r2, r2
 800230c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800230e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d13a      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0b2      	b.n	8002496 <HAL_RCC_ClockConfig+0x2de>
 8002330:	2302      	movs	r3, #2
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d102      	bne.n	8002358 <HAL_RCC_ClockConfig+0x1a0>
 8002352:	4b31      	ldr	r3, [pc, #196]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	e00d      	b.n	8002374 <HAL_RCC_ClockConfig+0x1bc>
 8002358:	2302      	movs	r3, #2
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	4b29      	ldr	r3, [pc, #164]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	2202      	movs	r2, #2
 8002376:	61ba      	str	r2, [r7, #24]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	fa92 f2a2 	rbit	r2, r2
 800237e:	617a      	str	r2, [r7, #20]
  return result;
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	fab2 f282 	clz	r2, r2
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f042 0220 	orr.w	r2, r2, #32
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f002 021f 	and.w	r2, r2, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e079      	b.n	8002496 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	491a      	ldr	r1, [pc, #104]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b4:	f7fe fbfa 	bl	8000bac <HAL_GetTick>
 80023b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7fe fbf6 	bl	8000bac <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e061      	b.n	8002496 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_RCC_ClockConfig+0x260>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 020c 	and.w	r2, r3, #12
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1eb      	bne.n	80023bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x25c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d214      	bcs.n	800241c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_RCC_ClockConfig+0x25c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4906      	ldr	r1, [pc, #24]	; (8002414 <HAL_RCC_ClockConfig+0x25c>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_RCC_ClockConfig+0x25c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e040      	b.n	8002496 <HAL_RCC_ClockConfig+0x2de>
 8002414:	40022000 	.word	0x40022000
 8002418:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_ClockConfig+0x2e8>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	491a      	ldr	r1, [pc, #104]	; (80024a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4912      	ldr	r1, [pc, #72]	; (80024a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800245a:	f000 f829 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800245e:	4601      	mov	r1, r0
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002468:	22f0      	movs	r2, #240	; 0xf0
 800246a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	fa92 f2a2 	rbit	r2, r2
 8002472:	60fa      	str	r2, [r7, #12]
  return result;
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	fab2 f282 	clz	r2, r2
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	40d3      	lsrs	r3, r2
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x2ec>)
 8002480:	5cd3      	ldrb	r3, [r2, r3]
 8002482:	fa21 f303 	lsr.w	r3, r1, r3
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_RCC_ClockConfig+0x2f0>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_RCC_ClockConfig+0x2f4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fb48 	bl	8000b24 <HAL_InitTick>
  
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3778      	adds	r7, #120	; 0x78
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	080025f4 	.word	0x080025f4
 80024a8:	2000000c 	.word	0x2000000c
 80024ac:	20000010 	.word	0x20000010

080024b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b08b      	sub	sp, #44	; 0x2c
 80024b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80024ca:	4b29      	ldr	r3, [pc, #164]	; (8002570 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d002      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x30>
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x36>
 80024de:	e03c      	b.n	800255a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024e2:	623b      	str	r3, [r7, #32]
      break;
 80024e4:	e03c      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	fa92 f2a2 	rbit	r2, r2
 80024f8:	607a      	str	r2, [r7, #4]
  return result;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	fab2 f282 	clz	r2, r2
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	40d3      	lsrs	r3, r2
 8002504:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_GetSysClockFreq+0xc0>)
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	220f      	movs	r2, #15
 8002514:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	fa92 f2a2 	rbit	r2, r2
 800251c:	60fa      	str	r2, [r7, #12]
  return result;
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	fab2 f282 	clz	r2, r2
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	40d3      	lsrs	r3, r2
 8002528:	4a14      	ldr	r2, [pc, #80]	; (800257c <HAL_RCC_GetSysClockFreq+0xcc>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <HAL_RCC_GetSysClockFreq+0xc4>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
 8002548:	e004      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <HAL_RCC_GetSysClockFreq+0xd0>)
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	623b      	str	r3, [r7, #32]
      break;
 8002558:	e002      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetSysClockFreq+0xc4>)
 800255c:	623b      	str	r3, [r7, #32]
      break;
 800255e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002560:	6a3b      	ldr	r3, [r7, #32]
}
 8002562:	4618      	mov	r0, r3
 8002564:	372c      	adds	r7, #44	; 0x2c
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	007a1200 	.word	0x007a1200
 8002578:	08002604 	.word	0x08002604
 800257c:	08002614 	.word	0x08002614
 8002580:	003d0900 	.word	0x003d0900

08002584 <memset>:
 8002584:	4402      	add	r2, r0
 8002586:	4603      	mov	r3, r0
 8002588:	4293      	cmp	r3, r2
 800258a:	d100      	bne.n	800258e <memset+0xa>
 800258c:	4770      	bx	lr
 800258e:	f803 1b01 	strb.w	r1, [r3], #1
 8002592:	e7f9      	b.n	8002588 <memset+0x4>

08002594 <__libc_init_array>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	4d0d      	ldr	r5, [pc, #52]	; (80025cc <__libc_init_array+0x38>)
 8002598:	4c0d      	ldr	r4, [pc, #52]	; (80025d0 <__libc_init_array+0x3c>)
 800259a:	1b64      	subs	r4, r4, r5
 800259c:	10a4      	asrs	r4, r4, #2
 800259e:	2600      	movs	r6, #0
 80025a0:	42a6      	cmp	r6, r4
 80025a2:	d109      	bne.n	80025b8 <__libc_init_array+0x24>
 80025a4:	4d0b      	ldr	r5, [pc, #44]	; (80025d4 <__libc_init_array+0x40>)
 80025a6:	4c0c      	ldr	r4, [pc, #48]	; (80025d8 <__libc_init_array+0x44>)
 80025a8:	f000 f818 	bl	80025dc <_init>
 80025ac:	1b64      	subs	r4, r4, r5
 80025ae:	10a4      	asrs	r4, r4, #2
 80025b0:	2600      	movs	r6, #0
 80025b2:	42a6      	cmp	r6, r4
 80025b4:	d105      	bne.n	80025c2 <__libc_init_array+0x2e>
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
 80025b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025bc:	4798      	blx	r3
 80025be:	3601      	adds	r6, #1
 80025c0:	e7ee      	b.n	80025a0 <__libc_init_array+0xc>
 80025c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c6:	4798      	blx	r3
 80025c8:	3601      	adds	r6, #1
 80025ca:	e7f2      	b.n	80025b2 <__libc_init_array+0x1e>
 80025cc:	08002624 	.word	0x08002624
 80025d0:	08002624 	.word	0x08002624
 80025d4:	08002624 	.word	0x08002624
 80025d8:	08002628 	.word	0x08002628

080025dc <_init>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	bf00      	nop
 80025e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e2:	bc08      	pop	{r3}
 80025e4:	469e      	mov	lr, r3
 80025e6:	4770      	bx	lr

080025e8 <_fini>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	bf00      	nop
 80025ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ee:	bc08      	pop	{r3}
 80025f0:	469e      	mov	lr, r3
 80025f2:	4770      	bx	lr
