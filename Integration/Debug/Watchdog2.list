
Watchdog2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce0  08004ce0  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08004ce0  08004ce0  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ce0  08004ce0  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08004ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e4  2**0
                  CONTENTS
 10 .bss          000001d8  200000e4  200000e4  000200e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  000200e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 14 .debug_info   000093e0  00000000  00000000  00020157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dc7  00000000  00000000  00029537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007c8  00000000  00000000  0002b300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005c3  00000000  00000000  0002bac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001dd49  00000000  00000000  0002c08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b418  00000000  00000000  00049dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b186d  00000000  00000000  000551ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000225c  00000000  00000000  00106a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00108cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c5c 	.word	0x08004c5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	08004c5c 	.word	0x08004c5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <game_over>:
void SystemClock_Config(void);
void MX_GPIO_Init(void);
void MX_ADC2_Init(void);
*/

void game_over(void){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	end_game = 1;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <game_over+0x14>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	20000101 	.word	0x20000101

08000288 <valid_input>:

void valid_input(void){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	can_score = 1;
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <valid_input+0x14>)
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	20000004 	.word	0x20000004

080002a0 <reset_multiplier>:

void reset_multiplier(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	multiplier = 1;
 80002a4:	4b03      	ldr	r3, [pc, #12]	; (80002b4 <reset_multiplier+0x14>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	801a      	strh	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	20000002 	.word	0x20000002

080002b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1){
 80002c2:	88fb      	ldrh	r3, [r7, #6]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d102      	bne.n	80002ce <HAL_GPIO_EXTI_Callback+0x16>
		multi_trigger = SET;
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <HAL_GPIO_EXTI_Callback+0x30>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_2){
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	2b04      	cmp	r3, #4
 80002d2:	d102      	bne.n	80002da <HAL_GPIO_EXTI_Callback+0x22>
		game_state = 1;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <HAL_GPIO_EXTI_Callback+0x34>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	801a      	strh	r2, [r3, #0]
	}
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000100 	.word	0x20000100
 80002ec:	20000106 	.word	0x20000106

080002f0 <main>:


int main(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002f4:	f000 fdc8 	bl	8000e88 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80002f8:	f000 f87e 	bl	80003f8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_SETUP();
 80002fc:	f000 fa63 	bl	80007c6 <MX_SETUP>
	START_ADC();
 8000300:	f000 f86c 	bl	80003dc <START_ADC>
	enable_clocks();
 8000304:	f000 fbfe 	bl	8000b04 <enable_clocks>
	enable_interrupts();
 8000308:	f000 fc1e 	bl	8000b48 <enable_interrupts>

	//Debugging
	//SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);

	while (game_state == 0){
 800030c:	bf00      	nop
 800030e:	4b27      	ldr	r3, [pc, #156]	; (80003ac <main+0xbc>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0fb      	beq.n	800030e <main+0x1e>
	}

	game_timer(&game_over, 60000); //Duration in milliseconds
 8000316:	f64e 2160 	movw	r1, #60000	; 0xea60
 800031a:	4825      	ldr	r0, [pc, #148]	; (80003b0 <main+0xc0>)
 800031c:	f000 fd54 	bl	8000dc8 <game_timer>

	while (game_state == 1){
 8000320:	e03d      	b.n	800039e <main+0xae>

		if (multi_trigger == SET){
 8000322:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <main+0xc4>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d10a      	bne.n	8000340 <main+0x50>

			//Set current multiplier to 5
			multiplier = 5;
 800032a:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <main+0xc8>)
 800032c:	2205      	movs	r2, #5
 800032e:	801a      	strh	r2, [r3, #0]

			//Set timer to reset multiplier to 1
			multi_timer(&reset_multiplier, 5000);
 8000330:	f241 3188 	movw	r1, #5000	; 0x1388
 8000334:	4821      	ldr	r0, [pc, #132]	; (80003bc <main+0xcc>)
 8000336:	f000 fceb 	bl	8000d10 <multi_timer>
			multi_trigger = RESET;
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <main+0xc4>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]




		//Point Scoring Logic
		if (ubAnalogWatchdogStatus == SET){
 8000340:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <main+0xd0>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b01      	cmp	r3, #1
 8000348:	d119      	bne.n	800037e <main+0x8e>

			if(can_score == 1){
 800034a:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <main+0xd4>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d115      	bne.n	800037e <main+0x8e>
				score_timer(&valid_input, 200);
 8000352:	21c8      	movs	r1, #200	; 0xc8
 8000354:	481c      	ldr	r0, [pc, #112]	; (80003c8 <main+0xd8>)
 8000356:	f000 fd09 	bl	8000d6c <score_timer>
				start_timer();
 800035a:	f000 fc65 	bl	8000c28 <start_timer>
				can_score = 0;
 800035e:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <main+0xd4>)
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
				score += point_val_1 * multiplier;
 8000364:	4b19      	ldr	r3, [pc, #100]	; (80003cc <main+0xdc>)
 8000366:	881a      	ldrh	r2, [r3, #0]
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <main+0xc8>)
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	fb12 f303 	smulbb	r3, r2, r3
 8000370:	b29a      	uxth	r2, r3
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <main+0xe0>)
 8000374:	881b      	ldrh	r3, [r3, #0]
 8000376:	4413      	add	r3, r2
 8000378:	b29a      	uxth	r2, r3
 800037a:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <main+0xe0>)
 800037c:	801a      	strh	r2, [r3, #0]
			}
		}
		//prevWDS = 0;

		//Clear flag
		ubAnalogWatchdogStatus = RESET;
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <main+0xd0>)
 8000380:	2200      	movs	r2, #0
 8000382:	701a      	strb	r2, [r3, #0]




	    game_time = get_game_time();
 8000384:	f000 fcb4 	bl	8000cf0 <get_game_time>
 8000388:	4603      	mov	r3, r0
 800038a:	b29a      	uxth	r2, r3
 800038c:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <main+0xe4>)
 800038e:	801a      	strh	r2, [r3, #0]

		if (end_game == 1){
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <main+0xe8>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d102      	bne.n	800039e <main+0xae>
			game_state = 0;
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <main+0xbc>)
 800039a:	2200      	movs	r2, #0
 800039c:	801a      	strh	r2, [r3, #0]
	while (game_state == 1){
 800039e:	4b03      	ldr	r3, [pc, #12]	; (80003ac <main+0xbc>)
 80003a0:	881b      	ldrh	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d0bd      	beq.n	8000322 <main+0x32>
 80003a6:	2300      	movs	r3, #0
		}
	}
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000106 	.word	0x20000106
 80003b0:	08000271 	.word	0x08000271
 80003b4:	20000100 	.word	0x20000100
 80003b8:	20000002 	.word	0x20000002
 80003bc:	080002a1 	.word	0x080002a1
 80003c0:	20000108 	.word	0x20000108
 80003c4:	20000004 	.word	0x20000004
 80003c8:	08000289 	.word	0x08000289
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000102 	.word	0x20000102
 80003d4:	20000104 	.word	0x20000104
 80003d8:	20000101 	.word	0x20000101

080003dc <START_ADC>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC2_Init(void);


void START_ADC(void){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_IT(&hadc2) != HAL_OK){
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <START_ADC+0x18>)
 80003e2:	f000 ffab 	bl	800133c <HAL_ADC_Start_IT>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <START_ADC+0x14>
		Error_Handler();
 80003ec:	f000 f9e6 	bl	80007bc <Error_Handler>
	}
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	2000010c 	.word	0x2000010c

080003f8 <SystemClock_Config>:



void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b09e      	sub	sp, #120	; 0x78
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f003 ffa4 	bl	8004354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	463b      	mov	r3, r7
 800041e:	223c      	movs	r2, #60	; 0x3c
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f003 ff96 	bl	8004354 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	2310      	movs	r3, #16
 8000432:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000438:	2300      	movs	r3, #0
 800043a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800043c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000440:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000442:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000446:	4618      	mov	r0, r3
 8000448:	f002 fb90 	bl	8002b6c <HAL_RCC_OscConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000452:	f000 f9b3 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000456:	230f      	movs	r3, #15
 8000458:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045a:	2302      	movs	r3, #2
 800045c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800046c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000470:	2101      	movs	r1, #1
 8000472:	4618      	mov	r0, r3
 8000474:	f003 fbb8 	bl	8003be8 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800047e:	f000 f99d 	bl	80007bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000482:	2380      	movs	r3, #128	; 0x80
 8000484:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800048a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800048c:	463b      	mov	r3, r7
 800048e:	4618      	mov	r0, r3
 8000490:	f003 fd90 	bl	8003fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800049a:	f000 f98f 	bl	80007bc <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3778      	adds	r7, #120	; 0x78
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08c      	sub	sp, #48	; 0x30
 80004ac:	af00      	add	r7, sp, #0

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80004ae:	f107 0318 	add.w	r3, r7, #24
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]
 80004be:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004c0:	463b      	mov	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
 80004ce:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 80004d0:	4b33      	ldr	r3, [pc, #204]	; (80005a0 <MX_ADC2_Init+0xf8>)
 80004d2:	4a34      	ldr	r2, [pc, #208]	; (80005a4 <MX_ADC2_Init+0xfc>)
 80004d4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004d6:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <MX_ADC2_Init+0xf8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004dc:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <MX_ADC2_Init+0xf8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004e2:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <MX_ADC2_Init+0xf8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80004e8:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <MX_ADC2_Init+0xf8>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <MX_ADC2_Init+0xf8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <MX_ADC2_Init+0xf8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fc:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <MX_ADC2_Init+0xf8>)
 80004fe:	2201      	movs	r2, #1
 8000500:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <MX_ADC2_Init+0xf8>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <MX_ADC2_Init+0xf8>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800050e:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <MX_ADC2_Init+0xf8>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000516:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <MX_ADC2_Init+0xf8>)
 8000518:	2204      	movs	r2, #4
 800051a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <MX_ADC2_Init+0xf8>)
 800051e:	2200      	movs	r2, #0
 8000520:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_ADC2_Init+0xf8>)
 8000524:	2200      	movs	r2, #0
 8000526:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000528:	481d      	ldr	r0, [pc, #116]	; (80005a0 <MX_ADC2_Init+0xf8>)
 800052a:	f000 fd27 	bl	8000f7c <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000534:	f000 f942 	bl	80007bc <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000538:	2301      	movs	r3, #1
 800053a:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800053c:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000540:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.HighThreshold = 3000;
 8000542:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.LowThreshold = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.ITMode = ENABLE;
 8000550:	2301      	movs	r3, #1
 8000552:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	4619      	mov	r1, r3
 800055c:	4810      	ldr	r0, [pc, #64]	; (80005a0 <MX_ADC2_Init+0xf8>)
 800055e:	f001 fe33 	bl	80021c8 <HAL_ADC_AnalogWDGConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC2_Init+0xc4>
  {
    Error_Handler();
 8000568:	f000 f928 	bl	80007bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800056c:	2301      	movs	r3, #1
 800056e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000570:	2301      	movs	r3, #1
 8000572:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000578:	2307      	movs	r3, #7
 800057a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_ADC2_Init+0xf8>)
 800058a:	f001 fb33 	bl	8001bf4 <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8000594:	f000 f912 	bl	80007bc <Error_Handler>
  }
}
 8000598:	bf00      	nop
 800059a:	3730      	adds	r7, #48	; 0x30
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000010c 	.word	0x2000010c
 80005a4:	50000100 	.word	0x50000100

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005be:	4b67      	ldr	r3, [pc, #412]	; (800075c <MX_GPIO_Init+0x1b4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a66      	ldr	r2, [pc, #408]	; (800075c <MX_GPIO_Init+0x1b4>)
 80005c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b64      	ldr	r3, [pc, #400]	; (800075c <MX_GPIO_Init+0x1b4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	4b61      	ldr	r3, [pc, #388]	; (800075c <MX_GPIO_Init+0x1b4>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a60      	ldr	r2, [pc, #384]	; (800075c <MX_GPIO_Init+0x1b4>)
 80005dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b5e      	ldr	r3, [pc, #376]	; (800075c <MX_GPIO_Init+0x1b4>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b5b      	ldr	r3, [pc, #364]	; (800075c <MX_GPIO_Init+0x1b4>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a5a      	ldr	r2, [pc, #360]	; (800075c <MX_GPIO_Init+0x1b4>)
 80005f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b58      	ldr	r3, [pc, #352]	; (800075c <MX_GPIO_Init+0x1b4>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <MX_GPIO_Init+0x1b4>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a54      	ldr	r2, [pc, #336]	; (800075c <MX_GPIO_Init+0x1b4>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b52      	ldr	r3, [pc, #328]	; (800075c <MX_GPIO_Init+0x1b4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b4f      	ldr	r3, [pc, #316]	; (800075c <MX_GPIO_Init+0x1b4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a4e      	ldr	r2, [pc, #312]	; (800075c <MX_GPIO_Init+0x1b4>)
 8000624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b4c      	ldr	r3, [pc, #304]	; (800075c <MX_GPIO_Init+0x1b4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000636:	2200      	movs	r2, #0
 8000638:	f64f 7108 	movw	r1, #65288	; 0xff08
 800063c:	4848      	ldr	r0, [pc, #288]	; (8000760 <MX_GPIO_Init+0x1b8>)
 800063e:	f002 fa65 	bl	8002b0c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000642:	2337      	movs	r3, #55	; 0x37
 8000644:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000646:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4842      	ldr	r0, [pc, #264]	; (8000760 <MX_GPIO_Init+0x1b8>)
 8000658:	f002 f8de 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800065c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000660:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	483a      	ldr	r0, [pc, #232]	; (8000760 <MX_GPIO_Init+0x1b8>)
 8000676:	f002 f8cf 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin PA1 */
  GPIO_InitStruct.Pin = B1_Pin;
 800067a:	2301      	movs	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f002 f8c2 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000694:	23e0      	movs	r3, #224	; 0xe0
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006a4:	2305      	movs	r3, #5
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b2:	f002 f8b1 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006b6:	2302      	movs	r3, #2
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f002 f8a3 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d2:	2304      	movs	r3, #4
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f002 f895 	bl	8002818 <HAL_GPIO_Init>


  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80006ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000700:	230e      	movs	r3, #14
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f002 f883 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000712:	23c0      	movs	r3, #192	; 0xc0
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000716:	2312      	movs	r3, #18
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000722:	2304      	movs	r3, #4
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_GPIO_Init+0x1bc>)
 800072e:	f002 f873 	bl	8002818 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2007      	movs	r0, #7
 8000738:	f002 f837 	bl	80027aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800073c:	2007      	movs	r0, #7
 800073e:	f002 f850 	bl	80027e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2008      	movs	r0, #8
 8000748:	f002 f82f 	bl	80027aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800074c:	2008      	movs	r0, #8
 800074e:	f002 f848 	bl	80027e2 <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000
 8000760:	48001000 	.word	0x48001000
 8000764:	48000400 	.word	0x48000400

08000768 <HAL_ADC_LevelOutOfWindowCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uhADCxConvertedValue = HAL_ADC_GetValue(&hadc2);
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <HAL_ADC_LevelOutOfWindowCallback+0x3c>)
 8000772:	f000 ff23 	bl	80015bc <HAL_ADC_GetValue>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_ADC_LevelOutOfWindowCallback+0x40>)
 800077c:	801a      	strh	r2, [r3, #0]
  ubAnalogWatchdogStatus = SET;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_ADC_LevelOutOfWindowCallback+0x44>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
  sprintf(string_to_send, "%hu\r\n", uhADCxConvertedValue);
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_ADC_LevelOutOfWindowCallback+0x40>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	461a      	mov	r2, r3
 800078c:	4908      	ldr	r1, [pc, #32]	; (80007b0 <HAL_ADC_LevelOutOfWindowCallback+0x48>)
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <HAL_ADC_LevelOutOfWindowCallback+0x4c>)
 8000790:	f003 fdc0 	bl	8004314 <siprintf>
  SerialOutputString(string_to_send, &USART1_PORT);
 8000794:	4908      	ldr	r1, [pc, #32]	; (80007b8 <HAL_ADC_LevelOutOfWindowCallback+0x50>)
 8000796:	4807      	ldr	r0, [pc, #28]	; (80007b4 <HAL_ADC_LevelOutOfWindowCallback+0x4c>)
 8000798:	f000 f836 	bl	8000808 <SerialOutputString>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000010c 	.word	0x2000010c
 80007a8:	2000015c 	.word	0x2000015c
 80007ac:	20000108 	.word	0x20000108
 80007b0:	08004c74 	.word	0x08004c74
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000048 	.word	0x20000048

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>

080007c6 <MX_SETUP>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void MX_SETUP(void){
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80007ca:	f7ff feed 	bl	80005a8 <MX_GPIO_Init>
	MX_ADC2_Init();
 80007ce:	f7ff fe6b 	bl	80004a8 <MX_ADC2_Init>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <SerialOutputChar>:
	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
}


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	6039      	str	r1, [r7, #0]
 80007e0:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 80007e2:	bf00      	nop
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f8      	beq.n	80007e4 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	79fa      	ldrb	r2, [r7, #7]
 80007f8:	b292      	uxth	r2, r2
 80007fa:	801a      	strh	r2, [r3, #0]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000816:	e00b      	b.n	8000830 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	6839      	ldr	r1, [r7, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ffd9 	bl	80007d6 <SerialOutputChar>
		counter++;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3301      	adds	r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
		pt++;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3301      	adds	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1ef      	bne.n	8000818 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	4798      	blx	r3
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000886:	2007      	movs	r0, #7
 8000888:	f001 ff84 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a19      	ldr	r2, [pc, #100]	; (800091c <HAL_ADC_MspInit+0x84>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d12c      	bne.n	8000914 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_ADC_MspInit+0x88>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <HAL_ADC_MspInit+0x88>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <HAL_ADC_MspInit+0x88>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <HAL_ADC_MspInit+0x88>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <HAL_ADC_MspInit+0x88>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_ADC_MspInit+0x88>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008ea:	2310      	movs	r3, #16
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ee:	2303      	movs	r3, #3
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f001 ff8a 	bl	8002818 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2012      	movs	r0, #18
 800090a:	f001 ff4e 	bl	80027aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800090e:	2012      	movs	r0, #18
 8000910:	f001 ff67 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	50000100 	.word	0x50000100
 8000920:	40021000 	.word	0x40021000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 fad0 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <ADC1_2_IRQHandler+0x10>)
 800097e:	f000 fe2b 	bl	80015d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000010c 	.word	0x2000010c

0800098c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000990:	2002      	movs	r0, #2
 8000992:	f002 f8d3 	bl	8002b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}

0800099a <EXTI2_TSC_IRQHandler>:

void EXTI2_TSC_IRQHandler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800099e:	2004      	movs	r0, #4
 80009a0:	f002 f8cc 	bl	8002b3c <HAL_GPIO_EXTI_IRQHandler>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <_sbrk+0x5c>)
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <_sbrk+0x60>)
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <_sbrk+0x64>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <_sbrk+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d207      	bcs.n	80009e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d8:	f003 fcc4 	bl	8004364 <__errno>
 80009dc:	4603      	mov	r3, r0
 80009de:	220c      	movs	r2, #12
 80009e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e009      	b.n	80009fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <_sbrk+0x64>)
 80009f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000a000 	.word	0x2000a000
 8000a08:	00000400 	.word	0x00000400
 8000a0c:	20000160 	.word	0x20000160
 8000a10:	200002c0 	.word	0x200002c0

08000a14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <__NVIC_EnableIRQ+0x38>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0c      	blt.n	8000aa0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	; (8000aac <__NVIC_ClearPendingIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	3360      	adds	r3, #96	; 0x60
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <enable_clocks>:
#include "stm32f303xc.h"
#include "timers.h"

//Flags

void enable_clocks(){
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <enable_clocks+0x40>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <enable_clocks+0x40>)
 8000b0e:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000b12:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <enable_clocks+0x40>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <enable_clocks+0x40>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <enable_clocks+0x40>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <enable_clocks+0x40>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <enable_clocks+0x40>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <enable_clocks+0x40>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	61d3      	str	r3, [r2, #28]

}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <enable_interrupts>:
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
	*led_output_registers = 0x5555;
}

void enable_interrupts(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
	//disable interrupts while setting interrupts
	__disable_irq();

	//TIMER 2 SETUP
	TIM2->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
 8000b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8000b5e:	6013      	str	r3, [r2, #0]
	TIM2->EGR = TIM_EGR_UG;
 8000b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b64:	2201      	movs	r2, #1
 8000b66:	615a      	str	r2, [r3, #20]
	TIM2->SR &= ~TIM_SR_UIF;
 8000b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	f023 0301 	bic.w	r3, r3, #1
 8000b76:	6113      	str	r3, [r2, #16]
	TIM2->DIER |= TIM_DIER_UIE;
 8000b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	60d3      	str	r3, [r2, #12]

	//TIMER 2 INTERRUPT CONFIG
	NVIC_SetPriority(TIM2_IRQn, 2);
 8000b88:	2102      	movs	r1, #2
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	f7ff ff90 	bl	8000ab0 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(TIM2_IRQn);
 8000b90:	201c      	movs	r0, #28
 8000b92:	f7ff ff6f 	bl	8000a74 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000b96:	201c      	movs	r0, #28
 8000b98:	f7ff ff4e 	bl	8000a38 <__NVIC_EnableIRQ>

	//TIMER 3 SETUP
	TIM3->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <enable_interrupts+0xd8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <enable_interrupts+0xd8>)
 8000ba2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8000ba6:	6013      	str	r3, [r2, #0]
	TIM3->EGR = TIM_EGR_UG;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <enable_interrupts+0xd8>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~TIM_SR_UIF;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <enable_interrupts+0xd8>)
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <enable_interrupts+0xd8>)
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6113      	str	r3, [r2, #16]
	TIM3->DIER |= TIM_DIER_UIE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <enable_interrupts+0xd8>)
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <enable_interrupts+0xd8>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	60d3      	str	r3, [r2, #12]

	//TIMER 3 INTERRUPT CONFIG
	NVIC_SetPriority(TIM3_IRQn, 3);
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	201d      	movs	r0, #29
 8000bca:	f7ff ff71 	bl	8000ab0 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(TIM3_IRQn);
 8000bce:	201d      	movs	r0, #29
 8000bd0:	f7ff ff50 	bl	8000a74 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM3_IRQn);
 8000bd4:	201d      	movs	r0, #29
 8000bd6:	f7ff ff2f 	bl	8000a38 <__NVIC_EnableIRQ>

	//TIMER 4 SETUP
	TIM4->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <enable_interrupts+0xdc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <enable_interrupts+0xdc>)
 8000be0:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8000be4:	6013      	str	r3, [r2, #0]
	TIM4->EGR = TIM_EGR_UG;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <enable_interrupts+0xdc>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	615a      	str	r2, [r3, #20]
	TIM4->SR &= ~TIM_SR_UIF;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <enable_interrupts+0xdc>)
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <enable_interrupts+0xdc>)
 8000bf2:	f023 0301 	bic.w	r3, r3, #1
 8000bf6:	6113      	str	r3, [r2, #16]
	TIM4->DIER |= TIM_DIER_UIE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <enable_interrupts+0xdc>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <enable_interrupts+0xdc>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	60d3      	str	r3, [r2, #12]

	//TIMER 4 INTERRUPT CONFIG
	NVIC_SetPriority(TIM4_IRQn, 4);
 8000c04:	2104      	movs	r1, #4
 8000c06:	201e      	movs	r0, #30
 8000c08:	f7ff ff52 	bl	8000ab0 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(TIM4_IRQn);
 8000c0c:	201e      	movs	r0, #30
 8000c0e:	f7ff ff31 	bl	8000a74 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM4_IRQn);
 8000c12:	201e      	movs	r0, #30
 8000c14:	f7ff ff10 	bl	8000a38 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c18:	b662      	cpsie	i
}
 8000c1a:	bf00      	nop

	//re-enable interrupts.
	__enable_irq();

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40000400 	.word	0x40000400
 8000c24:	40000800 	.word	0x40000800

08000c28 <start_timer>:


void start_timer(){
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

	TIM3->EGR = TIM_EGR_UG;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <start_timer+0x28>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~TIM_SR_UIF;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <start_timer+0x28>)
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <start_timer+0x28>)
 8000c38:	f023 0301 	bic.w	r3, r3, #1
 8000c3c:	6113      	str	r3, [r2, #16]
	TIM3->CNT = 0x00;
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <start_timer+0x28>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40000400 	.word	0x40000400

08000c54 <TIM2_IRQHandler>:

void (*on_TIM3_reset)() = 0x00;

void (*on_TIM4_reset)() = 0x00;

void TIM2_IRQHandler(void){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c62:	f023 0301 	bic.w	r3, r3, #1
 8000c66:	6113      	str	r3, [r2, #16]

	if (on_TIM2_reset != 0x00){
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <TIM2_IRQHandler+0x38>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00a      	beq.n	8000c86 <TIM2_IRQHandler+0x32>
		on_TIM2_reset();
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <TIM2_IRQHandler+0x38>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4798      	blx	r3
		TIM2->CNT = 0x00;
 8000c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 = 0;
 8000c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
	}
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000164 	.word	0x20000164

08000c90 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <TIM3_IRQHandler+0x28>)
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <TIM3_IRQHandler+0x28>)
 8000c9a:	f023 0301 	bic.w	r3, r3, #1
 8000c9e:	6113      	str	r3, [r2, #16]

	if (on_TIM3_reset != 0x00){
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <TIM3_IRQHandler+0x2c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d005      	beq.n	8000cb4 <TIM3_IRQHandler+0x24>
		on_TIM3_reset();
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <TIM3_IRQHandler+0x2c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4798      	blx	r3
		TIM3->CNT = 0x00;
 8000cae:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <TIM3_IRQHandler+0x28>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40000400 	.word	0x40000400
 8000cbc:	20000168 	.word	0x20000168

08000cc0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <TIM4_IRQHandler+0x28>)
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <TIM4_IRQHandler+0x28>)
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	6113      	str	r3, [r2, #16]

    if(on_TIM4_reset != 0x00){
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <TIM4_IRQHandler+0x2c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d005      	beq.n	8000ce4 <TIM4_IRQHandler+0x24>
    	on_TIM4_reset();
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <TIM4_IRQHandler+0x2c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4798      	blx	r3
    	TIM4->CNT = 0x00;
 8000cde:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <TIM4_IRQHandler+0x28>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40000800 	.word	0x40000800
 8000cec:	2000016c 	.word	0x2000016c

08000cf0 <get_game_time>:


int get_game_time(){
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	return (TIM2->CNT)/1000;
 8000cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <get_game_time+0x1c>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	099b      	lsrs	r3, r3, #6
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	10624dd3 	.word	0x10624dd3

08000d10 <multi_timer>:

int get_multi_time(){
	return (TIM4->CNT)/1000;
}

void multi_timer(void (*func_ptr)(), int duration){
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	TIM4->ARR = duration;
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <multi_timer+0x54>)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CR1 |= TIM_CR1_CEN;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <multi_timer+0x54>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <multi_timer+0x54>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6013      	str	r3, [r2, #0]

	TIM4->PSC = 48000;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <multi_timer+0x54>)
 8000d2e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->EGR = TIM_EGR_UG;
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <multi_timer+0x54>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	615a      	str	r2, [r3, #20]
	TIM4->CNT = 0x00;
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <multi_timer+0x54>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->EGR = TIM_EGR_UG;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <multi_timer+0x54>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	615a      	str	r2, [r3, #20]
	TIM4->SR &= ~TIM_SR_UIF;
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <multi_timer+0x54>)
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <multi_timer+0x54>)
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	6113      	str	r3, [r2, #16]

	on_TIM4_reset = func_ptr;
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <multi_timer+0x58>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]

}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40000800 	.word	0x40000800
 8000d68:	2000016c 	.word	0x2000016c

08000d6c <score_timer>:

void score_timer(void (*func_ptr)(), int duration){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	TIM3->ARR = duration;
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <score_timer+0x54>)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->CR1 |= TIM_CR1_CEN;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <score_timer+0x54>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <score_timer+0x54>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6013      	str	r3, [r2, #0]

	TIM3->PSC = 48000;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <score_timer+0x54>)
 8000d8a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->EGR = TIM_EGR_UG;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <score_timer+0x54>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	615a      	str	r2, [r3, #20]
	TIM3->CNT = 0x00;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <score_timer+0x54>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24

	TIM3->EGR = TIM_EGR_UG;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <score_timer+0x54>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~TIM_SR_UIF;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <score_timer+0x54>)
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <score_timer+0x54>)
 8000da8:	f023 0301 	bic.w	r3, r3, #1
 8000dac:	6113      	str	r3, [r2, #16]

	on_TIM3_reset = func_ptr;
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <score_timer+0x58>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6013      	str	r3, [r2, #0]

}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	20000168 	.word	0x20000168

08000dc8 <game_timer>:


void game_timer(void (*func_ptr)(), int duration){
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]

	TIM2->ARR = duration;
 8000dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;
 8000dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6013      	str	r3, [r2, #0]

	TIM2->PSC = 48000;
 8000dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dee:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->EGR = TIM_EGR_UG;
 8000df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df8:	2201      	movs	r2, #1
 8000dfa:	615a      	str	r2, [r3, #20]
	TIM2->CNT = 0x00;
 8000dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24

	TIM2->EGR = TIM_EGR_UG;
 8000e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e08:	2201      	movs	r2, #1
 8000e0a:	615a      	str	r2, [r3, #20]
	TIM2->SR &= ~TIM_SR_UIF;
 8000e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	6113      	str	r3, [r2, #16]

	on_TIM2_reset = func_ptr;
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <game_timer+0x68>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000164 	.word	0x20000164

08000e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e38:	f7ff fdec 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3e:	490d      	ldr	r1, [pc, #52]	; (8000e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <LoopForever+0xe>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e54:	4c0a      	ldr	r4, [pc, #40]	; (8000e80 <LoopForever+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e62:	f003 fa85 	bl	8004370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e66:	f7ff fa43 	bl	80002f0 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e6c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8000e78:	08004ce8 	.word	0x08004ce8
  ldr r2, =_sbss
 8000e7c:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8000e80:	200002bc 	.word	0x200002bc

08000e84 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC3_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x28>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x28>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f001 fc7b 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fcd4 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fc93 	bl	80027fe <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f001 fc5b 	bl	80027aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000088 	.word	0x20000088
 8000f0c:	20000090 	.word	0x20000090
 8000f10:	2000008c 	.word	0x2000008c

08000f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000090 	.word	0x20000090
 8000f38:	20000170 	.word	0x20000170

08000f3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000170 	.word	0x20000170

08000f54 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09a      	sub	sp, #104	; 0x68
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e1c9      	b.n	8001330 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d176      	bne.n	800109c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d152      	bne.n	800105c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff fc61 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d13b      	bne.n	800105c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f001 fa9f 	bl	8002528 <ADC_Disable>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d12f      	bne.n	800105c <HAL_ADC_Init+0xe0>
 8000ffc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001000:	2b00      	cmp	r3, #0
 8001002:	d12b      	bne.n	800105c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800100c:	f023 0302 	bic.w	r3, r3, #2
 8001010:	f043 0202 	orr.w	r2, r3, #2
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001026:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001036:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001038:	4b86      	ldr	r3, [pc, #536]	; (8001254 <HAL_ADC_Init+0x2d8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a86      	ldr	r2, [pc, #536]	; (8001258 <HAL_ADC_Init+0x2dc>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0c9a      	lsrs	r2, r3, #18
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800104e:	e002      	b.n	8001056 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	3b01      	subs	r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f9      	bne.n	8001050 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001078:	d110      	bne.n	800109c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f023 0312 	bic.w	r3, r3, #18
 8001082:	f043 0210 	orr.w	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f040 8136 	bne.w	8001316 <HAL_ADC_Init+0x39a>
 80010aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 8131 	bne.w	8001316 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 8129 	bne.w	8001316 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010cc:	f043 0202 	orr.w	r2, r3, #2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010dc:	d004      	beq.n	80010e8 <HAL_ADC_Init+0x16c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a5e      	ldr	r2, [pc, #376]	; (800125c <HAL_ADC_Init+0x2e0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <HAL_ADC_Init+0x170>
 80010e8:	4b5d      	ldr	r3, [pc, #372]	; (8001260 <HAL_ADC_Init+0x2e4>)
 80010ea:	e000      	b.n	80010ee <HAL_ADC_Init+0x172>
 80010ec:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <HAL_ADC_Init+0x2e8>)
 80010ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010f8:	d102      	bne.n	8001100 <HAL_ADC_Init+0x184>
 80010fa:	4b58      	ldr	r3, [pc, #352]	; (800125c <HAL_ADC_Init+0x2e0>)
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e01a      	b.n	8001136 <HAL_ADC_Init+0x1ba>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a55      	ldr	r2, [pc, #340]	; (800125c <HAL_ADC_Init+0x2e0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d103      	bne.n	8001112 <HAL_ADC_Init+0x196>
 800110a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e011      	b.n	8001136 <HAL_ADC_Init+0x1ba>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a54      	ldr	r2, [pc, #336]	; (8001268 <HAL_ADC_Init+0x2ec>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d102      	bne.n	8001122 <HAL_ADC_Init+0x1a6>
 800111c:	4b53      	ldr	r3, [pc, #332]	; (800126c <HAL_ADC_Init+0x2f0>)
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e009      	b.n	8001136 <HAL_ADC_Init+0x1ba>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a51      	ldr	r2, [pc, #324]	; (800126c <HAL_ADC_Init+0x2f0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d102      	bne.n	8001132 <HAL_ADC_Init+0x1b6>
 800112c:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <HAL_ADC_Init+0x2ec>)
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e001      	b.n	8001136 <HAL_ADC_Init+0x1ba>
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d108      	bne.n	8001156 <HAL_ADC_Init+0x1da>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Init+0x1da>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_ADC_Init+0x1dc>
 8001156:	2300      	movs	r3, #0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d11c      	bne.n	8001196 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800115c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800115e:	2b00      	cmp	r3, #0
 8001160:	d010      	beq.n	8001184 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d107      	bne.n	800117e <HAL_ADC_Init+0x202>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_ADC_Init+0x202>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_ADC_Init+0x204>
 800117e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001180:	2b00      	cmp	r3, #0
 8001182:	d108      	bne.n	8001196 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	431a      	orrs	r2, r3
 8001192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001194:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7e5b      	ldrb	r3, [r3, #25]
 800119a:	035b      	lsls	r3, r3, #13
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011a0:	2a01      	cmp	r2, #1
 80011a2:	d002      	beq.n	80011aa <HAL_ADC_Init+0x22e>
 80011a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a8:	e000      	b.n	80011ac <HAL_ADC_Init+0x230>
 80011aa:	2200      	movs	r2, #0
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011bc:	4313      	orrs	r3, r2
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d11b      	bne.n	8001202 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7e5b      	ldrb	r3, [r3, #25]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	3b01      	subs	r3, #1
 80011d8:	045a      	lsls	r2, r3, #17
 80011da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011dc:	4313      	orrs	r3, r2
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	663b      	str	r3, [r7, #96]	; 0x60
 80011e4:	e00d      	b.n	8001202 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80011ee:	f043 0220 	orr.w	r2, r3, #32
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f043 0201 	orr.w	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	2b01      	cmp	r3, #1
 8001208:	d03a      	beq.n	8001280 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <HAL_ADC_Init+0x2ec>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d004      	beq.n	800121e <HAL_ADC_Init+0x2a2>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_ADC_Init+0x2f0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d128      	bne.n	8001270 <HAL_ADC_Init+0x2f4>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001226:	d012      	beq.n	800124e <HAL_ADC_Init+0x2d2>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001230:	d00a      	beq.n	8001248 <HAL_ADC_Init+0x2cc>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800123a:	d002      	beq.n	8001242 <HAL_ADC_Init+0x2c6>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	e018      	b.n	8001274 <HAL_ADC_Init+0x2f8>
 8001242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001246:	e015      	b.n	8001274 <HAL_ADC_Init+0x2f8>
 8001248:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800124c:	e012      	b.n	8001274 <HAL_ADC_Init+0x2f8>
 800124e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001252:	e00f      	b.n	8001274 <HAL_ADC_Init+0x2f8>
 8001254:	20000088 	.word	0x20000088
 8001258:	431bde83 	.word	0x431bde83
 800125c:	50000100 	.word	0x50000100
 8001260:	50000300 	.word	0x50000300
 8001264:	50000700 	.word	0x50000700
 8001268:	50000400 	.word	0x50000400
 800126c:	50000500 	.word	0x50000500
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001278:	4313      	orrs	r3, r2
 800127a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800127c:	4313      	orrs	r3, r2
 800127e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b00      	cmp	r3, #0
 800128c:	d114      	bne.n	80012b8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800129c:	f023 0302 	bic.w	r3, r3, #2
 80012a0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
 80012a6:	039a      	lsls	r2, r3, #14
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4313      	orrs	r3, r2
 80012b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012b4:	4313      	orrs	r3, r2
 80012b6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_ADC_Init+0x3bc>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012c8:	430b      	orrs	r3, r1
 80012ca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d10c      	bne.n	80012ee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f023 010f 	bic.w	r1, r3, #15
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
 80012ec:	e007      	b.n	80012fe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 020f 	bic.w	r2, r2, #15
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f023 0303 	bic.w	r3, r3, #3
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
 8001314:	e00a      	b.n	800132c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f023 0312 	bic.w	r3, r3, #18
 800131e:	f043 0210 	orr.w	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001326:	2301      	movs	r3, #1
 8001328:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800132c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001330:	4618      	mov	r0, r3
 8001332:	3768      	adds	r7, #104	; 0x68
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	fff0c007 	.word	0xfff0c007

0800133c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 8123 	bne.w	800159e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Start_IT+0x2a>
 8001362:	2302      	movs	r3, #2
 8001364:	e11e      	b.n	80015a4 <HAL_ADC_Start_IT+0x268>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f001 f876 	bl	8002460 <ADC_Enable>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 810a 	bne.w	8001594 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800139c:	d004      	beq.n	80013a8 <HAL_ADC_Start_IT+0x6c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a82      	ldr	r2, [pc, #520]	; (80015ac <HAL_ADC_Start_IT+0x270>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d106      	bne.n	80013b6 <HAL_ADC_Start_IT+0x7a>
 80013a8:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <HAL_ADC_Start_IT+0x274>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d010      	beq.n	80013d6 <HAL_ADC_Start_IT+0x9a>
 80013b4:	e005      	b.n	80013c2 <HAL_ADC_Start_IT+0x86>
 80013b6:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <HAL_ADC_Start_IT+0x278>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <HAL_ADC_Start_IT+0x9a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ca:	d004      	beq.n	80013d6 <HAL_ADC_Start_IT+0x9a>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a79      	ldr	r2, [pc, #484]	; (80015b8 <HAL_ADC_Start_IT+0x27c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d115      	bne.n	8001402 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d036      	beq.n	800145e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001400:	e02d      	b.n	800145e <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001416:	d004      	beq.n	8001422 <HAL_ADC_Start_IT+0xe6>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a63      	ldr	r2, [pc, #396]	; (80015ac <HAL_ADC_Start_IT+0x270>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10a      	bne.n	8001438 <HAL_ADC_Start_IT+0xfc>
 8001422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf14      	ite	ne
 8001430:	2301      	movne	r3, #1
 8001432:	2300      	moveq	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	e008      	b.n	800144a <HAL_ADC_Start_IT+0x10e>
 8001438:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <HAL_ADC_Start_IT+0x27c>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf14      	ite	ne
 8001444:	2301      	movne	r3, #1
 8001446:	2300      	moveq	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001456:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146a:	d106      	bne.n	800147a <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f023 0206 	bic.w	r2, r3, #6
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	645a      	str	r2, [r3, #68]	; 0x44
 8001478:	e002      	b.n	8001480 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	221c      	movs	r2, #28
 800148e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	2b08      	cmp	r3, #8
 8001496:	d110      	bne.n	80014ba <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0204 	bic.w	r2, r2, #4
 80014a6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0208 	orr.w	r2, r2, #8
 80014b6:	605a      	str	r2, [r3, #4]
          break;
 80014b8:	e008      	b.n	80014cc <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 020c 	orr.w	r2, r2, #12
 80014c8:	605a      	str	r2, [r3, #4]
          break;
 80014ca:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0210 	bic.w	r2, r2, #16
 80014e2:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ec:	d004      	beq.n	80014f8 <HAL_ADC_Start_IT+0x1bc>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a2e      	ldr	r2, [pc, #184]	; (80015ac <HAL_ADC_Start_IT+0x270>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d106      	bne.n	8001506 <HAL_ADC_Start_IT+0x1ca>
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_ADC_Start_IT+0x274>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	2b00      	cmp	r3, #0
 8001502:	d03e      	beq.n	8001582 <HAL_ADC_Start_IT+0x246>
 8001504:	e005      	b.n	8001512 <HAL_ADC_Start_IT+0x1d6>
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_ADC_Start_IT+0x278>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	2b00      	cmp	r3, #0
 8001510:	d037      	beq.n	8001582 <HAL_ADC_Start_IT+0x246>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151a:	d004      	beq.n	8001526 <HAL_ADC_Start_IT+0x1ea>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a22      	ldr	r2, [pc, #136]	; (80015ac <HAL_ADC_Start_IT+0x270>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d106      	bne.n	8001534 <HAL_ADC_Start_IT+0x1f8>
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_ADC_Start_IT+0x274>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	2b05      	cmp	r3, #5
 8001530:	d027      	beq.n	8001582 <HAL_ADC_Start_IT+0x246>
 8001532:	e005      	b.n	8001540 <HAL_ADC_Start_IT+0x204>
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_ADC_Start_IT+0x278>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2b05      	cmp	r3, #5
 800153e:	d020      	beq.n	8001582 <HAL_ADC_Start_IT+0x246>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001548:	d004      	beq.n	8001554 <HAL_ADC_Start_IT+0x218>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a17      	ldr	r2, [pc, #92]	; (80015ac <HAL_ADC_Start_IT+0x270>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d106      	bne.n	8001562 <HAL_ADC_Start_IT+0x226>
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_ADC_Start_IT+0x274>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	2b09      	cmp	r3, #9
 800155e:	d010      	beq.n	8001582 <HAL_ADC_Start_IT+0x246>
 8001560:	e005      	b.n	800156e <HAL_ADC_Start_IT+0x232>
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_ADC_Start_IT+0x278>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 031f 	and.w	r3, r3, #31
 800156a:	2b09      	cmp	r3, #9
 800156c:	d009      	beq.n	8001582 <HAL_ADC_Start_IT+0x246>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001576:	d004      	beq.n	8001582 <HAL_ADC_Start_IT+0x246>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_ADC_Start_IT+0x27c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10f      	bne.n	80015a2 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0204 	orr.w	r2, r2, #4
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	e006      	b.n	80015a2 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800159c:	e001      	b.n	80015a2 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800159e:	2302      	movs	r3, #2
 80015a0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	50000100 	.word	0x50000100
 80015b0:	50000300 	.word	0x50000300
 80015b4:	50000700 	.word	0x50000700
 80015b8:	50000400 	.word	0x50000400

080015bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <HAL_ADC_IRQHandler+0x38>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10b      	bne.n	8001628 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80bc 	beq.w	8001794 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80b6 	beq.w	8001794 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001648:	d004      	beq.n	8001654 <HAL_ADC_IRQHandler+0x7c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a90      	ldr	r2, [pc, #576]	; (8001890 <HAL_ADC_IRQHandler+0x2b8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d106      	bne.n	8001662 <HAL_ADC_IRQHandler+0x8a>
 8001654:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <HAL_ADC_IRQHandler+0x2bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2b00      	cmp	r3, #0
 800165e:	d03e      	beq.n	80016de <HAL_ADC_IRQHandler+0x106>
 8001660:	e005      	b.n	800166e <HAL_ADC_IRQHandler+0x96>
 8001662:	4b8d      	ldr	r3, [pc, #564]	; (8001898 <HAL_ADC_IRQHandler+0x2c0>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	2b00      	cmp	r3, #0
 800166c:	d037      	beq.n	80016de <HAL_ADC_IRQHandler+0x106>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001676:	d004      	beq.n	8001682 <HAL_ADC_IRQHandler+0xaa>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a84      	ldr	r2, [pc, #528]	; (8001890 <HAL_ADC_IRQHandler+0x2b8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d106      	bne.n	8001690 <HAL_ADC_IRQHandler+0xb8>
 8001682:	4b84      	ldr	r3, [pc, #528]	; (8001894 <HAL_ADC_IRQHandler+0x2bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2b05      	cmp	r3, #5
 800168c:	d027      	beq.n	80016de <HAL_ADC_IRQHandler+0x106>
 800168e:	e005      	b.n	800169c <HAL_ADC_IRQHandler+0xc4>
 8001690:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_ADC_IRQHandler+0x2c0>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	2b05      	cmp	r3, #5
 800169a:	d020      	beq.n	80016de <HAL_ADC_IRQHandler+0x106>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a4:	d004      	beq.n	80016b0 <HAL_ADC_IRQHandler+0xd8>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a79      	ldr	r2, [pc, #484]	; (8001890 <HAL_ADC_IRQHandler+0x2b8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d106      	bne.n	80016be <HAL_ADC_IRQHandler+0xe6>
 80016b0:	4b78      	ldr	r3, [pc, #480]	; (8001894 <HAL_ADC_IRQHandler+0x2bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d010      	beq.n	80016de <HAL_ADC_IRQHandler+0x106>
 80016bc:	e005      	b.n	80016ca <HAL_ADC_IRQHandler+0xf2>
 80016be:	4b76      	ldr	r3, [pc, #472]	; (8001898 <HAL_ADC_IRQHandler+0x2c0>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	2b09      	cmp	r3, #9
 80016c8:	d009      	beq.n	80016de <HAL_ADC_IRQHandler+0x106>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d2:	d004      	beq.n	80016de <HAL_ADC_IRQHandler+0x106>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a70      	ldr	r2, [pc, #448]	; (800189c <HAL_ADC_IRQHandler+0x2c4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d104      	bne.n	80016e8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	e00f      	b.n	8001708 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f0:	d004      	beq.n	80016fc <HAL_ADC_IRQHandler+0x124>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a66      	ldr	r2, [pc, #408]	; (8001890 <HAL_ADC_IRQHandler+0x2b8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d102      	bne.n	8001702 <HAL_ADC_IRQHandler+0x12a>
 80016fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001700:	e000      	b.n	8001704 <HAL_ADC_IRQHandler+0x12c>
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_ADC_IRQHandler+0x2c4>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001712:	2b00      	cmp	r3, #0
 8001714:	d137      	bne.n	8001786 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800171c:	2b00      	cmp	r3, #0
 800171e:	d132      	bne.n	8001786 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d02d      	beq.n	8001786 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d11a      	bne.n	800176e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 020c 	bic.w	r2, r2, #12
 8001746:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d112      	bne.n	8001786 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
 800176c:	e00b      	b.n	8001786 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fbe4 	bl	8000f54 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	220c      	movs	r2, #12
 8001792:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <HAL_ADC_IRQHandler+0x1d0>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10b      	bne.n	80017c0 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8138 	beq.w	8001a24 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8132 	beq.w	8001a24 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017d4:	d004      	beq.n	80017e0 <HAL_ADC_IRQHandler+0x208>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <HAL_ADC_IRQHandler+0x2b8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d106      	bne.n	80017ee <HAL_ADC_IRQHandler+0x216>
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <HAL_ADC_IRQHandler+0x2bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03e      	beq.n	800186a <HAL_ADC_IRQHandler+0x292>
 80017ec:	e005      	b.n	80017fa <HAL_ADC_IRQHandler+0x222>
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_ADC_IRQHandler+0x2c0>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d037      	beq.n	800186a <HAL_ADC_IRQHandler+0x292>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001802:	d004      	beq.n	800180e <HAL_ADC_IRQHandler+0x236>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a21      	ldr	r2, [pc, #132]	; (8001890 <HAL_ADC_IRQHandler+0x2b8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d106      	bne.n	800181c <HAL_ADC_IRQHandler+0x244>
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_ADC_IRQHandler+0x2bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	2b05      	cmp	r3, #5
 8001818:	d027      	beq.n	800186a <HAL_ADC_IRQHandler+0x292>
 800181a:	e005      	b.n	8001828 <HAL_ADC_IRQHandler+0x250>
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_ADC_IRQHandler+0x2c0>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	2b05      	cmp	r3, #5
 8001826:	d020      	beq.n	800186a <HAL_ADC_IRQHandler+0x292>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001830:	d004      	beq.n	800183c <HAL_ADC_IRQHandler+0x264>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_ADC_IRQHandler+0x2b8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d106      	bne.n	800184a <HAL_ADC_IRQHandler+0x272>
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_ADC_IRQHandler+0x2bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2b09      	cmp	r3, #9
 8001846:	d010      	beq.n	800186a <HAL_ADC_IRQHandler+0x292>
 8001848:	e005      	b.n	8001856 <HAL_ADC_IRQHandler+0x27e>
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_ADC_IRQHandler+0x2c0>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2b09      	cmp	r3, #9
 8001854:	d009      	beq.n	800186a <HAL_ADC_IRQHandler+0x292>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185e:	d004      	beq.n	800186a <HAL_ADC_IRQHandler+0x292>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_ADC_IRQHandler+0x2c4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d104      	bne.n	8001874 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	e018      	b.n	80018a6 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800187c:	d004      	beq.n	8001888 <HAL_ADC_IRQHandler+0x2b0>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a03      	ldr	r2, [pc, #12]	; (8001890 <HAL_ADC_IRQHandler+0x2b8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d10b      	bne.n	80018a0 <HAL_ADC_IRQHandler+0x2c8>
 8001888:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800188c:	e009      	b.n	80018a2 <HAL_ADC_IRQHandler+0x2ca>
 800188e:	bf00      	nop
 8001890:	50000100 	.word	0x50000100
 8001894:	50000300 	.word	0x50000300
 8001898:	50000700 	.word	0x50000700
 800189c:	50000400 	.word	0x50000400
 80018a0:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_ADC_IRQHandler+0x514>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f040 80b0 	bne.w	8001a16 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00d      	beq.n	80018dc <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 80a3 	bne.w	8001a16 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 809d 	bne.w	8001a16 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8097 	beq.w	8001a16 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f0:	d004      	beq.n	80018fc <HAL_ADC_IRQHandler+0x324>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a7e      	ldr	r2, [pc, #504]	; (8001af0 <HAL_ADC_IRQHandler+0x518>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d106      	bne.n	800190a <HAL_ADC_IRQHandler+0x332>
 80018fc:	4b7d      	ldr	r3, [pc, #500]	; (8001af4 <HAL_ADC_IRQHandler+0x51c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2b00      	cmp	r3, #0
 8001906:	d03e      	beq.n	8001986 <HAL_ADC_IRQHandler+0x3ae>
 8001908:	e005      	b.n	8001916 <HAL_ADC_IRQHandler+0x33e>
 800190a:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <HAL_ADC_IRQHandler+0x520>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	2b00      	cmp	r3, #0
 8001914:	d037      	beq.n	8001986 <HAL_ADC_IRQHandler+0x3ae>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800191e:	d004      	beq.n	800192a <HAL_ADC_IRQHandler+0x352>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a72      	ldr	r2, [pc, #456]	; (8001af0 <HAL_ADC_IRQHandler+0x518>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d106      	bne.n	8001938 <HAL_ADC_IRQHandler+0x360>
 800192a:	4b72      	ldr	r3, [pc, #456]	; (8001af4 <HAL_ADC_IRQHandler+0x51c>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	2b06      	cmp	r3, #6
 8001934:	d027      	beq.n	8001986 <HAL_ADC_IRQHandler+0x3ae>
 8001936:	e005      	b.n	8001944 <HAL_ADC_IRQHandler+0x36c>
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_ADC_IRQHandler+0x520>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2b06      	cmp	r3, #6
 8001942:	d020      	beq.n	8001986 <HAL_ADC_IRQHandler+0x3ae>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800194c:	d004      	beq.n	8001958 <HAL_ADC_IRQHandler+0x380>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a67      	ldr	r2, [pc, #412]	; (8001af0 <HAL_ADC_IRQHandler+0x518>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d106      	bne.n	8001966 <HAL_ADC_IRQHandler+0x38e>
 8001958:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <HAL_ADC_IRQHandler+0x51c>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2b07      	cmp	r3, #7
 8001962:	d010      	beq.n	8001986 <HAL_ADC_IRQHandler+0x3ae>
 8001964:	e005      	b.n	8001972 <HAL_ADC_IRQHandler+0x39a>
 8001966:	4b64      	ldr	r3, [pc, #400]	; (8001af8 <HAL_ADC_IRQHandler+0x520>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b07      	cmp	r3, #7
 8001970:	d009      	beq.n	8001986 <HAL_ADC_IRQHandler+0x3ae>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800197a:	d004      	beq.n	8001986 <HAL_ADC_IRQHandler+0x3ae>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <HAL_ADC_IRQHandler+0x514>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d104      	bne.n	8001990 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e00f      	b.n	80019b0 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_IRQHandler+0x3cc>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a54      	ldr	r2, [pc, #336]	; (8001af0 <HAL_ADC_IRQHandler+0x518>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d102      	bne.n	80019aa <HAL_ADC_IRQHandler+0x3d2>
 80019a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019a8:	e000      	b.n	80019ac <HAL_ADC_IRQHandler+0x3d4>
 80019aa:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_ADC_IRQHandler+0x514>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d12d      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11a      	bne.n	80019fe <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019d6:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d112      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
 80019fc:	e00b      	b.n	8001a16 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f043 0210 	orr.w	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f8c4 	bl	8001ba4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2260      	movs	r2, #96	; 0x60
 8001a22:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d011      	beq.n	8001a52 <HAL_ADC_IRQHandler+0x47a>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00c      	beq.n	8001a52 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7fe fe8f 	bl	8000768 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d012      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x4aa>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8aa 	bl	8001bcc <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a80:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d012      	beq.n	8001ab2 <HAL_ADC_IRQHandler+0x4da>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00d      	beq.n	8001ab2 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f89c 	bl	8001be0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d04f      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x584>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d04a      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d102      	bne.n	8001ad4 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	e02d      	b.n	8001b30 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001adc:	d004      	beq.n	8001ae8 <HAL_ADC_IRQHandler+0x510>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <HAL_ADC_IRQHandler+0x518>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_IRQHandler+0x524>
 8001ae8:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <HAL_ADC_IRQHandler+0x51c>)
 8001aea:	e008      	b.n	8001afe <HAL_ADC_IRQHandler+0x526>
 8001aec:	50000400 	.word	0x50000400
 8001af0:	50000100 	.word	0x50000100
 8001af4:	50000300 	.word	0x50000300
 8001af8:	50000700 	.word	0x50000700
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_ADC_IRQHandler+0x5c8>)
 8001afe:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d10a      	bne.n	8001b30 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e007      	b.n	8001b30 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d10e      	bne.n	8001b54 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f043 0202 	orr.w	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fa0a 	bl	8000f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d018      	beq.n	8001b98 <HAL_ADC_IRQHandler+0x5c0>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f043 0208 	orr.w	r2, r3, #8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b90:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f810 	bl	8001bb8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	50000700 	.word	0x50000700

08001ba4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b09b      	sub	sp, #108	; 0x6c
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x22>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e2c8      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x5b4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 82ac 	bne.w	8002186 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d81c      	bhi.n	8001c70 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	461a      	mov	r2, r3
 8001c4a:	231f      	movs	r3, #31
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4019      	ands	r1, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa00 f203 	lsl.w	r2, r0, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6e:	e063      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b09      	cmp	r3, #9
 8001c76:	d81e      	bhi.n	8001cb6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	3b1e      	subs	r3, #30
 8001c8c:	221f      	movs	r2, #31
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	4019      	ands	r1, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	3b1e      	subs	r3, #30
 8001ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb4:	e040      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b0e      	cmp	r3, #14
 8001cbc:	d81e      	bhi.n	8001cfc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	3b3c      	subs	r3, #60	; 0x3c
 8001cd2:	221f      	movs	r2, #31
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4019      	ands	r1, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	3b3c      	subs	r3, #60	; 0x3c
 8001cee:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8001cfa:	e01d      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	3b5a      	subs	r3, #90	; 0x5a
 8001d10:	221f      	movs	r2, #31
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	4019      	ands	r1, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	3b5a      	subs	r3, #90	; 0x5a
 8001d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 80e5 	bne.w	8001f12 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b09      	cmp	r3, #9
 8001d4e:	d91c      	bls.n	8001d8a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6999      	ldr	r1, [r3, #24]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b1e      	subs	r3, #30
 8001d62:	2207      	movs	r2, #7
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4019      	ands	r1, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6898      	ldr	r0, [r3, #8]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b1e      	subs	r3, #30
 8001d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	619a      	str	r2, [r3, #24]
 8001d88:	e019      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6959      	ldr	r1, [r3, #20]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4019      	ands	r1, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6898      	ldr	r0, [r3, #8]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	fa00 f203 	lsl.w	r2, r0, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d84f      	bhi.n	8001e80 <HAL_ADC_ConfigChannel+0x28c>
 8001de0:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de6:	bf00      	nop
 8001de8:	08001df9 	.word	0x08001df9
 8001dec:	08001e1b 	.word	0x08001e1b
 8001df0:	08001e3d 	.word	0x08001e3d
 8001df4:	08001e5f 	.word	0x08001e5f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dfe:	4b99      	ldr	r3, [pc, #612]	; (8002064 <HAL_ADC_ConfigChannel+0x470>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	0691      	lsls	r1, r2, #26
 8001e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e16:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e18:	e07b      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e20:	4b90      	ldr	r3, [pc, #576]	; (8002064 <HAL_ADC_ConfigChannel+0x470>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	0691      	lsls	r1, r2, #26
 8001e2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e38:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e3a:	e06a      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e42:	4b88      	ldr	r3, [pc, #544]	; (8002064 <HAL_ADC_ConfigChannel+0x470>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	0691      	lsls	r1, r2, #26
 8001e4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e5c:	e059      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e64:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_ADC_ConfigChannel+0x470>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	0691      	lsls	r1, r2, #26
 8001e6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e70:	430a      	orrs	r2, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e7c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e7e:	e048      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	069b      	lsls	r3, r3, #26
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d107      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ea2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	069b      	lsls	r3, r3, #26
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ec6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ece:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	069b      	lsls	r3, r3, #26
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	069b      	lsls	r3, r3, #26
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d107      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f10:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x33e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x33e>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x340>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f040 8131 	bne.w	800219c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d00f      	beq.n	8001f62 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43da      	mvns	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001f60:	e049      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	409a      	lsls	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b09      	cmp	r3, #9
 8001f82:	d91c      	bls.n	8001fbe <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6999      	ldr	r1, [r3, #24]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	3b1b      	subs	r3, #27
 8001f96:	2207      	movs	r2, #7
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	4019      	ands	r1, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6898      	ldr	r0, [r3, #8]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	3b1b      	subs	r3, #27
 8001fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	619a      	str	r2, [r3, #24]
 8001fbc:	e01b      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6959      	ldr	r1, [r3, #20]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4019      	ands	r1, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6898      	ldr	r0, [r3, #8]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	fa00 f203 	lsl.w	r2, r0, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffe:	d004      	beq.n	800200a <HAL_ADC_ConfigChannel+0x416>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_ADC_ConfigChannel+0x474>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x41a>
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_ADC_ConfigChannel+0x478>)
 800200c:	e000      	b.n	8002010 <HAL_ADC_ConfigChannel+0x41c>
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_ADC_ConfigChannel+0x47c>)
 8002010:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b10      	cmp	r3, #16
 8002018:	d105      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800201a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800202a:	2b11      	cmp	r3, #17
 800202c:	d105      	bne.n	800203a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800202e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800203e:	2b12      	cmp	r3, #18
 8002040:	f040 80ac 	bne.w	800219c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	f040 80a5 	bne.w	800219c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800205a:	d10b      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x480>
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_ADC_ConfigChannel+0x474>)
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e023      	b.n	80020aa <HAL_ADC_ConfigChannel+0x4b6>
 8002062:	bf00      	nop
 8002064:	83fff000 	.word	0x83fff000
 8002068:	50000100 	.word	0x50000100
 800206c:	50000300 	.word	0x50000300
 8002070:	50000700 	.word	0x50000700
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a4e      	ldr	r2, [pc, #312]	; (80021b4 <HAL_ADC_ConfigChannel+0x5c0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d103      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x492>
 800207e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e011      	b.n	80020aa <HAL_ADC_ConfigChannel+0x4b6>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a4b      	ldr	r2, [pc, #300]	; (80021b8 <HAL_ADC_ConfigChannel+0x5c4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d102      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x4a2>
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_ADC_ConfigChannel+0x5c8>)
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e009      	b.n	80020aa <HAL_ADC_ConfigChannel+0x4b6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a48      	ldr	r2, [pc, #288]	; (80021bc <HAL_ADC_ConfigChannel+0x5c8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d102      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x4b2>
 80020a0:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <HAL_ADC_ConfigChannel+0x5c4>)
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e001      	b.n	80020aa <HAL_ADC_ConfigChannel+0x4b6>
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d108      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x4d6>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x4d6>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_ADC_ConfigChannel+0x4d8>
 80020ca:	2300      	movs	r3, #0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d150      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x4fe>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x4fe>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x500>
 80020f2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d13c      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d11d      	bne.n	800213c <HAL_ADC_ConfigChannel+0x548>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002108:	d118      	bne.n	800213c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800210a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002114:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <HAL_ADC_ConfigChannel+0x5d0>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	0c9a      	lsrs	r2, r3, #18
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800212c:	e002      	b.n	8002134 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	3b01      	subs	r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f9      	bne.n	800212e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800213a:	e02e      	b.n	800219a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b11      	cmp	r3, #17
 8002142:	d10b      	bne.n	800215c <HAL_ADC_ConfigChannel+0x568>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800214c:	d106      	bne.n	800215c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800214e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002158:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800215a:	e01e      	b.n	800219a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b12      	cmp	r3, #18
 8002162:	d11a      	bne.n	800219a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800216c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002170:	e013      	b.n	800219a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f043 0220 	orr.w	r2, r3, #32
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002184:	e00a      	b.n	800219c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002198:	e000      	b.n	800219c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800219a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	376c      	adds	r7, #108	; 0x6c
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	50000100 	.word	0x50000100
 80021b8:	50000400 	.word	0x50000400
 80021bc:	50000500 	.word	0x50000500
 80021c0:	20000088 	.word	0x20000088
 80021c4:	431bde83 	.word	0x431bde83

080021c8 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	77fb      	strb	r3, [r7, #31]

  /* Verify if threshold is within the selected ADC resolution */
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));

  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021de:	d003      	beq.n	80021e8 <HAL_ADC_AnalogWDGConfig+0x20>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80021e4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_AnalogWDGConfig+0x2e>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e12c      	b.n	8002450 <HAL_ADC_AnalogWDGConfig+0x288>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular and injected groups:                      */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b00      	cmp	r3, #0
 800220a:	f040 8114 	bne.w	8002436 <HAL_ADC_AnalogWDGConfig+0x26e>
  {
  
    /* Analog watchdogs configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d14f      	bne.n	80022b6 <HAL_ADC_AnalogWDGConfig+0xee>
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: regular and/or injected      */
      /*    groups, one or overall group of channels.                         */
      /*  - Set the Analog watchdog channel (is not used if watchdog          */
      /*    mode "all channels": ADC_CFGR_AWD1SGL=0U).                         */
      MODIFY_REG(hadc->Instance->CFGR                             ,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f023 43fb 	bic.w	r3, r3, #2105540608	; 0x7d800000
 8002220:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	6851      	ldr	r1, [r2, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	6892      	ldr	r2, [r2, #8]
 800222c:	0692      	lsls	r2, r2, #26
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR_AWD1CH_SHIFT(AnalogWDGConfig->Channel)   );

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11U, the LSB (right bits)   */
      /* are set to 0                                                         */ 
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	613b      	str	r3, [r7, #16]
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	08db      	lsrs	r3, r3, #3
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	60fb      	str	r3, [r7, #12]
      
      /* Set the high and low thresholds */
      MODIFY_REG(hadc->Instance->TR1                                ,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f003 21f0 	and.w	r1, r3, #4026593280	; 0xf000f000
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	041a      	lsls	r2, r3, #16
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	621a      	str	r2, [r3, #32]
                 tmpAWDLowThresholdShifted                           );
      
      /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
      /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
      /* or HAL_ADC_PollForEvent().                                           */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	601a      	str	r2, [r3, #0]
      
      /* Configure ADC Analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	7b1b      	ldrb	r3, [r3, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d108      	bne.n	80022a4 <HAL_ADC_AnalogWDGConfig+0xdc>
      {
        /* Enable the ADC Analog watchdog interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	e0d0      	b.n	8002446 <HAL_ADC_AnalogWDGConfig+0x27e>
      }
      else
      {
        /* Disable the ADC Analog watchdog interrupt */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	e0c7      	b.n	8002446 <HAL_ADC_AnalogWDGConfig+0x27e>
    /* Case of ADC_ANALOGWATCHDOG_2 and ADC_ANALOGWATCHDOG_3 */
    else
    {
    /* Shift the threshold in function of the selected ADC resolution */
    /* have to be left-aligned on bit 7U, the LSB (right bits) are set to 0    */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0318 	and.w	r3, r3, #24
 80022c0:	2b18      	cmp	r3, #24
 80022c2:	d00d      	beq.n	80022e0 <HAL_ADC_AnalogWDGConfig+0x118>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	08db      	lsrs	r3, r3, #3
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	f1c3 0302 	rsb	r3, r3, #2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	e002      	b.n	80022e6 <HAL_ADC_AnalogWDGConfig+0x11e>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0318 	and.w	r3, r3, #24
 80022f2:	2b18      	cmp	r3, #24
 80022f4:	d00d      	beq.n	8002312 <HAL_ADC_AnalogWDGConfig+0x14a>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	f1c3 0302 	rsb	r3, r3, #2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
 8002310:	e002      	b.n	8002318 <HAL_ADC_AnalogWDGConfig+0x150>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	60fb      	str	r3, [r7, #12]

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d137      	bne.n	8002392 <HAL_ADC_AnalogWDGConfig+0x1ca>
      {
        /* Set the Analog watchdog channel or group of channels. This also    */
        /* enables the watchdog.                                              */
        /* Note: Conditional register reset, because several channels can be  */
        /*       set by successive calls of this function.                    */
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d01a      	beq.n	8002360 <HAL_ADC_AnalogWDGConfig+0x198>
        {
          /* Set the high and low thresholds */
          MODIFY_REG(hadc->Instance->TR2                                ,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	f003 21ff 	and.w	r1, r3, #4278255360	; 0xff00ff00
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	041a      	lsls	r2, r3, #16
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
                     ADC_TR2_HT2 |
                     ADC_TR2_LT2                                        ,
                     ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
                     tmpAWDLowThresholdShifted                           );
          
          SET_BIT(hadc->Instance->AWD2CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2201      	movs	r2, #1
 8002352:	409a      	lsls	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800235e:	e011      	b.n	8002384 <HAL_ADC_AnalogWDGConfig+0x1bc>
        }
        else
        {
          CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
          CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b37      	ldr	r3, [pc, #220]	; (800245c <HAL_ADC_AnalogWDGConfig+0x294>)
 800237e:	400b      	ands	r3, r1
 8002380:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        }
                
        /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
        /* settings.                                                          */
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD2;
 8002384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002388:	61bb      	str	r3, [r7, #24]
        tmpADCITAWD2orAWD3 = ADC_IT_AWD2;
 800238a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e036      	b.n	8002400 <HAL_ADC_AnalogWDGConfig+0x238>
      {
        /* Set the Analog watchdog channel or group of channels. This also    */
        /* enables the watchdog.                                              */
        /* Note: Conditional register reset, because several channels can be */
        /*       set by successive calls of this function.                    */
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01a      	beq.n	80023d0 <HAL_ADC_AnalogWDGConfig+0x208>
        {
          /* Set the high and low thresholds */
          MODIFY_REG(hadc->Instance->TR3                                ,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f003 21ff 	and.w	r1, r3, #4278255360	; 0xff00ff00
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
                     ADC_TR3_HT3 |
                     ADC_TR3_LT3                                        ,
                     ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
                     tmpAWDLowThresholdShifted                           );
          
          SET_BIT(hadc->Instance->AWD3CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2201      	movs	r2, #1
 80023c2:	409a      	lsls	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80023ce:	e011      	b.n	80023f4 <HAL_ADC_AnalogWDGConfig+0x22c>
        }
        else
        {
          CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
          CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_ADC_AnalogWDGConfig+0x294>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        }
        
        /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
        /* settings.                                                          */
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD3;
 80023f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f8:	61bb      	str	r3, [r7, #24]
        tmpADCITAWD2orAWD3 = ADC_IT_AWD3;
 80023fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023fe:	617b      	str	r3, [r7, #20]
      }

      /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
      /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
      /* or HAL_ADC_PollForEvent().                                           */
      __HAL_ADC_CLEAR_FLAG(hadc, tmpADCFlagAWD2orAWD3);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]

      /* Configure ADC Analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	7b1b      	ldrb	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d108      	bne.n	8002422 <HAL_ADC_AnalogWDGConfig+0x25a>
      {
        __HAL_ADC_ENABLE_IT(hadc, tmpADCITAWD2orAWD3);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	e011      	b.n	8002446 <HAL_ADC_AnalogWDGConfig+0x27e>
      }
      else
      {
        __HAL_ADC_DISABLE_IT(hadc, tmpADCITAWD2orAWD3);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	43da      	mvns	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	400a      	ands	r2, r1
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	e007      	b.n	8002446 <HAL_ADC_AnalogWDGConfig+0x27e>
  /* If a conversion is on going on regular or injected groups, no update     */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	77fb      	strb	r3, [r7, #31]
  }
  
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800244e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3724      	adds	r7, #36	; 0x24
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	fff80001 	.word	0xfff80001

08002460 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d108      	bne.n	800248c <ADC_Enable+0x2c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <ADC_Enable+0x2c>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <ADC_Enable+0x2e>
 800248c:	2300      	movs	r3, #0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d143      	bne.n	800251a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	4b22      	ldr	r3, [pc, #136]	; (8002524 <ADC_Enable+0xc4>)
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0210 	orr.w	r2, r3, #16
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e02f      	b.n	800251c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80024cc:	f7fe fd36 	bl	8000f3c <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024d2:	e01b      	b.n	800250c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024d4:	f7fe fd32 	bl	8000f3c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d914      	bls.n	800250c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d00d      	beq.n	800250c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f043 0210 	orr.w	r2, r3, #16
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e007      	b.n	800251c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d1dc      	bne.n	80024d4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	8000003f 	.word	0x8000003f

08002528 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d108      	bne.n	8002554 <ADC_Disable+0x2c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <ADC_Disable+0x2c>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <ADC_Disable+0x2e>
 8002554:	2300      	movs	r3, #0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d047      	beq.n	80025ea <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030d 	and.w	r3, r3, #13
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10f      	bne.n	8002588 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0202 	orr.w	r2, r2, #2
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2203      	movs	r2, #3
 800257e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002580:	f7fe fcdc 	bl	8000f3c <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002586:	e029      	b.n	80025dc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f043 0210 	orr.w	r2, r3, #16
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e023      	b.n	80025ec <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025a4:	f7fe fcca 	bl	8000f3c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d914      	bls.n	80025dc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10d      	bne.n	80025dc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f043 0210 	orr.w	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e007      	b.n	80025ec <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d0dc      	beq.n	80025a4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <__NVIC_SetPriorityGrouping>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	210f      	movs	r1, #15
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff29 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027bc:	f7ff ff3e 	bl	800263c <__NVIC_GetPriorityGrouping>
 80027c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f7ff ff8e 	bl	80026e8 <NVIC_EncodePriority>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <__NVIC_SetPriority>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff31 	bl	8002658 <__NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffa2 	bl	8002750 <SysTick_Config>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002826:	e154      	b.n	8002ad2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2101      	movs	r1, #1
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	4013      	ands	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8146 	beq.w	8002acc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d005      	beq.n	8002858 <HAL_GPIO_Init+0x40>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d130      	bne.n	80028ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288e:	2201      	movs	r2, #1
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	f003 0201 	and.w	r2, r3, #1
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d017      	beq.n	80028f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d123      	bne.n	800294a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	08da      	lsrs	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3208      	adds	r2, #8
 8002944:	6939      	ldr	r1, [r7, #16]
 8002946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0203 	and.w	r2, r3, #3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80a0 	beq.w	8002acc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298c:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <HAL_GPIO_Init+0x2d8>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_GPIO_Init+0x2d8>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <HAL_GPIO_Init+0x2d8>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029a4:	4a53      	ldr	r2, [pc, #332]	; (8002af4 <HAL_GPIO_Init+0x2dc>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ce:	d019      	beq.n	8002a04 <HAL_GPIO_Init+0x1ec>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a49      	ldr	r2, [pc, #292]	; (8002af8 <HAL_GPIO_Init+0x2e0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_GPIO_Init+0x1e8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_GPIO_Init+0x2e4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00d      	beq.n	80029fc <HAL_GPIO_Init+0x1e4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a47      	ldr	r2, [pc, #284]	; (8002b00 <HAL_GPIO_Init+0x2e8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d007      	beq.n	80029f8 <HAL_GPIO_Init+0x1e0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a46      	ldr	r2, [pc, #280]	; (8002b04 <HAL_GPIO_Init+0x2ec>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_GPIO_Init+0x1dc>
 80029f0:	2304      	movs	r3, #4
 80029f2:	e008      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 80029f4:	2305      	movs	r3, #5
 80029f6:	e006      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 80029f8:	2303      	movs	r3, #3
 80029fa:	e004      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 8002a04:	2300      	movs	r3, #0
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	f002 0203 	and.w	r2, r2, #3
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	4093      	lsls	r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a16:	4937      	ldr	r1, [pc, #220]	; (8002af4 <HAL_GPIO_Init+0x2dc>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a48:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a72:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa2:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f aea3 	bne.w	8002828 <HAL_GPIO_Init+0x10>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	48001000 	.word	0x48001000
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b52:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fbac 	bl	80002b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40010400 	.word	0x40010400

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f001 b823 	b.w	8003bd8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 817d 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ba8:	4bbc      	ldr	r3, [pc, #752]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d00c      	beq.n	8002bce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb4:	4bb9      	ldr	r3, [pc, #740]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d15c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x10e>
 8002bc0:	4bb6      	ldr	r3, [pc, #728]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d155      	bne.n	8002c7a <HAL_RCC_OscConfig+0x10e>
 8002bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002be2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d102      	bne.n	8002c00 <HAL_RCC_OscConfig+0x94>
 8002bfa:	4ba8      	ldr	r3, [pc, #672]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	e015      	b.n	8002c2c <HAL_RCC_OscConfig+0xc0>
 8002c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c04:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c18:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c1c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c28:	4b9c      	ldr	r3, [pc, #624]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c30:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c38:	fa92 f2a2 	rbit	r2, r2
 8002c3c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c40:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c44:	fab2 f282 	clz	r2, r2
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f042 0220 	orr.w	r2, r2, #32
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f002 021f 	and.w	r2, r2, #31
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 811f 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x334>
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 8116 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f000 bfaf 	b.w	8003bd8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCC_OscConfig+0x12e>
 8002c8c:	4b83      	ldr	r3, [pc, #524]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a82      	ldr	r2, [pc, #520]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	e036      	b.n	8002d08 <HAL_RCC_OscConfig+0x19c>
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x158>
 8002caa:	4b7c      	ldr	r3, [pc, #496]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7b      	ldr	r2, [pc, #492]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b79      	ldr	r3, [pc, #484]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a78      	ldr	r2, [pc, #480]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e021      	b.n	8002d08 <HAL_RCC_OscConfig+0x19c>
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x184>
 8002cd6:	4b71      	ldr	r3, [pc, #452]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a70      	ldr	r2, [pc, #448]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b6e      	ldr	r3, [pc, #440]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a6d      	ldr	r2, [pc, #436]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0x19c>
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a69      	ldr	r2, [pc, #420]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a66      	ldr	r2, [pc, #408]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d08:	4b64      	ldr	r3, [pc, #400]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f023 020f 	bic.w	r2, r3, #15
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	495f      	ldr	r1, [pc, #380]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d059      	beq.n	8002de6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe f903 	bl	8000f3c <HAL_GetTick>
 8002d36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7fe f8fe 	bl	8000f3c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	; 0x64
 8002d4a:	d902      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	f000 bf43 	b.w	8003bd8 <HAL_RCC_OscConfig+0x106c>
 8002d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d56:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_RCC_OscConfig+0x218>
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	e015      	b.n	8002db0 <HAL_RCC_OscConfig+0x244>
 8002d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d88:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002da0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002dac:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002db4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002db8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002dbc:	fa92 f2a2 	rbit	r2, r2
 8002dc0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002dc4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f042 0220 	orr.w	r2, r2, #32
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f002 021f 	and.w	r2, r2, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ab      	beq.n	8002d3c <HAL_RCC_OscConfig+0x1d0>
 8002de4:	e05d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe f8a9 	bl	8000f3c <HAL_GetTick>
 8002dea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe f8a4 	bl	8000f3c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b64      	cmp	r3, #100	; 0x64
 8002dfe:	d902      	bls.n	8002e06 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	f000 bee9 	b.w	8003bd8 <HAL_RCC_OscConfig+0x106c>
 8002e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e0a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d102      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2cc>
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	e015      	b.n	8002e64 <HAL_RCC_OscConfig+0x2f8>
 8002e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e50:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e68:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e6c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e70:	fa92 f2a2 	rbit	r2, r2
 8002e74:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e78:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e7c:	fab2 f282 	clz	r2, r2
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	f042 0220 	orr.w	r2, r2, #32
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	f002 021f 	and.w	r2, r2, #31
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ab      	bne.n	8002df0 <HAL_RCC_OscConfig+0x284>
 8002e98:	e003      	b.n	8002ea2 <HAL_RCC_OscConfig+0x336>
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 817d 	beq.w	80031b2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002eb8:	4ba6      	ldr	r3, [pc, #664]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ec4:	4ba3      	ldr	r3, [pc, #652]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d172      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x44a>
 8002ed0:	4ba0      	ldr	r3, [pc, #640]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d16c      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x44a>
 8002edc:	2302      	movs	r3, #2
 8002ede:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002eee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <HAL_RCC_OscConfig+0x3a0>
 8002f06:	4b93      	ldr	r3, [pc, #588]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	e013      	b.n	8002f34 <HAL_RCC_OscConfig+0x3c8>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f30:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2202      	movs	r2, #2
 8002f36:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f46:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f4a:	fab2 f282 	clz	r2, r2
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f042 0220 	orr.w	r2, r2, #32
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f002 021f 	and.w	r2, r2, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCC_OscConfig+0x410>
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d002      	beq.n	8002f7c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f000 be2e 	b.w	8003bd8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b75      	ldr	r3, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	21f8      	movs	r1, #248	; 0xf8
 8002f92:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f9a:	fa91 f1a1 	rbit	r1, r1
 8002f9e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002fa2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002fa6:	fab1 f181 	clz	r1, r1
 8002faa:	b2c9      	uxtb	r1, r1
 8002fac:	408b      	lsls	r3, r1
 8002fae:	4969      	ldr	r1, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb4:	e0fd      	b.n	80031b2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8088 	beq.w	80030d8 <HAL_RCC_OscConfig+0x56c>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002fda:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fe8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fd ffa2 	bl	8000f3c <HAL_GetTick>
 8002ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fd ff9d 	bl	8000f3c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	f000 bde2 	b.w	8003bd8 <HAL_RCC_OscConfig+0x106c>
 8003014:	2302      	movs	r3, #2
 8003016:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003026:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d102      	bne.n	8003044 <HAL_RCC_OscConfig+0x4d8>
 800303e:	4b45      	ldr	r3, [pc, #276]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	e013      	b.n	800306c <HAL_RCC_OscConfig+0x500>
 8003044:	2302      	movs	r3, #2
 8003046:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003056:	2302      	movs	r3, #2
 8003058:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800305c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003068:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	2202      	movs	r2, #2
 800306e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003072:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003076:	fa92 f2a2 	rbit	r2, r2
 800307a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800307e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003082:	fab2 f282 	clz	r2, r2
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	f042 0220 	orr.w	r2, r2, #32
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f002 021f 	and.w	r2, r2, #31
 8003092:	2101      	movs	r1, #1
 8003094:	fa01 f202 	lsl.w	r2, r1, r2
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0af      	beq.n	8002ffe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	21f8      	movs	r1, #248	; 0xf8
 80030b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030bc:	fa91 f1a1 	rbit	r1, r1
 80030c0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80030c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030c8:	fab1 f181 	clz	r1, r1
 80030cc:	b2c9      	uxtb	r1, r1
 80030ce:	408b      	lsls	r3, r1
 80030d0:	4920      	ldr	r1, [pc, #128]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
 80030d6:	e06c      	b.n	80031b2 <HAL_RCC_OscConfig+0x646>
 80030d8:	2301      	movs	r3, #1
 80030da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	461a      	mov	r2, r3
 8003100:	2300      	movs	r3, #0
 8003102:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fd ff1a 	bl	8000f3c <HAL_GetTick>
 8003108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310e:	f7fd ff15 	bl	8000f3c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d902      	bls.n	8003124 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	f000 bd5a 	b.w	8003bd8 <HAL_RCC_OscConfig+0x106c>
 8003124:	2302      	movs	r3, #2
 8003126:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d104      	bne.n	8003158 <HAL_RCC_OscConfig+0x5ec>
 800314e:	4b01      	ldr	r3, [pc, #4]	; (8003154 <HAL_RCC_OscConfig+0x5e8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	e015      	b.n	8003180 <HAL_RCC_OscConfig+0x614>
 8003154:	40021000 	.word	0x40021000
 8003158:	2302      	movs	r3, #2
 800315a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800316a:	2302      	movs	r3, #2
 800316c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003170:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800317c:	4bc8      	ldr	r3, [pc, #800]	; (80034a0 <HAL_RCC_OscConfig+0x934>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2202      	movs	r2, #2
 8003182:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003186:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800318a:	fa92 f2a2 	rbit	r2, r2
 800318e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003192:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003196:	fab2 f282 	clz	r2, r2
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	f042 0220 	orr.w	r2, r2, #32
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	f002 021f 	and.w	r2, r2, #31
 80031a6:	2101      	movs	r1, #1
 80031a8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ad      	bne.n	800310e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8110 	beq.w	80033e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d079      	beq.n	80032cc <HAL_RCC_OscConfig+0x760>
 80031d8:	2301      	movs	r3, #1
 80031da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	4bab      	ldr	r3, [pc, #684]	; (80034a4 <HAL_RCC_OscConfig+0x938>)
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	461a      	mov	r2, r3
 80031fe:	2301      	movs	r3, #1
 8003200:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fd fe9b 	bl	8000f3c <HAL_GetTick>
 8003206:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7fd fe96 	bl	8000f3c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d902      	bls.n	8003222 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	f000 bcdb 	b.w	8003bd8 <HAL_RCC_OscConfig+0x106c>
 8003222:	2302      	movs	r3, #2
 8003224:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800323c:	2202      	movs	r2, #2
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	fa93 f2a3 	rbit	r2, r3
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003260:	2202      	movs	r2, #2
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	fa93 f2a3 	rbit	r2, r3
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800327a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327c:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <HAL_RCC_OscConfig+0x934>)
 800327e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003288:	2102      	movs	r1, #2
 800328a:	6019      	str	r1, [r3, #0]
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f1a3 	rbit	r1, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032a2:	6019      	str	r1, [r3, #0]
  return result;
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0a0      	beq.n	800320c <HAL_RCC_OscConfig+0x6a0>
 80032ca:	e08d      	b.n	80033e8 <HAL_RCC_OscConfig+0x87c>
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	fa93 f2a3 	rbit	r2, r3
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032ee:	601a      	str	r2, [r3, #0]
  return result;
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	4b68      	ldr	r3, [pc, #416]	; (80034a4 <HAL_RCC_OscConfig+0x938>)
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	461a      	mov	r2, r3
 800330a:	2300      	movs	r3, #0
 800330c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330e:	f7fd fe15 	bl	8000f3c <HAL_GetTick>
 8003312:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003316:	e00a      	b.n	800332e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003318:	f7fd fe10 	bl	8000f3c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d902      	bls.n	800332e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	f000 bc55 	b.w	8003bd8 <HAL_RCC_OscConfig+0x106c>
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003336:	2202      	movs	r2, #2
 8003338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fa93 f2a3 	rbit	r2, r3
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800335a:	2202      	movs	r2, #2
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fa93 f2a3 	rbit	r2, r3
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800337e:	2202      	movs	r2, #2
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fa93 f2a3 	rbit	r2, r3
 8003390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003394:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003398:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339a:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <HAL_RCC_OscConfig+0x934>)
 800339c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800339e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033a6:	2102      	movs	r1, #2
 80033a8:	6019      	str	r1, [r3, #0]
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f1a3 	rbit	r1, r3
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033c0:	6019      	str	r1, [r3, #0]
  return result;
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d197      	bne.n	8003318 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 81a1 	beq.w	8003740 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003404:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <HAL_RCC_OscConfig+0x934>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d116      	bne.n	800343e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003410:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <HAL_RCC_OscConfig+0x934>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4a22      	ldr	r2, [pc, #136]	; (80034a0 <HAL_RCC_OscConfig+0x934>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	61d3      	str	r3, [r2, #28]
 800341c:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCC_OscConfig+0x934>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003436:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCC_OscConfig+0x93c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11a      	bne.n	8003480 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_RCC_OscConfig+0x93c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <HAL_RCC_OscConfig+0x93c>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003456:	f7fd fd71 	bl	8000f3c <HAL_GetTick>
 800345a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	e009      	b.n	8003474 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003460:	f7fd fd6c 	bl	8000f3c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b64      	cmp	r3, #100	; 0x64
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e3b1      	b.n	8003bd8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_RCC_OscConfig+0x93c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ef      	beq.n	8003460 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d10d      	bne.n	80034ac <HAL_RCC_OscConfig+0x940>
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCC_OscConfig+0x934>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4a02      	ldr	r2, [pc, #8]	; (80034a0 <HAL_RCC_OscConfig+0x934>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	e03c      	b.n	8003518 <HAL_RCC_OscConfig+0x9ac>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	10908120 	.word	0x10908120
 80034a8:	40007000 	.word	0x40007000
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10c      	bne.n	80034d6 <HAL_RCC_OscConfig+0x96a>
 80034bc:	4bc1      	ldr	r3, [pc, #772]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4ac0      	ldr	r2, [pc, #768]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6213      	str	r3, [r2, #32]
 80034c8:	4bbe      	ldr	r3, [pc, #760]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4abd      	ldr	r2, [pc, #756]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	e020      	b.n	8003518 <HAL_RCC_OscConfig+0x9ac>
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x994>
 80034e6:	4bb7      	ldr	r3, [pc, #732]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4ab6      	ldr	r2, [pc, #728]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80034ec:	f043 0304 	orr.w	r3, r3, #4
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4bb4      	ldr	r3, [pc, #720]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4ab3      	ldr	r2, [pc, #716]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6213      	str	r3, [r2, #32]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0x9ac>
 8003500:	4bb0      	ldr	r3, [pc, #704]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4aaf      	ldr	r2, [pc, #700]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	4bad      	ldr	r3, [pc, #692]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4aac      	ldr	r2, [pc, #688]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 8003512:	f023 0304 	bic.w	r3, r3, #4
 8003516:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8081 	beq.w	800362c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352a:	f7fd fd07 	bl	8000f3c <HAL_GetTick>
 800352e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fd fd02 	bl	8000f3c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e345      	b.n	8003bd8 <HAL_RCC_OscConfig+0x106c>
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003578:	2202      	movs	r2, #2
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003592:	601a      	str	r2, [r3, #0]
  return result;
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800359c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_OscConfig+0xa4c>
 80035b2:	4b84      	ldr	r3, [pc, #528]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	e013      	b.n	80035e0 <HAL_RCC_OscConfig+0xa74>
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035c0:	2202      	movs	r2, #2
 80035c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	fa93 f2a3 	rbit	r2, r3
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	4b79      	ldr	r3, [pc, #484]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035e8:	2102      	movs	r1, #2
 80035ea:	6011      	str	r1, [r2, #0]
 80035ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	fa92 f1a2 	rbit	r1, r2
 80035fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003602:	6011      	str	r1, [r2, #0]
  return result;
 8003604:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003608:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	fab2 f282 	clz	r2, r2
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	f002 021f 	and.w	r2, r2, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f202 	lsl.w	r2, r1, r2
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d084      	beq.n	8003534 <HAL_RCC_OscConfig+0x9c8>
 800362a:	e07f      	b.n	800372c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362c:	f7fd fc86 	bl	8000f3c <HAL_GetTick>
 8003630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	e00b      	b.n	800364e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd fc81 	bl	8000f3c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e2c4      	b.n	8003bd8 <HAL_RCC_OscConfig+0x106c>
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003656:	2202      	movs	r2, #2
 8003658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	fa93 f2a3 	rbit	r2, r3
 8003668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800367a:	2202      	movs	r2, #2
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	fa93 f2a3 	rbit	r2, r3
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003694:	601a      	str	r2, [r3, #0]
  return result;
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800369e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d102      	bne.n	80036ba <HAL_RCC_OscConfig+0xb4e>
 80036b4:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	e013      	b.n	80036e2 <HAL_RCC_OscConfig+0xb76>
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036c2:	2202      	movs	r2, #2
 80036c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036ea:	2102      	movs	r1, #2
 80036ec:	6011      	str	r1, [r2, #0]
 80036ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	fa92 f1a2 	rbit	r1, r2
 80036fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003700:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003704:	6011      	str	r1, [r2, #0]
  return result;
 8003706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800370a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d184      	bne.n	8003636 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800372c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8242 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_RCC_OscConfig+0xc58>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b08      	cmp	r3, #8
 800375c:	f000 8213 	beq.w	8003b86 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	2b02      	cmp	r3, #2
 800376e:	f040 8162 	bne.w	8003a36 <HAL_RCC_OscConfig+0xeca>
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800377a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800377e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	fa93 f2a3 	rbit	r2, r3
 800378e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003792:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003796:	601a      	str	r2, [r3, #0]
  return result;
 8003798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	fab3 f383 	clz	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	461a      	mov	r2, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fd fbc0 	bl	8000f3c <HAL_GetTick>
 80037bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c0:	e00c      	b.n	80037dc <HAL_RCC_OscConfig+0xc70>
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fd fbb8 	bl	8000f3c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1fd      	b.n	8003bd8 <HAL_RCC_OscConfig+0x106c>
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	fa93 f2a3 	rbit	r2, r3
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003800:	601a      	str	r2, [r3, #0]
  return result;
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800380a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d102      	bne.n	8003826 <HAL_RCC_OscConfig+0xcba>
 8003820:	4bb0      	ldr	r3, [pc, #704]	; (8003ae4 <HAL_RCC_OscConfig+0xf78>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	e027      	b.n	8003876 <HAL_RCC_OscConfig+0xd0a>
 8003826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800382e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	fa93 f2a3 	rbit	r2, r3
 8003842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003846:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003850:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	fa93 f2a3 	rbit	r2, r3
 8003868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	4b9c      	ldr	r3, [pc, #624]	; (8003ae4 <HAL_RCC_OscConfig+0xf78>)
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800387a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800387e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003882:	6011      	str	r1, [r2, #0]
 8003884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003888:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	fa92 f1a2 	rbit	r1, r2
 8003892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003896:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800389a:	6011      	str	r1, [r2, #0]
  return result;
 800389c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	fab2 f282 	clz	r2, r2
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	f042 0220 	orr.w	r2, r2, #32
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	f002 021f 	and.w	r2, r2, #31
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f202 	lsl.w	r2, r1, r2
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d182      	bne.n	80037c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c2:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <HAL_RCC_OscConfig+0xf78>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	430b      	orrs	r3, r1
 80038e4:	497f      	ldr	r1, [pc, #508]	; (8003ae4 <HAL_RCC_OscConfig+0xf78>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	fa93 f2a3 	rbit	r2, r3
 8003906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800390e:	601a      	str	r2, [r3, #0]
  return result;
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003918:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	461a      	mov	r2, r3
 800392c:	2301      	movs	r3, #1
 800392e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd fb04 	bl	8000f3c <HAL_GetTick>
 8003934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003938:	e009      	b.n	800394e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd faff 	bl	8000f3c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e144      	b.n	8003bd8 <HAL_RCC_OscConfig+0x106c>
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800395a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003960:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	fa93 f2a3 	rbit	r2, r3
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003972:	601a      	str	r2, [r3, #0]
  return result;
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800397c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_RCC_OscConfig+0xe2c>
 8003992:	4b54      	ldr	r3, [pc, #336]	; (8003ae4 <HAL_RCC_OscConfig+0xf78>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	e027      	b.n	80039e8 <HAL_RCC_OscConfig+0xe7c>
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	fa93 f2a3 	rbit	r2, r3
 80039b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	4b3f      	ldr	r3, [pc, #252]	; (8003ae4 <HAL_RCC_OscConfig+0xf78>)
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039f4:	6011      	str	r1, [r2, #0]
 80039f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039fa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	fa92 f1a2 	rbit	r1, r2
 8003a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a08:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a0c:	6011      	str	r1, [r2, #0]
  return result;
 8003a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a12:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	fab2 f282 	clz	r2, r2
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	f042 0220 	orr.w	r2, r2, #32
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	f002 021f 	and.w	r2, r2, #31
 8003a28:	2101      	movs	r1, #1
 8003a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d082      	beq.n	800393a <HAL_RCC_OscConfig+0xdce>
 8003a34:	e0cf      	b.n	8003bd6 <HAL_RCC_OscConfig+0x106a>
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a5a:	601a      	str	r2, [r3, #0]
  return result;
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	461a      	mov	r2, r3
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fa5e 	bl	8000f3c <HAL_GetTick>
 8003a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a84:	e009      	b.n	8003a9a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fd fa59 	bl	8000f3c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e09e      	b.n	8003bd8 <HAL_RCC_OscConfig+0x106c>
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fa93 f2a3 	rbit	r2, r3
 8003ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003abe:	601a      	str	r2, [r3, #0]
  return result;
 8003ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ac8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d104      	bne.n	8003ae8 <HAL_RCC_OscConfig+0xf7c>
 8003ade:	4b01      	ldr	r3, [pc, #4]	; (8003ae4 <HAL_RCC_OscConfig+0xf78>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	e029      	b.n	8003b38 <HAL_RCC_OscConfig+0xfcc>
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	fa93 f2a3 	rbit	r2, r3
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b12:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fa93 f2a3 	rbit	r2, r3
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_OscConfig+0x1078>)
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b3c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b4a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	fa92 f1a2 	rbit	r1, r2
 8003b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b58:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b5c:	6011      	str	r1, [r2, #0]
  return result;
 8003b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b62:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f042 0220 	orr.w	r2, r2, #32
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	f002 021f 	and.w	r2, r2, #31
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d180      	bne.n	8003a86 <HAL_RCC_OscConfig+0xf1a>
 8003b84:	e027      	b.n	8003bd6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e01e      	b.n	8003bd8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_RCC_OscConfig+0x1078>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ba2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ba6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003bba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000

08003be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b09e      	sub	sp, #120	; 0x78
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e162      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b90      	ldr	r3, [pc, #576]	; (8003e44 <HAL_RCC_ClockConfig+0x25c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d910      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b8d      	ldr	r3, [pc, #564]	; (8003e44 <HAL_RCC_ClockConfig+0x25c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 0207 	bic.w	r2, r3, #7
 8003c16:	498b      	ldr	r1, [pc, #556]	; (8003e44 <HAL_RCC_ClockConfig+0x25c>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b89      	ldr	r3, [pc, #548]	; (8003e44 <HAL_RCC_ClockConfig+0x25c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e14a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b82      	ldr	r3, [pc, #520]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	497f      	ldr	r1, [pc, #508]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80dc 	beq.w	8003e14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d13c      	bne.n	8003cde <HAL_RCC_ClockConfig+0xf6>
 8003c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xa6>
 8003c88:	4b6f      	ldr	r3, [pc, #444]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	e00f      	b.n	8003cae <HAL_RCC_ClockConfig+0xc6>
 8003c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003caa:	4b67      	ldr	r3, [pc, #412]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb6:	fa92 f2a2 	rbit	r2, r2
 8003cba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cbe:	fab2 f282 	clz	r2, r2
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	f042 0220 	orr.w	r2, r2, #32
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f002 021f 	and.w	r2, r2, #31
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d17b      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e0f3      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d13c      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x178>
 8003ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d102      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x128>
 8003d0a:	4b4f      	ldr	r3, [pc, #316]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	e00f      	b.n	8003d30 <HAL_RCC_ClockConfig+0x148>
 8003d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d22:	643b      	str	r3, [r7, #64]	; 0x40
 8003d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d2c:	4b46      	ldr	r3, [pc, #280]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d34:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d38:	fa92 f2a2 	rbit	r2, r2
 8003d3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f042 0220 	orr.w	r2, r2, #32
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f002 021f 	and.w	r2, r2, #31
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f202 	lsl.w	r2, r1, r2
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d13a      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0b2      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x2de>
 8003d60:	2302      	movs	r3, #2
 8003d62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d102      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x1a0>
 8003d82:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	e00d      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1bc>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
 8003d94:	2302      	movs	r3, #2
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2202      	movs	r2, #2
 8003da6:	61ba      	str	r2, [r7, #24]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	fa92 f2a2 	rbit	r2, r2
 8003dae:	617a      	str	r2, [r7, #20]
  return result;
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	fab2 f282 	clz	r2, r2
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	f042 0220 	orr.w	r2, r2, #32
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f002 021f 	and.w	r2, r2, #31
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e079      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd2:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f023 0203 	bic.w	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	491a      	ldr	r1, [pc, #104]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de4:	f7fd f8aa 	bl	8000f3c <HAL_GetTick>
 8003de8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dec:	f7fd f8a6 	bl	8000f3c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e061      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <HAL_RCC_ClockConfig+0x260>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 020c 	and.w	r2, r3, #12
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d1eb      	bne.n	8003dec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_ClockConfig+0x25c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d214      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <HAL_RCC_ClockConfig+0x25c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 0207 	bic.w	r2, r3, #7
 8003e2a:	4906      	ldr	r1, [pc, #24]	; (8003e44 <HAL_RCC_ClockConfig+0x25c>)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <HAL_RCC_ClockConfig+0x25c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e040      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x2de>
 8003e44:	40022000 	.word	0x40022000
 8003e48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	491a      	ldr	r1, [pc, #104]	; (8003ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4912      	ldr	r1, [pc, #72]	; (8003ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e8a:	f000 f829 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003e8e:	4601      	mov	r1, r0
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e98:	22f0      	movs	r2, #240	; 0xf0
 8003e9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	fa92 f2a2 	rbit	r2, r2
 8003ea2:	60fa      	str	r2, [r7, #12]
  return result;
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	fab2 f282 	clz	r2, r2
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	40d3      	lsrs	r3, r2
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <HAL_RCC_ClockConfig+0x2ec>)
 8003eb0:	5cd3      	ldrb	r3, [r2, r3]
 8003eb2:	fa21 f303 	lsr.w	r3, r1, r3
 8003eb6:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <HAL_RCC_ClockConfig+0x2f0>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_RCC_ClockConfig+0x2f4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fff8 	bl	8000eb4 <HAL_InitTick>
  
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3778      	adds	r7, #120	; 0x78
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	08004c7c 	.word	0x08004c7c
 8003ed8:	20000088 	.word	0x20000088
 8003edc:	2000008c 	.word	0x2000008c

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b08b      	sub	sp, #44	; 0x2c
 8003ee4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x30>
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x36>
 8003f0e:	e03c      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f12:	623b      	str	r3, [r7, #32]
      break;
 8003f14:	e03c      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	fa92 f2a2 	rbit	r2, r2
 8003f28:	607a      	str	r2, [r7, #4]
  return result;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	fab2 f282 	clz	r2, r2
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	40d3      	lsrs	r3, r2
 8003f34:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	220f      	movs	r2, #15
 8003f44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	fa92 f2a2 	rbit	r2, r2
 8003f4c:	60fa      	str	r2, [r7, #12]
  return result;
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	fab2 f282 	clz	r2, r2
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	40d3      	lsrs	r3, r2
 8003f58:	4a14      	ldr	r2, [pc, #80]	; (8003fac <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f68:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	e004      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4a0c      	ldr	r2, [pc, #48]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	623b      	str	r3, [r7, #32]
      break;
 8003f88:	e002      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f8c:	623b      	str	r3, [r7, #32]
      break;
 8003f8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f90:	6a3b      	ldr	r3, [r7, #32]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	372c      	adds	r7, #44	; 0x2c
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	007a1200 	.word	0x007a1200
 8003fa8:	08004c8c 	.word	0x08004c8c
 8003fac:	08004c9c 	.word	0x08004c9c
 8003fb0:	003d0900 	.word	0x003d0900

08003fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b092      	sub	sp, #72	; 0x48
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80d4 	beq.w	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd8:	4b4e      	ldr	r3, [pc, #312]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10e      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	4a4a      	ldr	r2, [pc, #296]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	61d3      	str	r3, [r2, #28]
 8003ff0:	4b48      	ldr	r3, [pc, #288]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004002:	4b45      	ldr	r3, [pc, #276]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d118      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400e:	4b42      	ldr	r3, [pc, #264]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a41      	ldr	r2, [pc, #260]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004018:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401a:	f7fc ff8f 	bl	8000f3c <HAL_GetTick>
 800401e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	e008      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004022:	f7fc ff8b 	bl	8000f3c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b64      	cmp	r3, #100	; 0x64
 800402e:	d901      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e169      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004040:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800404a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8084 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800405c:	429a      	cmp	r2, r3
 800405e:	d07c      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004060:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800406a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	461a      	mov	r2, r3
 800408a:	2301      	movs	r3, #1
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	461a      	mov	r2, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040b2:	4a18      	ldr	r2, [pc, #96]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04b      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fc ff3b 	bl	8000f3c <HAL_GetTick>
 80040c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fc ff37 	bl	8000f3c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e113      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80040e0:	2302      	movs	r3, #2
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
 80040ec:	2302      	movs	r3, #2
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	61fb      	str	r3, [r7, #28]
  return result;
 80040f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d108      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800410e:	4b01      	ldr	r3, [pc, #4]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	e00d      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004114:	40021000 	.word	0x40021000
 8004118:	40007000 	.word	0x40007000
 800411c:	10908100 	.word	0x10908100
 8004120:	2302      	movs	r3, #2
 8004122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	4b78      	ldr	r3, [pc, #480]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2202      	movs	r2, #2
 8004132:	613a      	str	r2, [r7, #16]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	fa92 f2a2 	rbit	r2, r2
 800413a:	60fa      	str	r2, [r7, #12]
  return result;
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	fab2 f282 	clz	r2, r2
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	f002 021f 	and.w	r2, r2, #31
 800414e:	2101      	movs	r1, #1
 8004150:	fa01 f202 	lsl.w	r2, r1, r2
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0b7      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800415a:	4b6d      	ldr	r3, [pc, #436]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	496a      	ldr	r1, [pc, #424]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800416c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004174:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	4a65      	ldr	r2, [pc, #404]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800417a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800418c:	4b60      	ldr	r3, [pc, #384]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	f023 0203 	bic.w	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	495d      	ldr	r1, [pc, #372]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800419a:	4313      	orrs	r3, r2
 800419c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041aa:	4b59      	ldr	r3, [pc, #356]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	4956      	ldr	r1, [pc, #344]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c8:	4b51      	ldr	r3, [pc, #324]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	494e      	ldr	r1, [pc, #312]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e6:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f023 0210 	bic.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4947      	ldr	r1, [pc, #284]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004204:	4b42      	ldr	r3, [pc, #264]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	493f      	ldr	r1, [pc, #252]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004222:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f023 0220 	bic.w	r2, r3, #32
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	4938      	ldr	r1, [pc, #224]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004230:	4313      	orrs	r3, r2
 8004232:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004240:	4b33      	ldr	r3, [pc, #204]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	4930      	ldr	r1, [pc, #192]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800425e:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	4929      	ldr	r1, [pc, #164]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800426c:	4313      	orrs	r3, r2
 800426e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800427c:	4b24      	ldr	r3, [pc, #144]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	4921      	ldr	r1, [pc, #132]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	491a      	ldr	r1, [pc, #104]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	4912      	ldr	r1, [pc, #72]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	490b      	ldr	r1, [pc, #44]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3748      	adds	r7, #72	; 0x48
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000

08004314 <siprintf>:
 8004314:	b40e      	push	{r1, r2, r3}
 8004316:	b500      	push	{lr}
 8004318:	b09c      	sub	sp, #112	; 0x70
 800431a:	ab1d      	add	r3, sp, #116	; 0x74
 800431c:	9002      	str	r0, [sp, #8]
 800431e:	9006      	str	r0, [sp, #24]
 8004320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004324:	4809      	ldr	r0, [pc, #36]	; (800434c <siprintf+0x38>)
 8004326:	9107      	str	r1, [sp, #28]
 8004328:	9104      	str	r1, [sp, #16]
 800432a:	4909      	ldr	r1, [pc, #36]	; (8004350 <siprintf+0x3c>)
 800432c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004330:	9105      	str	r1, [sp, #20]
 8004332:	6800      	ldr	r0, [r0, #0]
 8004334:	9301      	str	r3, [sp, #4]
 8004336:	a902      	add	r1, sp, #8
 8004338:	f000 f9a0 	bl	800467c <_svfiprintf_r>
 800433c:	9b02      	ldr	r3, [sp, #8]
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	b01c      	add	sp, #112	; 0x70
 8004344:	f85d eb04 	ldr.w	lr, [sp], #4
 8004348:	b003      	add	sp, #12
 800434a:	4770      	bx	lr
 800434c:	200000e0 	.word	0x200000e0
 8004350:	ffff0208 	.word	0xffff0208

08004354 <memset>:
 8004354:	4402      	add	r2, r0
 8004356:	4603      	mov	r3, r0
 8004358:	4293      	cmp	r3, r2
 800435a:	d100      	bne.n	800435e <memset+0xa>
 800435c:	4770      	bx	lr
 800435e:	f803 1b01 	strb.w	r1, [r3], #1
 8004362:	e7f9      	b.n	8004358 <memset+0x4>

08004364 <__errno>:
 8004364:	4b01      	ldr	r3, [pc, #4]	; (800436c <__errno+0x8>)
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	200000e0 	.word	0x200000e0

08004370 <__libc_init_array>:
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	4d0d      	ldr	r5, [pc, #52]	; (80043a8 <__libc_init_array+0x38>)
 8004374:	4c0d      	ldr	r4, [pc, #52]	; (80043ac <__libc_init_array+0x3c>)
 8004376:	1b64      	subs	r4, r4, r5
 8004378:	10a4      	asrs	r4, r4, #2
 800437a:	2600      	movs	r6, #0
 800437c:	42a6      	cmp	r6, r4
 800437e:	d109      	bne.n	8004394 <__libc_init_array+0x24>
 8004380:	4d0b      	ldr	r5, [pc, #44]	; (80043b0 <__libc_init_array+0x40>)
 8004382:	4c0c      	ldr	r4, [pc, #48]	; (80043b4 <__libc_init_array+0x44>)
 8004384:	f000 fc6a 	bl	8004c5c <_init>
 8004388:	1b64      	subs	r4, r4, r5
 800438a:	10a4      	asrs	r4, r4, #2
 800438c:	2600      	movs	r6, #0
 800438e:	42a6      	cmp	r6, r4
 8004390:	d105      	bne.n	800439e <__libc_init_array+0x2e>
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	f855 3b04 	ldr.w	r3, [r5], #4
 8004398:	4798      	blx	r3
 800439a:	3601      	adds	r6, #1
 800439c:	e7ee      	b.n	800437c <__libc_init_array+0xc>
 800439e:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a2:	4798      	blx	r3
 80043a4:	3601      	adds	r6, #1
 80043a6:	e7f2      	b.n	800438e <__libc_init_array+0x1e>
 80043a8:	08004ce0 	.word	0x08004ce0
 80043ac:	08004ce0 	.word	0x08004ce0
 80043b0:	08004ce0 	.word	0x08004ce0
 80043b4:	08004ce4 	.word	0x08004ce4

080043b8 <__retarget_lock_acquire_recursive>:
 80043b8:	4770      	bx	lr

080043ba <__retarget_lock_release_recursive>:
 80043ba:	4770      	bx	lr

080043bc <memcpy>:
 80043bc:	440a      	add	r2, r1
 80043be:	4291      	cmp	r1, r2
 80043c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043c4:	d100      	bne.n	80043c8 <memcpy+0xc>
 80043c6:	4770      	bx	lr
 80043c8:	b510      	push	{r4, lr}
 80043ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043d2:	4291      	cmp	r1, r2
 80043d4:	d1f9      	bne.n	80043ca <memcpy+0xe>
 80043d6:	bd10      	pop	{r4, pc}

080043d8 <_free_r>:
 80043d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043da:	2900      	cmp	r1, #0
 80043dc:	d044      	beq.n	8004468 <_free_r+0x90>
 80043de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e2:	9001      	str	r0, [sp, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f1a1 0404 	sub.w	r4, r1, #4
 80043ea:	bfb8      	it	lt
 80043ec:	18e4      	addlt	r4, r4, r3
 80043ee:	f000 f8df 	bl	80045b0 <__malloc_lock>
 80043f2:	4a1e      	ldr	r2, [pc, #120]	; (800446c <_free_r+0x94>)
 80043f4:	9801      	ldr	r0, [sp, #4]
 80043f6:	6813      	ldr	r3, [r2, #0]
 80043f8:	b933      	cbnz	r3, 8004408 <_free_r+0x30>
 80043fa:	6063      	str	r3, [r4, #4]
 80043fc:	6014      	str	r4, [r2, #0]
 80043fe:	b003      	add	sp, #12
 8004400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004404:	f000 b8da 	b.w	80045bc <__malloc_unlock>
 8004408:	42a3      	cmp	r3, r4
 800440a:	d908      	bls.n	800441e <_free_r+0x46>
 800440c:	6825      	ldr	r5, [r4, #0]
 800440e:	1961      	adds	r1, r4, r5
 8004410:	428b      	cmp	r3, r1
 8004412:	bf01      	itttt	eq
 8004414:	6819      	ldreq	r1, [r3, #0]
 8004416:	685b      	ldreq	r3, [r3, #4]
 8004418:	1949      	addeq	r1, r1, r5
 800441a:	6021      	streq	r1, [r4, #0]
 800441c:	e7ed      	b.n	80043fa <_free_r+0x22>
 800441e:	461a      	mov	r2, r3
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	b10b      	cbz	r3, 8004428 <_free_r+0x50>
 8004424:	42a3      	cmp	r3, r4
 8004426:	d9fa      	bls.n	800441e <_free_r+0x46>
 8004428:	6811      	ldr	r1, [r2, #0]
 800442a:	1855      	adds	r5, r2, r1
 800442c:	42a5      	cmp	r5, r4
 800442e:	d10b      	bne.n	8004448 <_free_r+0x70>
 8004430:	6824      	ldr	r4, [r4, #0]
 8004432:	4421      	add	r1, r4
 8004434:	1854      	adds	r4, r2, r1
 8004436:	42a3      	cmp	r3, r4
 8004438:	6011      	str	r1, [r2, #0]
 800443a:	d1e0      	bne.n	80043fe <_free_r+0x26>
 800443c:	681c      	ldr	r4, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	6053      	str	r3, [r2, #4]
 8004442:	440c      	add	r4, r1
 8004444:	6014      	str	r4, [r2, #0]
 8004446:	e7da      	b.n	80043fe <_free_r+0x26>
 8004448:	d902      	bls.n	8004450 <_free_r+0x78>
 800444a:	230c      	movs	r3, #12
 800444c:	6003      	str	r3, [r0, #0]
 800444e:	e7d6      	b.n	80043fe <_free_r+0x26>
 8004450:	6825      	ldr	r5, [r4, #0]
 8004452:	1961      	adds	r1, r4, r5
 8004454:	428b      	cmp	r3, r1
 8004456:	bf04      	itt	eq
 8004458:	6819      	ldreq	r1, [r3, #0]
 800445a:	685b      	ldreq	r3, [r3, #4]
 800445c:	6063      	str	r3, [r4, #4]
 800445e:	bf04      	itt	eq
 8004460:	1949      	addeq	r1, r1, r5
 8004462:	6021      	streq	r1, [r4, #0]
 8004464:	6054      	str	r4, [r2, #4]
 8004466:	e7ca      	b.n	80043fe <_free_r+0x26>
 8004468:	b003      	add	sp, #12
 800446a:	bd30      	pop	{r4, r5, pc}
 800446c:	200002b4 	.word	0x200002b4

08004470 <sbrk_aligned>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	4e0e      	ldr	r6, [pc, #56]	; (80044ac <sbrk_aligned+0x3c>)
 8004474:	460c      	mov	r4, r1
 8004476:	6831      	ldr	r1, [r6, #0]
 8004478:	4605      	mov	r5, r0
 800447a:	b911      	cbnz	r1, 8004482 <sbrk_aligned+0x12>
 800447c:	f000 fba6 	bl	8004bcc <_sbrk_r>
 8004480:	6030      	str	r0, [r6, #0]
 8004482:	4621      	mov	r1, r4
 8004484:	4628      	mov	r0, r5
 8004486:	f000 fba1 	bl	8004bcc <_sbrk_r>
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	d00a      	beq.n	80044a4 <sbrk_aligned+0x34>
 800448e:	1cc4      	adds	r4, r0, #3
 8004490:	f024 0403 	bic.w	r4, r4, #3
 8004494:	42a0      	cmp	r0, r4
 8004496:	d007      	beq.n	80044a8 <sbrk_aligned+0x38>
 8004498:	1a21      	subs	r1, r4, r0
 800449a:	4628      	mov	r0, r5
 800449c:	f000 fb96 	bl	8004bcc <_sbrk_r>
 80044a0:	3001      	adds	r0, #1
 80044a2:	d101      	bne.n	80044a8 <sbrk_aligned+0x38>
 80044a4:	f04f 34ff 	mov.w	r4, #4294967295
 80044a8:	4620      	mov	r0, r4
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	200002b8 	.word	0x200002b8

080044b0 <_malloc_r>:
 80044b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b4:	1ccd      	adds	r5, r1, #3
 80044b6:	f025 0503 	bic.w	r5, r5, #3
 80044ba:	3508      	adds	r5, #8
 80044bc:	2d0c      	cmp	r5, #12
 80044be:	bf38      	it	cc
 80044c0:	250c      	movcc	r5, #12
 80044c2:	2d00      	cmp	r5, #0
 80044c4:	4607      	mov	r7, r0
 80044c6:	db01      	blt.n	80044cc <_malloc_r+0x1c>
 80044c8:	42a9      	cmp	r1, r5
 80044ca:	d905      	bls.n	80044d8 <_malloc_r+0x28>
 80044cc:	230c      	movs	r3, #12
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	2600      	movs	r6, #0
 80044d2:	4630      	mov	r0, r6
 80044d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045ac <_malloc_r+0xfc>
 80044dc:	f000 f868 	bl	80045b0 <__malloc_lock>
 80044e0:	f8d8 3000 	ldr.w	r3, [r8]
 80044e4:	461c      	mov	r4, r3
 80044e6:	bb5c      	cbnz	r4, 8004540 <_malloc_r+0x90>
 80044e8:	4629      	mov	r1, r5
 80044ea:	4638      	mov	r0, r7
 80044ec:	f7ff ffc0 	bl	8004470 <sbrk_aligned>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	4604      	mov	r4, r0
 80044f4:	d155      	bne.n	80045a2 <_malloc_r+0xf2>
 80044f6:	f8d8 4000 	ldr.w	r4, [r8]
 80044fa:	4626      	mov	r6, r4
 80044fc:	2e00      	cmp	r6, #0
 80044fe:	d145      	bne.n	800458c <_malloc_r+0xdc>
 8004500:	2c00      	cmp	r4, #0
 8004502:	d048      	beq.n	8004596 <_malloc_r+0xe6>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	4631      	mov	r1, r6
 8004508:	4638      	mov	r0, r7
 800450a:	eb04 0903 	add.w	r9, r4, r3
 800450e:	f000 fb5d 	bl	8004bcc <_sbrk_r>
 8004512:	4581      	cmp	r9, r0
 8004514:	d13f      	bne.n	8004596 <_malloc_r+0xe6>
 8004516:	6821      	ldr	r1, [r4, #0]
 8004518:	1a6d      	subs	r5, r5, r1
 800451a:	4629      	mov	r1, r5
 800451c:	4638      	mov	r0, r7
 800451e:	f7ff ffa7 	bl	8004470 <sbrk_aligned>
 8004522:	3001      	adds	r0, #1
 8004524:	d037      	beq.n	8004596 <_malloc_r+0xe6>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	442b      	add	r3, r5
 800452a:	6023      	str	r3, [r4, #0]
 800452c:	f8d8 3000 	ldr.w	r3, [r8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d038      	beq.n	80045a6 <_malloc_r+0xf6>
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	42a2      	cmp	r2, r4
 8004538:	d12b      	bne.n	8004592 <_malloc_r+0xe2>
 800453a:	2200      	movs	r2, #0
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	e00f      	b.n	8004560 <_malloc_r+0xb0>
 8004540:	6822      	ldr	r2, [r4, #0]
 8004542:	1b52      	subs	r2, r2, r5
 8004544:	d41f      	bmi.n	8004586 <_malloc_r+0xd6>
 8004546:	2a0b      	cmp	r2, #11
 8004548:	d917      	bls.n	800457a <_malloc_r+0xca>
 800454a:	1961      	adds	r1, r4, r5
 800454c:	42a3      	cmp	r3, r4
 800454e:	6025      	str	r5, [r4, #0]
 8004550:	bf18      	it	ne
 8004552:	6059      	strne	r1, [r3, #4]
 8004554:	6863      	ldr	r3, [r4, #4]
 8004556:	bf08      	it	eq
 8004558:	f8c8 1000 	streq.w	r1, [r8]
 800455c:	5162      	str	r2, [r4, r5]
 800455e:	604b      	str	r3, [r1, #4]
 8004560:	4638      	mov	r0, r7
 8004562:	f104 060b 	add.w	r6, r4, #11
 8004566:	f000 f829 	bl	80045bc <__malloc_unlock>
 800456a:	f026 0607 	bic.w	r6, r6, #7
 800456e:	1d23      	adds	r3, r4, #4
 8004570:	1af2      	subs	r2, r6, r3
 8004572:	d0ae      	beq.n	80044d2 <_malloc_r+0x22>
 8004574:	1b9b      	subs	r3, r3, r6
 8004576:	50a3      	str	r3, [r4, r2]
 8004578:	e7ab      	b.n	80044d2 <_malloc_r+0x22>
 800457a:	42a3      	cmp	r3, r4
 800457c:	6862      	ldr	r2, [r4, #4]
 800457e:	d1dd      	bne.n	800453c <_malloc_r+0x8c>
 8004580:	f8c8 2000 	str.w	r2, [r8]
 8004584:	e7ec      	b.n	8004560 <_malloc_r+0xb0>
 8004586:	4623      	mov	r3, r4
 8004588:	6864      	ldr	r4, [r4, #4]
 800458a:	e7ac      	b.n	80044e6 <_malloc_r+0x36>
 800458c:	4634      	mov	r4, r6
 800458e:	6876      	ldr	r6, [r6, #4]
 8004590:	e7b4      	b.n	80044fc <_malloc_r+0x4c>
 8004592:	4613      	mov	r3, r2
 8004594:	e7cc      	b.n	8004530 <_malloc_r+0x80>
 8004596:	230c      	movs	r3, #12
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4638      	mov	r0, r7
 800459c:	f000 f80e 	bl	80045bc <__malloc_unlock>
 80045a0:	e797      	b.n	80044d2 <_malloc_r+0x22>
 80045a2:	6025      	str	r5, [r4, #0]
 80045a4:	e7dc      	b.n	8004560 <_malloc_r+0xb0>
 80045a6:	605b      	str	r3, [r3, #4]
 80045a8:	deff      	udf	#255	; 0xff
 80045aa:	bf00      	nop
 80045ac:	200002b4 	.word	0x200002b4

080045b0 <__malloc_lock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__malloc_lock+0x8>)
 80045b2:	f7ff bf01 	b.w	80043b8 <__retarget_lock_acquire_recursive>
 80045b6:	bf00      	nop
 80045b8:	200002b0 	.word	0x200002b0

080045bc <__malloc_unlock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__malloc_unlock+0x8>)
 80045be:	f7ff befc 	b.w	80043ba <__retarget_lock_release_recursive>
 80045c2:	bf00      	nop
 80045c4:	200002b0 	.word	0x200002b0

080045c8 <__ssputs_r>:
 80045c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	688e      	ldr	r6, [r1, #8]
 80045ce:	461f      	mov	r7, r3
 80045d0:	42be      	cmp	r6, r7
 80045d2:	680b      	ldr	r3, [r1, #0]
 80045d4:	4682      	mov	sl, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	4690      	mov	r8, r2
 80045da:	d82c      	bhi.n	8004636 <__ssputs_r+0x6e>
 80045dc:	898a      	ldrh	r2, [r1, #12]
 80045de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045e2:	d026      	beq.n	8004632 <__ssputs_r+0x6a>
 80045e4:	6965      	ldr	r5, [r4, #20]
 80045e6:	6909      	ldr	r1, [r1, #16]
 80045e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045ec:	eba3 0901 	sub.w	r9, r3, r1
 80045f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045f4:	1c7b      	adds	r3, r7, #1
 80045f6:	444b      	add	r3, r9
 80045f8:	106d      	asrs	r5, r5, #1
 80045fa:	429d      	cmp	r5, r3
 80045fc:	bf38      	it	cc
 80045fe:	461d      	movcc	r5, r3
 8004600:	0553      	lsls	r3, r2, #21
 8004602:	d527      	bpl.n	8004654 <__ssputs_r+0x8c>
 8004604:	4629      	mov	r1, r5
 8004606:	f7ff ff53 	bl	80044b0 <_malloc_r>
 800460a:	4606      	mov	r6, r0
 800460c:	b360      	cbz	r0, 8004668 <__ssputs_r+0xa0>
 800460e:	6921      	ldr	r1, [r4, #16]
 8004610:	464a      	mov	r2, r9
 8004612:	f7ff fed3 	bl	80043bc <memcpy>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	6126      	str	r6, [r4, #16]
 8004624:	6165      	str	r5, [r4, #20]
 8004626:	444e      	add	r6, r9
 8004628:	eba5 0509 	sub.w	r5, r5, r9
 800462c:	6026      	str	r6, [r4, #0]
 800462e:	60a5      	str	r5, [r4, #8]
 8004630:	463e      	mov	r6, r7
 8004632:	42be      	cmp	r6, r7
 8004634:	d900      	bls.n	8004638 <__ssputs_r+0x70>
 8004636:	463e      	mov	r6, r7
 8004638:	6820      	ldr	r0, [r4, #0]
 800463a:	4632      	mov	r2, r6
 800463c:	4641      	mov	r1, r8
 800463e:	f000 faab 	bl	8004b98 <memmove>
 8004642:	68a3      	ldr	r3, [r4, #8]
 8004644:	1b9b      	subs	r3, r3, r6
 8004646:	60a3      	str	r3, [r4, #8]
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	4433      	add	r3, r6
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	2000      	movs	r0, #0
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004654:	462a      	mov	r2, r5
 8004656:	f000 fac9 	bl	8004bec <_realloc_r>
 800465a:	4606      	mov	r6, r0
 800465c:	2800      	cmp	r0, #0
 800465e:	d1e0      	bne.n	8004622 <__ssputs_r+0x5a>
 8004660:	6921      	ldr	r1, [r4, #16]
 8004662:	4650      	mov	r0, sl
 8004664:	f7ff feb8 	bl	80043d8 <_free_r>
 8004668:	230c      	movs	r3, #12
 800466a:	f8ca 3000 	str.w	r3, [sl]
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004674:	81a3      	strh	r3, [r4, #12]
 8004676:	f04f 30ff 	mov.w	r0, #4294967295
 800467a:	e7e9      	b.n	8004650 <__ssputs_r+0x88>

0800467c <_svfiprintf_r>:
 800467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	4698      	mov	r8, r3
 8004682:	898b      	ldrh	r3, [r1, #12]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	b09d      	sub	sp, #116	; 0x74
 8004688:	4607      	mov	r7, r0
 800468a:	460d      	mov	r5, r1
 800468c:	4614      	mov	r4, r2
 800468e:	d50e      	bpl.n	80046ae <_svfiprintf_r+0x32>
 8004690:	690b      	ldr	r3, [r1, #16]
 8004692:	b963      	cbnz	r3, 80046ae <_svfiprintf_r+0x32>
 8004694:	2140      	movs	r1, #64	; 0x40
 8004696:	f7ff ff0b 	bl	80044b0 <_malloc_r>
 800469a:	6028      	str	r0, [r5, #0]
 800469c:	6128      	str	r0, [r5, #16]
 800469e:	b920      	cbnz	r0, 80046aa <_svfiprintf_r+0x2e>
 80046a0:	230c      	movs	r3, #12
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	e0d0      	b.n	800484c <_svfiprintf_r+0x1d0>
 80046aa:	2340      	movs	r3, #64	; 0x40
 80046ac:	616b      	str	r3, [r5, #20]
 80046ae:	2300      	movs	r3, #0
 80046b0:	9309      	str	r3, [sp, #36]	; 0x24
 80046b2:	2320      	movs	r3, #32
 80046b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80046bc:	2330      	movs	r3, #48	; 0x30
 80046be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004864 <_svfiprintf_r+0x1e8>
 80046c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046c6:	f04f 0901 	mov.w	r9, #1
 80046ca:	4623      	mov	r3, r4
 80046cc:	469a      	mov	sl, r3
 80046ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046d2:	b10a      	cbz	r2, 80046d8 <_svfiprintf_r+0x5c>
 80046d4:	2a25      	cmp	r2, #37	; 0x25
 80046d6:	d1f9      	bne.n	80046cc <_svfiprintf_r+0x50>
 80046d8:	ebba 0b04 	subs.w	fp, sl, r4
 80046dc:	d00b      	beq.n	80046f6 <_svfiprintf_r+0x7a>
 80046de:	465b      	mov	r3, fp
 80046e0:	4622      	mov	r2, r4
 80046e2:	4629      	mov	r1, r5
 80046e4:	4638      	mov	r0, r7
 80046e6:	f7ff ff6f 	bl	80045c8 <__ssputs_r>
 80046ea:	3001      	adds	r0, #1
 80046ec:	f000 80a9 	beq.w	8004842 <_svfiprintf_r+0x1c6>
 80046f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046f2:	445a      	add	r2, fp
 80046f4:	9209      	str	r2, [sp, #36]	; 0x24
 80046f6:	f89a 3000 	ldrb.w	r3, [sl]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80a1 	beq.w	8004842 <_svfiprintf_r+0x1c6>
 8004700:	2300      	movs	r3, #0
 8004702:	f04f 32ff 	mov.w	r2, #4294967295
 8004706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800470a:	f10a 0a01 	add.w	sl, sl, #1
 800470e:	9304      	str	r3, [sp, #16]
 8004710:	9307      	str	r3, [sp, #28]
 8004712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004716:	931a      	str	r3, [sp, #104]	; 0x68
 8004718:	4654      	mov	r4, sl
 800471a:	2205      	movs	r2, #5
 800471c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004720:	4850      	ldr	r0, [pc, #320]	; (8004864 <_svfiprintf_r+0x1e8>)
 8004722:	f7fb fd55 	bl	80001d0 <memchr>
 8004726:	9a04      	ldr	r2, [sp, #16]
 8004728:	b9d8      	cbnz	r0, 8004762 <_svfiprintf_r+0xe6>
 800472a:	06d0      	lsls	r0, r2, #27
 800472c:	bf44      	itt	mi
 800472e:	2320      	movmi	r3, #32
 8004730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004734:	0711      	lsls	r1, r2, #28
 8004736:	bf44      	itt	mi
 8004738:	232b      	movmi	r3, #43	; 0x2b
 800473a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800473e:	f89a 3000 	ldrb.w	r3, [sl]
 8004742:	2b2a      	cmp	r3, #42	; 0x2a
 8004744:	d015      	beq.n	8004772 <_svfiprintf_r+0xf6>
 8004746:	9a07      	ldr	r2, [sp, #28]
 8004748:	4654      	mov	r4, sl
 800474a:	2000      	movs	r0, #0
 800474c:	f04f 0c0a 	mov.w	ip, #10
 8004750:	4621      	mov	r1, r4
 8004752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004756:	3b30      	subs	r3, #48	; 0x30
 8004758:	2b09      	cmp	r3, #9
 800475a:	d94d      	bls.n	80047f8 <_svfiprintf_r+0x17c>
 800475c:	b1b0      	cbz	r0, 800478c <_svfiprintf_r+0x110>
 800475e:	9207      	str	r2, [sp, #28]
 8004760:	e014      	b.n	800478c <_svfiprintf_r+0x110>
 8004762:	eba0 0308 	sub.w	r3, r0, r8
 8004766:	fa09 f303 	lsl.w	r3, r9, r3
 800476a:	4313      	orrs	r3, r2
 800476c:	9304      	str	r3, [sp, #16]
 800476e:	46a2      	mov	sl, r4
 8004770:	e7d2      	b.n	8004718 <_svfiprintf_r+0x9c>
 8004772:	9b03      	ldr	r3, [sp, #12]
 8004774:	1d19      	adds	r1, r3, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	9103      	str	r1, [sp, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	bfbb      	ittet	lt
 800477e:	425b      	neglt	r3, r3
 8004780:	f042 0202 	orrlt.w	r2, r2, #2
 8004784:	9307      	strge	r3, [sp, #28]
 8004786:	9307      	strlt	r3, [sp, #28]
 8004788:	bfb8      	it	lt
 800478a:	9204      	strlt	r2, [sp, #16]
 800478c:	7823      	ldrb	r3, [r4, #0]
 800478e:	2b2e      	cmp	r3, #46	; 0x2e
 8004790:	d10c      	bne.n	80047ac <_svfiprintf_r+0x130>
 8004792:	7863      	ldrb	r3, [r4, #1]
 8004794:	2b2a      	cmp	r3, #42	; 0x2a
 8004796:	d134      	bne.n	8004802 <_svfiprintf_r+0x186>
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	1d1a      	adds	r2, r3, #4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	9203      	str	r2, [sp, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bfb8      	it	lt
 80047a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047a8:	3402      	adds	r4, #2
 80047aa:	9305      	str	r3, [sp, #20]
 80047ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004874 <_svfiprintf_r+0x1f8>
 80047b0:	7821      	ldrb	r1, [r4, #0]
 80047b2:	2203      	movs	r2, #3
 80047b4:	4650      	mov	r0, sl
 80047b6:	f7fb fd0b 	bl	80001d0 <memchr>
 80047ba:	b138      	cbz	r0, 80047cc <_svfiprintf_r+0x150>
 80047bc:	9b04      	ldr	r3, [sp, #16]
 80047be:	eba0 000a 	sub.w	r0, r0, sl
 80047c2:	2240      	movs	r2, #64	; 0x40
 80047c4:	4082      	lsls	r2, r0
 80047c6:	4313      	orrs	r3, r2
 80047c8:	3401      	adds	r4, #1
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d0:	4825      	ldr	r0, [pc, #148]	; (8004868 <_svfiprintf_r+0x1ec>)
 80047d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047d6:	2206      	movs	r2, #6
 80047d8:	f7fb fcfa 	bl	80001d0 <memchr>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d038      	beq.n	8004852 <_svfiprintf_r+0x1d6>
 80047e0:	4b22      	ldr	r3, [pc, #136]	; (800486c <_svfiprintf_r+0x1f0>)
 80047e2:	bb1b      	cbnz	r3, 800482c <_svfiprintf_r+0x1b0>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	3307      	adds	r3, #7
 80047e8:	f023 0307 	bic.w	r3, r3, #7
 80047ec:	3308      	adds	r3, #8
 80047ee:	9303      	str	r3, [sp, #12]
 80047f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f2:	4433      	add	r3, r6
 80047f4:	9309      	str	r3, [sp, #36]	; 0x24
 80047f6:	e768      	b.n	80046ca <_svfiprintf_r+0x4e>
 80047f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80047fc:	460c      	mov	r4, r1
 80047fe:	2001      	movs	r0, #1
 8004800:	e7a6      	b.n	8004750 <_svfiprintf_r+0xd4>
 8004802:	2300      	movs	r3, #0
 8004804:	3401      	adds	r4, #1
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	4619      	mov	r1, r3
 800480a:	f04f 0c0a 	mov.w	ip, #10
 800480e:	4620      	mov	r0, r4
 8004810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004814:	3a30      	subs	r2, #48	; 0x30
 8004816:	2a09      	cmp	r2, #9
 8004818:	d903      	bls.n	8004822 <_svfiprintf_r+0x1a6>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0c6      	beq.n	80047ac <_svfiprintf_r+0x130>
 800481e:	9105      	str	r1, [sp, #20]
 8004820:	e7c4      	b.n	80047ac <_svfiprintf_r+0x130>
 8004822:	fb0c 2101 	mla	r1, ip, r1, r2
 8004826:	4604      	mov	r4, r0
 8004828:	2301      	movs	r3, #1
 800482a:	e7f0      	b.n	800480e <_svfiprintf_r+0x192>
 800482c:	ab03      	add	r3, sp, #12
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	462a      	mov	r2, r5
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <_svfiprintf_r+0x1f4>)
 8004834:	a904      	add	r1, sp, #16
 8004836:	4638      	mov	r0, r7
 8004838:	f3af 8000 	nop.w
 800483c:	1c42      	adds	r2, r0, #1
 800483e:	4606      	mov	r6, r0
 8004840:	d1d6      	bne.n	80047f0 <_svfiprintf_r+0x174>
 8004842:	89ab      	ldrh	r3, [r5, #12]
 8004844:	065b      	lsls	r3, r3, #25
 8004846:	f53f af2d 	bmi.w	80046a4 <_svfiprintf_r+0x28>
 800484a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800484c:	b01d      	add	sp, #116	; 0x74
 800484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004852:	ab03      	add	r3, sp, #12
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	462a      	mov	r2, r5
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <_svfiprintf_r+0x1f4>)
 800485a:	a904      	add	r1, sp, #16
 800485c:	4638      	mov	r0, r7
 800485e:	f000 f879 	bl	8004954 <_printf_i>
 8004862:	e7eb      	b.n	800483c <_svfiprintf_r+0x1c0>
 8004864:	08004cac 	.word	0x08004cac
 8004868:	08004cb6 	.word	0x08004cb6
 800486c:	00000000 	.word	0x00000000
 8004870:	080045c9 	.word	0x080045c9
 8004874:	08004cb2 	.word	0x08004cb2

08004878 <_printf_common>:
 8004878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800487c:	4616      	mov	r6, r2
 800487e:	4699      	mov	r9, r3
 8004880:	688a      	ldr	r2, [r1, #8]
 8004882:	690b      	ldr	r3, [r1, #16]
 8004884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004888:	4293      	cmp	r3, r2
 800488a:	bfb8      	it	lt
 800488c:	4613      	movlt	r3, r2
 800488e:	6033      	str	r3, [r6, #0]
 8004890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004894:	4607      	mov	r7, r0
 8004896:	460c      	mov	r4, r1
 8004898:	b10a      	cbz	r2, 800489e <_printf_common+0x26>
 800489a:	3301      	adds	r3, #1
 800489c:	6033      	str	r3, [r6, #0]
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	0699      	lsls	r1, r3, #26
 80048a2:	bf42      	ittt	mi
 80048a4:	6833      	ldrmi	r3, [r6, #0]
 80048a6:	3302      	addmi	r3, #2
 80048a8:	6033      	strmi	r3, [r6, #0]
 80048aa:	6825      	ldr	r5, [r4, #0]
 80048ac:	f015 0506 	ands.w	r5, r5, #6
 80048b0:	d106      	bne.n	80048c0 <_printf_common+0x48>
 80048b2:	f104 0a19 	add.w	sl, r4, #25
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	6832      	ldr	r2, [r6, #0]
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	42ab      	cmp	r3, r5
 80048be:	dc26      	bgt.n	800490e <_printf_common+0x96>
 80048c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048c4:	1e13      	subs	r3, r2, #0
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	bf18      	it	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	0692      	lsls	r2, r2, #26
 80048ce:	d42b      	bmi.n	8004928 <_printf_common+0xb0>
 80048d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048d4:	4649      	mov	r1, r9
 80048d6:	4638      	mov	r0, r7
 80048d8:	47c0      	blx	r8
 80048da:	3001      	adds	r0, #1
 80048dc:	d01e      	beq.n	800491c <_printf_common+0xa4>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	6922      	ldr	r2, [r4, #16]
 80048e2:	f003 0306 	and.w	r3, r3, #6
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	bf02      	ittt	eq
 80048ea:	68e5      	ldreq	r5, [r4, #12]
 80048ec:	6833      	ldreq	r3, [r6, #0]
 80048ee:	1aed      	subeq	r5, r5, r3
 80048f0:	68a3      	ldr	r3, [r4, #8]
 80048f2:	bf0c      	ite	eq
 80048f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048f8:	2500      	movne	r5, #0
 80048fa:	4293      	cmp	r3, r2
 80048fc:	bfc4      	itt	gt
 80048fe:	1a9b      	subgt	r3, r3, r2
 8004900:	18ed      	addgt	r5, r5, r3
 8004902:	2600      	movs	r6, #0
 8004904:	341a      	adds	r4, #26
 8004906:	42b5      	cmp	r5, r6
 8004908:	d11a      	bne.n	8004940 <_printf_common+0xc8>
 800490a:	2000      	movs	r0, #0
 800490c:	e008      	b.n	8004920 <_printf_common+0xa8>
 800490e:	2301      	movs	r3, #1
 8004910:	4652      	mov	r2, sl
 8004912:	4649      	mov	r1, r9
 8004914:	4638      	mov	r0, r7
 8004916:	47c0      	blx	r8
 8004918:	3001      	adds	r0, #1
 800491a:	d103      	bne.n	8004924 <_printf_common+0xac>
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004924:	3501      	adds	r5, #1
 8004926:	e7c6      	b.n	80048b6 <_printf_common+0x3e>
 8004928:	18e1      	adds	r1, r4, r3
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	2030      	movs	r0, #48	; 0x30
 800492e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004932:	4422      	add	r2, r4
 8004934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800493c:	3302      	adds	r3, #2
 800493e:	e7c7      	b.n	80048d0 <_printf_common+0x58>
 8004940:	2301      	movs	r3, #1
 8004942:	4622      	mov	r2, r4
 8004944:	4649      	mov	r1, r9
 8004946:	4638      	mov	r0, r7
 8004948:	47c0      	blx	r8
 800494a:	3001      	adds	r0, #1
 800494c:	d0e6      	beq.n	800491c <_printf_common+0xa4>
 800494e:	3601      	adds	r6, #1
 8004950:	e7d9      	b.n	8004906 <_printf_common+0x8e>
	...

08004954 <_printf_i>:
 8004954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004958:	7e0f      	ldrb	r7, [r1, #24]
 800495a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800495c:	2f78      	cmp	r7, #120	; 0x78
 800495e:	4691      	mov	r9, r2
 8004960:	4680      	mov	r8, r0
 8004962:	460c      	mov	r4, r1
 8004964:	469a      	mov	sl, r3
 8004966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800496a:	d807      	bhi.n	800497c <_printf_i+0x28>
 800496c:	2f62      	cmp	r7, #98	; 0x62
 800496e:	d80a      	bhi.n	8004986 <_printf_i+0x32>
 8004970:	2f00      	cmp	r7, #0
 8004972:	f000 80d4 	beq.w	8004b1e <_printf_i+0x1ca>
 8004976:	2f58      	cmp	r7, #88	; 0x58
 8004978:	f000 80c0 	beq.w	8004afc <_printf_i+0x1a8>
 800497c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004984:	e03a      	b.n	80049fc <_printf_i+0xa8>
 8004986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800498a:	2b15      	cmp	r3, #21
 800498c:	d8f6      	bhi.n	800497c <_printf_i+0x28>
 800498e:	a101      	add	r1, pc, #4	; (adr r1, 8004994 <_printf_i+0x40>)
 8004990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004994:	080049ed 	.word	0x080049ed
 8004998:	08004a01 	.word	0x08004a01
 800499c:	0800497d 	.word	0x0800497d
 80049a0:	0800497d 	.word	0x0800497d
 80049a4:	0800497d 	.word	0x0800497d
 80049a8:	0800497d 	.word	0x0800497d
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	0800497d 	.word	0x0800497d
 80049b4:	0800497d 	.word	0x0800497d
 80049b8:	0800497d 	.word	0x0800497d
 80049bc:	0800497d 	.word	0x0800497d
 80049c0:	08004b05 	.word	0x08004b05
 80049c4:	08004a2d 	.word	0x08004a2d
 80049c8:	08004abf 	.word	0x08004abf
 80049cc:	0800497d 	.word	0x0800497d
 80049d0:	0800497d 	.word	0x0800497d
 80049d4:	08004b27 	.word	0x08004b27
 80049d8:	0800497d 	.word	0x0800497d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	0800497d 	.word	0x0800497d
 80049e4:	0800497d 	.word	0x0800497d
 80049e8:	08004ac7 	.word	0x08004ac7
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	1d1a      	adds	r2, r3, #4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	602a      	str	r2, [r5, #0]
 80049f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049fc:	2301      	movs	r3, #1
 80049fe:	e09f      	b.n	8004b40 <_printf_i+0x1ec>
 8004a00:	6820      	ldr	r0, [r4, #0]
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	0607      	lsls	r7, r0, #24
 8004a06:	f103 0104 	add.w	r1, r3, #4
 8004a0a:	6029      	str	r1, [r5, #0]
 8004a0c:	d501      	bpl.n	8004a12 <_printf_i+0xbe>
 8004a0e:	681e      	ldr	r6, [r3, #0]
 8004a10:	e003      	b.n	8004a1a <_printf_i+0xc6>
 8004a12:	0646      	lsls	r6, r0, #25
 8004a14:	d5fb      	bpl.n	8004a0e <_printf_i+0xba>
 8004a16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	da03      	bge.n	8004a26 <_printf_i+0xd2>
 8004a1e:	232d      	movs	r3, #45	; 0x2d
 8004a20:	4276      	negs	r6, r6
 8004a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a26:	485a      	ldr	r0, [pc, #360]	; (8004b90 <_printf_i+0x23c>)
 8004a28:	230a      	movs	r3, #10
 8004a2a:	e012      	b.n	8004a52 <_printf_i+0xfe>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	6820      	ldr	r0, [r4, #0]
 8004a30:	1d19      	adds	r1, r3, #4
 8004a32:	6029      	str	r1, [r5, #0]
 8004a34:	0605      	lsls	r5, r0, #24
 8004a36:	d501      	bpl.n	8004a3c <_printf_i+0xe8>
 8004a38:	681e      	ldr	r6, [r3, #0]
 8004a3a:	e002      	b.n	8004a42 <_printf_i+0xee>
 8004a3c:	0641      	lsls	r1, r0, #25
 8004a3e:	d5fb      	bpl.n	8004a38 <_printf_i+0xe4>
 8004a40:	881e      	ldrh	r6, [r3, #0]
 8004a42:	4853      	ldr	r0, [pc, #332]	; (8004b90 <_printf_i+0x23c>)
 8004a44:	2f6f      	cmp	r7, #111	; 0x6f
 8004a46:	bf0c      	ite	eq
 8004a48:	2308      	moveq	r3, #8
 8004a4a:	230a      	movne	r3, #10
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a52:	6865      	ldr	r5, [r4, #4]
 8004a54:	60a5      	str	r5, [r4, #8]
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	bfa2      	ittt	ge
 8004a5a:	6821      	ldrge	r1, [r4, #0]
 8004a5c:	f021 0104 	bicge.w	r1, r1, #4
 8004a60:	6021      	strge	r1, [r4, #0]
 8004a62:	b90e      	cbnz	r6, 8004a68 <_printf_i+0x114>
 8004a64:	2d00      	cmp	r5, #0
 8004a66:	d04b      	beq.n	8004b00 <_printf_i+0x1ac>
 8004a68:	4615      	mov	r5, r2
 8004a6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a6e:	fb03 6711 	mls	r7, r3, r1, r6
 8004a72:	5dc7      	ldrb	r7, [r0, r7]
 8004a74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a78:	4637      	mov	r7, r6
 8004a7a:	42bb      	cmp	r3, r7
 8004a7c:	460e      	mov	r6, r1
 8004a7e:	d9f4      	bls.n	8004a6a <_printf_i+0x116>
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d10b      	bne.n	8004a9c <_printf_i+0x148>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	07de      	lsls	r6, r3, #31
 8004a88:	d508      	bpl.n	8004a9c <_printf_i+0x148>
 8004a8a:	6923      	ldr	r3, [r4, #16]
 8004a8c:	6861      	ldr	r1, [r4, #4]
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	bfde      	ittt	le
 8004a92:	2330      	movle	r3, #48	; 0x30
 8004a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a9c:	1b52      	subs	r2, r2, r5
 8004a9e:	6122      	str	r2, [r4, #16]
 8004aa0:	f8cd a000 	str.w	sl, [sp]
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	aa03      	add	r2, sp, #12
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4640      	mov	r0, r8
 8004aac:	f7ff fee4 	bl	8004878 <_printf_common>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d14a      	bne.n	8004b4a <_printf_i+0x1f6>
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	b004      	add	sp, #16
 8004aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f043 0320 	orr.w	r3, r3, #32
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	4833      	ldr	r0, [pc, #204]	; (8004b94 <_printf_i+0x240>)
 8004ac8:	2778      	movs	r7, #120	; 0x78
 8004aca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6829      	ldr	r1, [r5, #0]
 8004ad2:	061f      	lsls	r7, r3, #24
 8004ad4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ad8:	d402      	bmi.n	8004ae0 <_printf_i+0x18c>
 8004ada:	065f      	lsls	r7, r3, #25
 8004adc:	bf48      	it	mi
 8004ade:	b2b6      	uxthmi	r6, r6
 8004ae0:	07df      	lsls	r7, r3, #31
 8004ae2:	bf48      	it	mi
 8004ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ae8:	6029      	str	r1, [r5, #0]
 8004aea:	bf48      	it	mi
 8004aec:	6023      	strmi	r3, [r4, #0]
 8004aee:	b91e      	cbnz	r6, 8004af8 <_printf_i+0x1a4>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	2310      	movs	r3, #16
 8004afa:	e7a7      	b.n	8004a4c <_printf_i+0xf8>
 8004afc:	4824      	ldr	r0, [pc, #144]	; (8004b90 <_printf_i+0x23c>)
 8004afe:	e7e4      	b.n	8004aca <_printf_i+0x176>
 8004b00:	4615      	mov	r5, r2
 8004b02:	e7bd      	b.n	8004a80 <_printf_i+0x12c>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	6826      	ldr	r6, [r4, #0]
 8004b08:	6961      	ldr	r1, [r4, #20]
 8004b0a:	1d18      	adds	r0, r3, #4
 8004b0c:	6028      	str	r0, [r5, #0]
 8004b0e:	0635      	lsls	r5, r6, #24
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	d501      	bpl.n	8004b18 <_printf_i+0x1c4>
 8004b14:	6019      	str	r1, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <_printf_i+0x1ca>
 8004b18:	0670      	lsls	r0, r6, #25
 8004b1a:	d5fb      	bpl.n	8004b14 <_printf_i+0x1c0>
 8004b1c:	8019      	strh	r1, [r3, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	4615      	mov	r5, r2
 8004b24:	e7bc      	b.n	8004aa0 <_printf_i+0x14c>
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	1d1a      	adds	r2, r3, #4
 8004b2a:	602a      	str	r2, [r5, #0]
 8004b2c:	681d      	ldr	r5, [r3, #0]
 8004b2e:	6862      	ldr	r2, [r4, #4]
 8004b30:	2100      	movs	r1, #0
 8004b32:	4628      	mov	r0, r5
 8004b34:	f7fb fb4c 	bl	80001d0 <memchr>
 8004b38:	b108      	cbz	r0, 8004b3e <_printf_i+0x1ea>
 8004b3a:	1b40      	subs	r0, r0, r5
 8004b3c:	6060      	str	r0, [r4, #4]
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	2300      	movs	r3, #0
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b48:	e7aa      	b.n	8004aa0 <_printf_i+0x14c>
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	47d0      	blx	sl
 8004b54:	3001      	adds	r0, #1
 8004b56:	d0ad      	beq.n	8004ab4 <_printf_i+0x160>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	079b      	lsls	r3, r3, #30
 8004b5c:	d413      	bmi.n	8004b86 <_printf_i+0x232>
 8004b5e:	68e0      	ldr	r0, [r4, #12]
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	4298      	cmp	r0, r3
 8004b64:	bfb8      	it	lt
 8004b66:	4618      	movlt	r0, r3
 8004b68:	e7a6      	b.n	8004ab8 <_printf_i+0x164>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	4649      	mov	r1, r9
 8004b70:	4640      	mov	r0, r8
 8004b72:	47d0      	blx	sl
 8004b74:	3001      	adds	r0, #1
 8004b76:	d09d      	beq.n	8004ab4 <_printf_i+0x160>
 8004b78:	3501      	adds	r5, #1
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	9903      	ldr	r1, [sp, #12]
 8004b7e:	1a5b      	subs	r3, r3, r1
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	dcf2      	bgt.n	8004b6a <_printf_i+0x216>
 8004b84:	e7eb      	b.n	8004b5e <_printf_i+0x20a>
 8004b86:	2500      	movs	r5, #0
 8004b88:	f104 0619 	add.w	r6, r4, #25
 8004b8c:	e7f5      	b.n	8004b7a <_printf_i+0x226>
 8004b8e:	bf00      	nop
 8004b90:	08004cbd 	.word	0x08004cbd
 8004b94:	08004cce 	.word	0x08004cce

08004b98 <memmove>:
 8004b98:	4288      	cmp	r0, r1
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	eb01 0402 	add.w	r4, r1, r2
 8004ba0:	d902      	bls.n	8004ba8 <memmove+0x10>
 8004ba2:	4284      	cmp	r4, r0
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	d807      	bhi.n	8004bb8 <memmove+0x20>
 8004ba8:	1e43      	subs	r3, r0, #1
 8004baa:	42a1      	cmp	r1, r4
 8004bac:	d008      	beq.n	8004bc0 <memmove+0x28>
 8004bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bb6:	e7f8      	b.n	8004baa <memmove+0x12>
 8004bb8:	4402      	add	r2, r0
 8004bba:	4601      	mov	r1, r0
 8004bbc:	428a      	cmp	r2, r1
 8004bbe:	d100      	bne.n	8004bc2 <memmove+0x2a>
 8004bc0:	bd10      	pop	{r4, pc}
 8004bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bca:	e7f7      	b.n	8004bbc <memmove+0x24>

08004bcc <_sbrk_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4d06      	ldr	r5, [pc, #24]	; (8004be8 <_sbrk_r+0x1c>)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	f7fb fee6 	bl	80009a8 <_sbrk>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_sbrk_r+0x1a>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_sbrk_r+0x1a>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	200002ac 	.word	0x200002ac

08004bec <_realloc_r>:
 8004bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf0:	4680      	mov	r8, r0
 8004bf2:	4614      	mov	r4, r2
 8004bf4:	460e      	mov	r6, r1
 8004bf6:	b921      	cbnz	r1, 8004c02 <_realloc_r+0x16>
 8004bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	f7ff bc57 	b.w	80044b0 <_malloc_r>
 8004c02:	b92a      	cbnz	r2, 8004c10 <_realloc_r+0x24>
 8004c04:	f7ff fbe8 	bl	80043d8 <_free_r>
 8004c08:	4625      	mov	r5, r4
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c10:	f000 f81b 	bl	8004c4a <_malloc_usable_size_r>
 8004c14:	4284      	cmp	r4, r0
 8004c16:	4607      	mov	r7, r0
 8004c18:	d802      	bhi.n	8004c20 <_realloc_r+0x34>
 8004c1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c1e:	d812      	bhi.n	8004c46 <_realloc_r+0x5a>
 8004c20:	4621      	mov	r1, r4
 8004c22:	4640      	mov	r0, r8
 8004c24:	f7ff fc44 	bl	80044b0 <_malloc_r>
 8004c28:	4605      	mov	r5, r0
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d0ed      	beq.n	8004c0a <_realloc_r+0x1e>
 8004c2e:	42bc      	cmp	r4, r7
 8004c30:	4622      	mov	r2, r4
 8004c32:	4631      	mov	r1, r6
 8004c34:	bf28      	it	cs
 8004c36:	463a      	movcs	r2, r7
 8004c38:	f7ff fbc0 	bl	80043bc <memcpy>
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f7ff fbca 	bl	80043d8 <_free_r>
 8004c44:	e7e1      	b.n	8004c0a <_realloc_r+0x1e>
 8004c46:	4635      	mov	r5, r6
 8004c48:	e7df      	b.n	8004c0a <_realloc_r+0x1e>

08004c4a <_malloc_usable_size_r>:
 8004c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c4e:	1f18      	subs	r0, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bfbc      	itt	lt
 8004c54:	580b      	ldrlt	r3, [r1, r0]
 8004c56:	18c0      	addlt	r0, r0, r3
 8004c58:	4770      	bx	lr
	...

08004c5c <_init>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr

08004c68 <_fini>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr
